// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ssd-git.juniper.net/contrail/cn2/contrail/pkg/apis/core/v1alpha1/generated.proto

#include "ssd-git.juniper.net/contrail/cn2/contrail/pkg/apis/core/v1alpha1/generated.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace ssd_git {
namespace juniper {
namespace net {
namespace contrail {
namespace cn2 {
namespace contrail {
namespace pkg {
namespace apis {
namespace core {
namespace v1alpha1 {
constexpr APSAttribute::APSAttribute(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : sequence_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct APSAttributeDefaultTypeInternal {
  constexpr APSAttributeDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~APSAttributeDefaultTypeInternal() {}
  union {
    APSAttribute _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT APSAttributeDefaultTypeInternal _APSAttribute_default_instance_;
constexpr AddressFamilies::AddressFamilies(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : family_(){}
struct AddressFamiliesDefaultTypeInternal {
  constexpr AddressFamiliesDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AddressFamiliesDefaultTypeInternal() {}
  union {
    AddressFamilies _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AddressFamiliesDefaultTypeInternal _AddressFamilies_default_instance_;
constexpr AddressGroup::AddressGroup(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : metadata_(nullptr)
  , spec_(nullptr)
  , status_(nullptr){}
struct AddressGroupDefaultTypeInternal {
  constexpr AddressGroupDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AddressGroupDefaultTypeInternal() {}
  union {
    AddressGroup _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AddressGroupDefaultTypeInternal _AddressGroup_default_instance_;
constexpr AddressGroupList::AddressGroupList(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : items_()
  , metadata_(nullptr){}
struct AddressGroupListDefaultTypeInternal {
  constexpr AddressGroupListDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AddressGroupListDefaultTypeInternal() {}
  union {
    AddressGroupList _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AddressGroupListDefaultTypeInternal _AddressGroupList_default_instance_;
constexpr AddressGroupPrefix::AddressGroupPrefix(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : subnet_(){}
struct AddressGroupPrefixDefaultTypeInternal {
  constexpr AddressGroupPrefixDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AddressGroupPrefixDefaultTypeInternal() {}
  union {
    AddressGroupPrefix _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AddressGroupPrefixDefaultTypeInternal _AddressGroupPrefix_default_instance_;
constexpr AddressGroupSpec::AddressGroupSpec(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : commonspec_(nullptr)
  , addressgroupprefixes_(nullptr){}
struct AddressGroupSpecDefaultTypeInternal {
  constexpr AddressGroupSpecDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AddressGroupSpecDefaultTypeInternal() {}
  union {
    AddressGroupSpec _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AddressGroupSpecDefaultTypeInternal _AddressGroupSpec_default_instance_;
constexpr AddressGroupStatus::AddressGroupStatus(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : commonstatus_(nullptr){}
struct AddressGroupStatusDefaultTypeInternal {
  constexpr AddressGroupStatusDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AddressGroupStatusDefaultTypeInternal() {}
  union {
    AddressGroupStatus _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AddressGroupStatusDefaultTypeInternal _AddressGroupStatus_default_instance_;
constexpr AllowedAddressPair::AllowedAddressPair(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : mac_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , addressmode_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , ip_(nullptr){}
struct AllowedAddressPairDefaultTypeInternal {
  constexpr AllowedAddressPairDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AllowedAddressPairDefaultTypeInternal() {}
  union {
    AllowedAddressPair _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AllowedAddressPairDefaultTypeInternal _AllowedAddressPair_default_instance_;
constexpr AllowedAddressPairSubnet::AllowedAddressPairSubnet(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : ipprefix_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , ipprefixlen_(nullptr){}
struct AllowedAddressPairSubnetDefaultTypeInternal {
  constexpr AllowedAddressPairSubnetDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AllowedAddressPairSubnetDefaultTypeInternal() {}
  union {
    AllowedAddressPairSubnet _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AllowedAddressPairSubnetDefaultTypeInternal _AllowedAddressPairSubnet_default_instance_;
constexpr AllowedAddressPairs::AllowedAddressPairs(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : allowedaddresspair_(){}
struct AllowedAddressPairsDefaultTypeInternal {
  constexpr AllowedAddressPairsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AllowedAddressPairsDefaultTypeInternal() {}
  union {
    AllowedAddressPairs _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AllowedAddressPairsDefaultTypeInternal _AllowedAddressPairs_default_instance_;
constexpr ApplicationPolicySet::ApplicationPolicySet(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : metadata_(nullptr)
  , spec_(nullptr)
  , status_(nullptr){}
struct ApplicationPolicySetDefaultTypeInternal {
  constexpr ApplicationPolicySetDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ApplicationPolicySetDefaultTypeInternal() {}
  union {
    ApplicationPolicySet _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ApplicationPolicySetDefaultTypeInternal _ApplicationPolicySet_default_instance_;
constexpr ApplicationPolicySetList::ApplicationPolicySetList(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : items_()
  , metadata_(nullptr){}
struct ApplicationPolicySetListDefaultTypeInternal {
  constexpr ApplicationPolicySetListDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ApplicationPolicySetListDefaultTypeInternal() {}
  union {
    ApplicationPolicySetList _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ApplicationPolicySetListDefaultTypeInternal _ApplicationPolicySetList_default_instance_;
constexpr ApplicationPolicySetSpec::ApplicationPolicySetSpec(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : firewallpolicyreferences_()
  , tagreferences_()
  , commonspec_(nullptr){}
struct ApplicationPolicySetSpecDefaultTypeInternal {
  constexpr ApplicationPolicySetSpecDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ApplicationPolicySetSpecDefaultTypeInternal() {}
  union {
    ApplicationPolicySetSpec _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ApplicationPolicySetSpecDefaultTypeInternal _ApplicationPolicySetSpec_default_instance_;
constexpr ApplicationPolicySetStatus::ApplicationPolicySetStatus(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : commonstatus_(nullptr)
  , allapplications_(false){}
struct ApplicationPolicySetStatusDefaultTypeInternal {
  constexpr ApplicationPolicySetStatusDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ApplicationPolicySetStatusDefaultTypeInternal() {}
  union {
    ApplicationPolicySetStatus _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ApplicationPolicySetStatusDefaultTypeInternal _ApplicationPolicySetStatus_default_instance_;
constexpr AuthenticationData::AuthenticationData(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : keyitems_()
  , keytype_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct AuthenticationDataDefaultTypeInternal {
  constexpr AuthenticationDataDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AuthenticationDataDefaultTypeInternal() {}
  union {
    AuthenticationData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AuthenticationDataDefaultTypeInternal _AuthenticationData_default_instance_;
constexpr AuthenticationKeyItem::AuthenticationKeyItem(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : key_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , keyid_(0){}
struct AuthenticationKeyItemDefaultTypeInternal {
  constexpr AuthenticationKeyItemDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AuthenticationKeyItemDefaultTypeInternal() {}
  union {
    AuthenticationKeyItem _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AuthenticationKeyItemDefaultTypeInternal _AuthenticationKeyItem_default_instance_;
constexpr BGPAsAService::BGPAsAService(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : metadata_(nullptr)
  , spec_(nullptr)
  , status_(nullptr){}
struct BGPAsAServiceDefaultTypeInternal {
  constexpr BGPAsAServiceDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~BGPAsAServiceDefaultTypeInternal() {}
  union {
    BGPAsAService _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT BGPAsAServiceDefaultTypeInternal _BGPAsAService_default_instance_;
constexpr BGPAsAServiceList::BGPAsAServiceList(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : items_()
  , metadata_(nullptr){}
struct BGPAsAServiceListDefaultTypeInternal {
  constexpr BGPAsAServiceListDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~BGPAsAServiceListDefaultTypeInternal() {}
  union {
    BGPAsAServiceList _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT BGPAsAServiceListDefaultTypeInternal _BGPAsAServiceList_default_instance_;
constexpr BGPAsAServiceSpec::BGPAsAServiceSpec(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : virtualmachineinterfacereferences_()
  , virtualmachineinterfacesselector_()
  , ipaddress_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , commonspec_(nullptr)
  , bgpasaservicesessionattributes_(nullptr)
  , autonomoussystem_(0)
  , shared_(false)
  , suppressrouteadvertisement_(false)
  , ipv4mappedipv6nexthop_(false){}
struct BGPAsAServiceSpecDefaultTypeInternal {
  constexpr BGPAsAServiceSpecDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~BGPAsAServiceSpecDefaultTypeInternal() {}
  union {
    BGPAsAServiceSpec _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT BGPAsAServiceSpecDefaultTypeInternal _BGPAsAServiceSpec_default_instance_;
constexpr BGPAsAServiceStatus::BGPAsAServiceStatus(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : bgprouterreferences_()
  , subnetreferences_()
  , commonstatus_(nullptr){}
struct BGPAsAServiceStatusDefaultTypeInternal {
  constexpr BGPAsAServiceStatusDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~BGPAsAServiceStatusDefaultTypeInternal() {}
  union {
    BGPAsAServiceStatus _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT BGPAsAServiceStatusDefaultTypeInternal _BGPAsAServiceStatus_default_instance_;
constexpr BGPFamilyAttributes::BGPFamilyAttributes(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : defaulttunnelencap_()
  , addressfamily_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , prefixlimit_(nullptr)
  , loopcount_(0){}
struct BGPFamilyAttributesDefaultTypeInternal {
  constexpr BGPFamilyAttributesDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~BGPFamilyAttributesDefaultTypeInternal() {}
  union {
    BGPFamilyAttributes _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT BGPFamilyAttributesDefaultTypeInternal _BGPFamilyAttributes_default_instance_;
constexpr BGPPrefixLimit::BGPPrefixLimit(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : idletimeout_(0)
  , maximum_(0){}
struct BGPPrefixLimitDefaultTypeInternal {
  constexpr BGPPrefixLimitDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~BGPPrefixLimitDefaultTypeInternal() {}
  union {
    BGPPrefixLimit _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT BGPPrefixLimitDefaultTypeInternal _BGPPrefixLimit_default_instance_;
constexpr BGPRouter::BGPRouter(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : metadata_(nullptr)
  , spec_(nullptr)
  , status_(nullptr){}
struct BGPRouterDefaultTypeInternal {
  constexpr BGPRouterDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~BGPRouterDefaultTypeInternal() {}
  union {
    BGPRouter _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT BGPRouterDefaultTypeInternal _BGPRouter_default_instance_;
constexpr BGPRouterList::BGPRouterList(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : items_()
  , metadata_(nullptr){}
struct BGPRouterListDefaultTypeInternal {
  constexpr BGPRouterListDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~BGPRouterListDefaultTypeInternal() {}
  union {
    BGPRouterList _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT BGPRouterListDefaultTypeInternal _BGPRouterList_default_instance_;
constexpr BGPRouterParameters::BGPRouterParameters(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : vendor_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , identifier_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , address_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , routertype_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , gatewayaddress_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , ipv6gatewayaddress_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , addressfamilies_(nullptr)
  , authdata_(nullptr)
  , admindown_(false)
  , autonomoussystem_(0)
  , clusterid_(int64_t{0})
  , port_(0)
  , sourceport_(0)
  , holdtime_(0)
  , localautonomoussystem_(0){}
struct BGPRouterParametersDefaultTypeInternal {
  constexpr BGPRouterParametersDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~BGPRouterParametersDefaultTypeInternal() {}
  union {
    BGPRouterParameters _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT BGPRouterParametersDefaultTypeInternal _BGPRouterParameters_default_instance_;
constexpr BGPRouterReference::BGPRouterReference(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : resourcereference_(nullptr)
  , attributes_(nullptr){}
struct BGPRouterReferenceDefaultTypeInternal {
  constexpr BGPRouterReferenceDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~BGPRouterReferenceDefaultTypeInternal() {}
  union {
    BGPRouterReference _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT BGPRouterReferenceDefaultTypeInternal _BGPRouterReference_default_instance_;
constexpr BGPRouterReferenceAttributes::BGPRouterReferenceAttributes(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : session_(){}
struct BGPRouterReferenceAttributesDefaultTypeInternal {
  constexpr BGPRouterReferenceAttributesDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~BGPRouterReferenceAttributesDefaultTypeInternal() {}
  union {
    BGPRouterReferenceAttributes _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT BGPRouterReferenceAttributesDefaultTypeInternal _BGPRouterReferenceAttributes_default_instance_;
constexpr BGPRouterSpec::BGPRouterSpec(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : bgprouterreferences_()
  , commonspec_(nullptr)
  , parent_(nullptr)
  , bgprouterparameters_(nullptr){}
struct BGPRouterSpecDefaultTypeInternal {
  constexpr BGPRouterSpecDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~BGPRouterSpecDefaultTypeInternal() {}
  union {
    BGPRouterSpec _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT BGPRouterSpecDefaultTypeInternal _BGPRouterSpec_default_instance_;
constexpr BGPRouterStatus::BGPRouterStatus(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : commonstatus_(nullptr){}
struct BGPRouterStatusDefaultTypeInternal {
  constexpr BGPRouterStatusDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~BGPRouterStatusDefaultTypeInternal() {}
  union {
    BGPRouterStatus _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT BGPRouterStatusDefaultTypeInternal _BGPRouterStatus_default_instance_;
constexpr BGPSession::BGPSession(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : sessionattributes_(){}
struct BGPSessionDefaultTypeInternal {
  constexpr BGPSessionDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~BGPSessionDefaultTypeInternal() {}
  union {
    BGPSession _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT BGPSessionDefaultTypeInternal _BGPSession_default_instance_;
constexpr BGPSessionAttributes::BGPSessionAttributes(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : familyattributes_()
  , bgprouter_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , privateasaction_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , addressfamilies_(nullptr)
  , authdata_(nullptr)
  , routeoriginoverride_(nullptr)
  , admindown_(false)
  , passive_(false)
  , asoverride_(false)
  , holdtime_(0)
  , loopcount_(0)
  , localautonomoussystem_(0){}
struct BGPSessionAttributesDefaultTypeInternal {
  constexpr BGPSessionAttributesDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~BGPSessionAttributesDefaultTypeInternal() {}
  union {
    BGPSessionAttributes _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT BGPSessionAttributesDefaultTypeInternal _BGPSessionAttributes_default_instance_;
constexpr BGPSessionIPAttributes::BGPSessionIPAttributes(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : bgpaasprimaryip_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , bgpaassecondaryip_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct BGPSessionIPAttributesDefaultTypeInternal {
  constexpr BGPSessionIPAttributesDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~BGPSessionIPAttributesDefaultTypeInternal() {}
  union {
    BGPSessionIPAttributes _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT BGPSessionIPAttributesDefaultTypeInternal _BGPSessionIPAttributes_default_instance_;
constexpr CommonSpec::CommonSpec(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : contrailfqname_(nullptr){}
struct CommonSpecDefaultTypeInternal {
  constexpr CommonSpecDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CommonSpecDefaultTypeInternal() {}
  union {
    CommonSpec _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CommonSpecDefaultTypeInternal _CommonSpec_default_instance_;
constexpr CommonStatus::CommonStatus(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : reconcilerstate_(nullptr){}
struct CommonStatusDefaultTypeInternal {
  constexpr CommonStatusDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CommonStatusDefaultTypeInternal() {}
  union {
    CommonStatus _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CommonStatusDefaultTypeInternal _CommonStatus_default_instance_;
constexpr ContrailFqName::ContrailFqName(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : fqname_(){}
struct ContrailFqNameDefaultTypeInternal {
  constexpr ContrailFqNameDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ContrailFqNameDefaultTypeInternal() {}
  union {
    ContrailFqName _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ContrailFqNameDefaultTypeInternal _ContrailFqName_default_instance_;
constexpr EncapsulationPriorities::EncapsulationPriorities(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : encapsulation_(){}
struct EncapsulationPrioritiesDefaultTypeInternal {
  constexpr EncapsulationPrioritiesDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~EncapsulationPrioritiesDefaultTypeInternal() {}
  union {
    EncapsulationPriorities _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT EncapsulationPrioritiesDefaultTypeInternal _EncapsulationPriorities_default_instance_;
constexpr FirewallActionListType::FirewallActionListType(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : simpleaction_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct FirewallActionListTypeDefaultTypeInternal {
  constexpr FirewallActionListTypeDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~FirewallActionListTypeDefaultTypeInternal() {}
  union {
    FirewallActionListType _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT FirewallActionListTypeDefaultTypeInternal _FirewallActionListType_default_instance_;
constexpr FirewallPolicy::FirewallPolicy(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : metadata_(nullptr)
  , spec_(nullptr)
  , status_(nullptr){}
struct FirewallPolicyDefaultTypeInternal {
  constexpr FirewallPolicyDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~FirewallPolicyDefaultTypeInternal() {}
  union {
    FirewallPolicy _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT FirewallPolicyDefaultTypeInternal _FirewallPolicy_default_instance_;
constexpr FirewallPolicyAttribute::FirewallPolicyAttribute(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : sequence_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct FirewallPolicyAttributeDefaultTypeInternal {
  constexpr FirewallPolicyAttributeDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~FirewallPolicyAttributeDefaultTypeInternal() {}
  union {
    FirewallPolicyAttribute _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT FirewallPolicyAttributeDefaultTypeInternal _FirewallPolicyAttribute_default_instance_;
constexpr FirewallPolicyList::FirewallPolicyList(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : items_()
  , metadata_(nullptr){}
struct FirewallPolicyListDefaultTypeInternal {
  constexpr FirewallPolicyListDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~FirewallPolicyListDefaultTypeInternal() {}
  union {
    FirewallPolicyList _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT FirewallPolicyListDefaultTypeInternal _FirewallPolicyList_default_instance_;
constexpr FirewallPolicyReference::FirewallPolicyReference(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : resourcereference_(nullptr)
  , attributes_(nullptr){}
struct FirewallPolicyReferenceDefaultTypeInternal {
  constexpr FirewallPolicyReferenceDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~FirewallPolicyReferenceDefaultTypeInternal() {}
  union {
    FirewallPolicyReference _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT FirewallPolicyReferenceDefaultTypeInternal _FirewallPolicyReference_default_instance_;
constexpr FirewallPolicySpec::FirewallPolicySpec(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : firewallrule_()
  , commonspec_(nullptr){}
struct FirewallPolicySpecDefaultTypeInternal {
  constexpr FirewallPolicySpecDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~FirewallPolicySpecDefaultTypeInternal() {}
  union {
    FirewallPolicySpec _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT FirewallPolicySpecDefaultTypeInternal _FirewallPolicySpec_default_instance_;
constexpr FirewallPolicyStatus::FirewallPolicyStatus(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : commonstatus_(nullptr){}
struct FirewallPolicyStatusDefaultTypeInternal {
  constexpr FirewallPolicyStatusDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~FirewallPolicyStatusDefaultTypeInternal() {}
  union {
    FirewallPolicyStatus _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT FirewallPolicyStatusDefaultTypeInternal _FirewallPolicyStatus_default_instance_;
constexpr FirewallRule::FirewallRule(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : metadata_(nullptr)
  , spec_(nullptr)
  , status_(nullptr){}
struct FirewallRuleDefaultTypeInternal {
  constexpr FirewallRuleDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~FirewallRuleDefaultTypeInternal() {}
  union {
    FirewallRule _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT FirewallRuleDefaultTypeInternal _FirewallRule_default_instance_;
constexpr FirewallRuleEndpointType::FirewallRuleEndpointType(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : tags_()
  , tagids_()
  , addressgroup_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , subnet_(nullptr)
  , any_(false){}
struct FirewallRuleEndpointTypeDefaultTypeInternal {
  constexpr FirewallRuleEndpointTypeDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~FirewallRuleEndpointTypeDefaultTypeInternal() {}
  union {
    FirewallRuleEndpointType _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT FirewallRuleEndpointTypeDefaultTypeInternal _FirewallRuleEndpointType_default_instance_;
constexpr FirewallRuleList::FirewallRuleList(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : items_()
  , metadata_(nullptr){}
struct FirewallRuleListDefaultTypeInternal {
  constexpr FirewallRuleListDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~FirewallRuleListDefaultTypeInternal() {}
  union {
    FirewallRuleList _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT FirewallRuleListDefaultTypeInternal _FirewallRuleList_default_instance_;
constexpr FirewallRuleReference::FirewallRuleReference(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : resourcereference_(nullptr)
  , attributes_(nullptr){}
struct FirewallRuleReferenceDefaultTypeInternal {
  constexpr FirewallRuleReferenceDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~FirewallRuleReferenceDefaultTypeInternal() {}
  union {
    FirewallRuleReference _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT FirewallRuleReferenceDefaultTypeInternal _FirewallRuleReference_default_instance_;
constexpr FirewallRuleSpec::FirewallRuleSpec(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : matchtags_()
  , matchtagstypes_()
  , tagreferences_()
  , direction_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , commonspec_(nullptr)
  , addressgroupreference_(nullptr)
  , actionlist_(nullptr)
  , service_(nullptr)
  , endpoint1_(nullptr)
  , endpoint2_(nullptr){}
struct FirewallRuleSpecDefaultTypeInternal {
  constexpr FirewallRuleSpecDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~FirewallRuleSpecDefaultTypeInternal() {}
  union {
    FirewallRuleSpec _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT FirewallRuleSpecDefaultTypeInternal _FirewallRuleSpec_default_instance_;
constexpr FirewallRuleStatus::FirewallRuleStatus(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : commonstatus_(nullptr){}
struct FirewallRuleStatusDefaultTypeInternal {
  constexpr FirewallRuleStatusDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~FirewallRuleStatusDefaultTypeInternal() {}
  union {
    FirewallRuleStatus _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT FirewallRuleStatusDefaultTypeInternal _FirewallRuleStatus_default_instance_;
constexpr FirewallServiceType::FirewallServiceType(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : protocol_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , sourceports_(nullptr)
  , destinationports_(nullptr)
  , protocolid_(int64_t{0}){}
struct FirewallServiceTypeDefaultTypeInternal {
  constexpr FirewallServiceTypeDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~FirewallServiceTypeDefaultTypeInternal() {}
  union {
    FirewallServiceType _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT FirewallServiceTypeDefaultTypeInternal _FirewallServiceType_default_instance_;
constexpr FirewallSubnet::FirewallSubnet(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : ipprefix_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , ipprefixlen_(nullptr){}
struct FirewallSubnetDefaultTypeInternal {
  constexpr FirewallSubnetDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~FirewallSubnetDefaultTypeInternal() {}
  union {
    FirewallSubnet _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT FirewallSubnetDefaultTypeInternal _FirewallSubnet_default_instance_;
constexpr FloatingIP::FloatingIP(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : metadata_(nullptr)
  , spec_(nullptr)
  , status_(nullptr){}
struct FloatingIPDefaultTypeInternal {
  constexpr FloatingIPDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~FloatingIPDefaultTypeInternal() {}
  union {
    FloatingIP _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT FloatingIPDefaultTypeInternal _FloatingIP_default_instance_;
constexpr FloatingIPList::FloatingIPList(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : items_()
  , metadata_(nullptr){}
struct FloatingIPListDefaultTypeInternal {
  constexpr FloatingIPListDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~FloatingIPListDefaultTypeInternal() {}
  union {
    FloatingIPList _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT FloatingIPListDefaultTypeInternal _FloatingIPList_default_instance_;
constexpr FloatingIPPortMappings::FloatingIPPortMappings(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : portmappings_(){}
struct FloatingIPPortMappingsDefaultTypeInternal {
  constexpr FloatingIPPortMappingsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~FloatingIPPortMappingsDefaultTypeInternal() {}
  union {
    FloatingIPPortMappings _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT FloatingIPPortMappingsDefaultTypeInternal _FloatingIPPortMappings_default_instance_;
constexpr FloatingIPPortPortMapping::FloatingIPPortPortMapping(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : protocol_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , srcport_(0)
  , dstport_(0){}
struct FloatingIPPortPortMappingDefaultTypeInternal {
  constexpr FloatingIPPortPortMappingDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~FloatingIPPortPortMappingDefaultTypeInternal() {}
  union {
    FloatingIPPortPortMapping _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT FloatingIPPortPortMappingDefaultTypeInternal _FloatingIPPortPortMapping_default_instance_;
constexpr FloatingIPSpec::FloatingIPSpec(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : virtualmachineinterfacereferences_()
  , floatingipaddress_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , floatingiptrafficdirection_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , commonspec_(nullptr)
  , floatingipportmappings_(nullptr)
  , parent_(nullptr)
  , floatingipportmappingsenable_(false){}
struct FloatingIPSpecDefaultTypeInternal {
  constexpr FloatingIPSpecDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~FloatingIPSpecDefaultTypeInternal() {}
  union {
    FloatingIPSpec _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT FloatingIPSpecDefaultTypeInternal _FloatingIPSpec_default_instance_;
constexpr FloatingIPStatus::FloatingIPStatus(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : commonstatus_(nullptr)
  , subnetreference_(nullptr){}
struct FloatingIPStatusDefaultTypeInternal {
  constexpr FloatingIPStatusDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~FloatingIPStatusDefaultTypeInternal() {}
  union {
    FloatingIPStatus _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT FloatingIPStatusDefaultTypeInternal _FloatingIPStatus_default_instance_;
constexpr GlobalSystemConfig::GlobalSystemConfig(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : metadata_(nullptr)
  , spec_(nullptr)
  , status_(nullptr){}
struct GlobalSystemConfigDefaultTypeInternal {
  constexpr GlobalSystemConfigDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GlobalSystemConfigDefaultTypeInternal() {}
  union {
    GlobalSystemConfig _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GlobalSystemConfigDefaultTypeInternal _GlobalSystemConfig_default_instance_;
constexpr GlobalSystemConfigList::GlobalSystemConfigList(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : items_()
  , metadata_(nullptr){}
struct GlobalSystemConfigListDefaultTypeInternal {
  constexpr GlobalSystemConfigListDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GlobalSystemConfigListDefaultTypeInternal() {}
  union {
    GlobalSystemConfigList _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GlobalSystemConfigListDefaultTypeInternal _GlobalSystemConfigList_default_instance_;
constexpr GlobalSystemConfigSpec::GlobalSystemConfigSpec(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : bgprouterreferences_()
  , commonspec_(nullptr)
  , autonomoussystem_(0)
  , enable4bytesas_(false)
  , ibgpautomesh_(false)
  , defaultenablesnat_(false){}
struct GlobalSystemConfigSpecDefaultTypeInternal {
  constexpr GlobalSystemConfigSpecDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GlobalSystemConfigSpecDefaultTypeInternal() {}
  union {
    GlobalSystemConfigSpec _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GlobalSystemConfigSpecDefaultTypeInternal _GlobalSystemConfigSpec_default_instance_;
constexpr GlobalSystemConfigStatus::GlobalSystemConfigStatus(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : commonstatus_(nullptr){}
struct GlobalSystemConfigStatusDefaultTypeInternal {
  constexpr GlobalSystemConfigStatusDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GlobalSystemConfigStatusDefaultTypeInternal() {}
  union {
    GlobalSystemConfigStatus _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GlobalSystemConfigStatusDefaultTypeInternal _GlobalSystemConfigStatus_default_instance_;
constexpr GlobalVrouterConfig::GlobalVrouterConfig(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : metadata_(nullptr)
  , spec_(nullptr)
  , status_(nullptr){}
struct GlobalVrouterConfigDefaultTypeInternal {
  constexpr GlobalVrouterConfigDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GlobalVrouterConfigDefaultTypeInternal() {}
  union {
    GlobalVrouterConfig _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GlobalVrouterConfigDefaultTypeInternal _GlobalVrouterConfig_default_instance_;
constexpr GlobalVrouterConfigList::GlobalVrouterConfigList(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : items_()
  , metadata_(nullptr){}
struct GlobalVrouterConfigListDefaultTypeInternal {
  constexpr GlobalVrouterConfigListDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GlobalVrouterConfigListDefaultTypeInternal() {}
  union {
    GlobalVrouterConfigList _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GlobalVrouterConfigListDefaultTypeInternal _GlobalVrouterConfigList_default_instance_;
constexpr GlobalVrouterConfigSpec::GlobalVrouterConfigSpec(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : commonspec_(nullptr)
  , parent_(nullptr)
  , encapsulationpriorities_(nullptr)
  , linklocalservices_(nullptr)
  , porttranslationpools_(nullptr)
  , flowexportrate_(0){}
struct GlobalVrouterConfigSpecDefaultTypeInternal {
  constexpr GlobalVrouterConfigSpecDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GlobalVrouterConfigSpecDefaultTypeInternal() {}
  union {
    GlobalVrouterConfigSpec _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GlobalVrouterConfigSpecDefaultTypeInternal _GlobalVrouterConfigSpec_default_instance_;
constexpr GlobalVrouterConfigStatus::GlobalVrouterConfigStatus(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : commonstatus_(nullptr){}
struct GlobalVrouterConfigStatusDefaultTypeInternal {
  constexpr GlobalVrouterConfigStatusDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GlobalVrouterConfigStatusDefaultTypeInternal() {}
  union {
    GlobalVrouterConfigStatus _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GlobalVrouterConfigStatusDefaultTypeInternal _GlobalVrouterConfigStatus_default_instance_;
constexpr IPRange::IPRange(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : from_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , to_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct IPRangeDefaultTypeInternal {
  constexpr IPRangeDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~IPRangeDefaultTypeInternal() {}
  union {
    IPRange _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT IPRangeDefaultTypeInternal _IPRange_default_instance_;
constexpr ImportVirtualNetworkRouter::ImportVirtualNetworkRouter(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : virtualnetworkrouters_(){}
struct ImportVirtualNetworkRouterDefaultTypeInternal {
  constexpr ImportVirtualNetworkRouterDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ImportVirtualNetworkRouterDefaultTypeInternal() {}
  union {
    ImportVirtualNetworkRouter _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ImportVirtualNetworkRouterDefaultTypeInternal _ImportVirtualNetworkRouter_default_instance_;
constexpr InstanceIP::InstanceIP(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : metadata_(nullptr)
  , spec_(nullptr)
  , status_(nullptr){}
struct InstanceIPDefaultTypeInternal {
  constexpr InstanceIPDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~InstanceIPDefaultTypeInternal() {}
  union {
    InstanceIP _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT InstanceIPDefaultTypeInternal _InstanceIP_default_instance_;
constexpr InstanceIPList::InstanceIPList(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : items_()
  , metadata_(nullptr){}
struct InstanceIPListDefaultTypeInternal {
  constexpr InstanceIPListDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~InstanceIPListDefaultTypeInternal() {}
  union {
    InstanceIPList _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT InstanceIPListDefaultTypeInternal _InstanceIPList_default_instance_;
constexpr InstanceIPSpec::InstanceIPSpec(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : virtualmachineinterfacereferences_()
  , iprangekeys_()
  , instanceipaddress_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , instanceipfamily_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , cidr_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , commonspec_(nullptr)
  , virtualnetworkreference_(nullptr){}
struct InstanceIPSpecDefaultTypeInternal {
  constexpr InstanceIPSpecDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~InstanceIPSpecDefaultTypeInternal() {}
  union {
    InstanceIPSpec _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT InstanceIPSpecDefaultTypeInternal _InstanceIPSpec_default_instance_;
constexpr InstanceIPStatus::InstanceIPStatus(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : commonstatus_(nullptr)
  , subnetreference_(nullptr){}
struct InstanceIPStatusDefaultTypeInternal {
  constexpr InstanceIPStatusDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~InstanceIPStatusDefaultTypeInternal() {}
  union {
    InstanceIPStatus _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT InstanceIPStatusDefaultTypeInternal _InstanceIPStatus_default_instance_;
constexpr LinklocalServiceEntryType::LinklocalServiceEntryType(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : ipfabricserviceip_()
  , ipfabricdnsservicename_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , linklocalserviceip_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , linklocalservicename_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , ipfabricserviceport_(0)
  , linklocalserviceport_(0){}
struct LinklocalServiceEntryTypeDefaultTypeInternal {
  constexpr LinklocalServiceEntryTypeDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~LinklocalServiceEntryTypeDefaultTypeInternal() {}
  union {
    LinklocalServiceEntryType _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT LinklocalServiceEntryTypeDefaultTypeInternal _LinklocalServiceEntryType_default_instance_;
constexpr LinklocalServices::LinklocalServices(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : linklocalserviceentry_(){}
struct LinklocalServicesDefaultTypeInternal {
  constexpr LinklocalServicesDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~LinklocalServicesDefaultTypeInternal() {}
  union {
    LinklocalServices _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT LinklocalServicesDefaultTypeInternal _LinklocalServices_default_instance_;
constexpr MACAddresses::MACAddresses(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : macaddress_(){}
struct MACAddressesDefaultTypeInternal {
  constexpr MACAddressesDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~MACAddressesDefaultTypeInternal() {}
  union {
    MACAddresses _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT MACAddressesDefaultTypeInternal _MACAddresses_default_instance_;
constexpr PolicyBasedForwardingRule::PolicyBasedForwardingRule(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : direction_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct PolicyBasedForwardingRuleDefaultTypeInternal {
  constexpr PolicyBasedForwardingRuleDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PolicyBasedForwardingRuleDefaultTypeInternal() {}
  union {
    PolicyBasedForwardingRule _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PolicyBasedForwardingRuleDefaultTypeInternal _PolicyBasedForwardingRule_default_instance_;
constexpr PortRange::PortRange(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : startport_(0)
  , endport_(0){}
struct PortRangeDefaultTypeInternal {
  constexpr PortRangeDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PortRangeDefaultTypeInternal() {}
  union {
    PortRange _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PortRangeDefaultTypeInternal _PortRange_default_instance_;
constexpr PortTranslationPool::PortTranslationPool(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : protocol_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , portrange_(nullptr)
  , portcount_(0){}
struct PortTranslationPoolDefaultTypeInternal {
  constexpr PortTranslationPoolDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PortTranslationPoolDefaultTypeInternal() {}
  union {
    PortTranslationPool _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PortTranslationPoolDefaultTypeInternal _PortTranslationPool_default_instance_;
constexpr PortTranslationPools::PortTranslationPools(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : pools_(){}
struct PortTranslationPoolsDefaultTypeInternal {
  constexpr PortTranslationPoolsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PortTranslationPoolsDefaultTypeInternal() {}
  union {
    PortTranslationPools _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PortTranslationPoolsDefaultTypeInternal _PortTranslationPools_default_instance_;
constexpr PortType::PortType(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : startport_(int64_t{0})
  , endport_(int64_t{0}){}
struct PortTypeDefaultTypeInternal {
  constexpr PortTypeDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PortTypeDefaultTypeInternal() {}
  union {
    PortType _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PortTypeDefaultTypeInternal _PortType_default_instance_;
constexpr Range::Range(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : ipranges_()
  , key_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct RangeDefaultTypeInternal {
  constexpr RangeDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~RangeDefaultTypeInternal() {}
  union {
    Range _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT RangeDefaultTypeInternal _Range_default_instance_;
constexpr ReconcilerState::ReconcilerState(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : state_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , observation_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct ReconcilerStateDefaultTypeInternal {
  constexpr ReconcilerStateDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ReconcilerStateDefaultTypeInternal() {}
  union {
    ReconcilerState _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ReconcilerStateDefaultTypeInternal _ReconcilerState_default_instance_;
constexpr ResourceReference::ResourceReference(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : objectreference_(nullptr)
  , contrailfqname_(nullptr){}
struct ResourceReferenceDefaultTypeInternal {
  constexpr ResourceReferenceDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ResourceReferenceDefaultTypeInternal() {}
  union {
    ResourceReference _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ResourceReferenceDefaultTypeInternal _ResourceReference_default_instance_;
constexpr RouteOriginOverride::RouteOriginOverride(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : origin_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , originoverride_(false){}
struct RouteOriginOverrideDefaultTypeInternal {
  constexpr RouteOriginOverrideDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~RouteOriginOverrideDefaultTypeInternal() {}
  union {
    RouteOriginOverride _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT RouteOriginOverrideDefaultTypeInternal _RouteOriginOverride_default_instance_;
constexpr RouteTarget::RouteTarget(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : metadata_(nullptr)
  , spec_(nullptr)
  , status_(nullptr){}
struct RouteTargetDefaultTypeInternal {
  constexpr RouteTargetDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~RouteTargetDefaultTypeInternal() {}
  union {
    RouteTarget _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT RouteTargetDefaultTypeInternal _RouteTarget_default_instance_;
constexpr RouteTargetList::RouteTargetList(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : items_()
  , metadata_(nullptr){}
struct RouteTargetListDefaultTypeInternal {
  constexpr RouteTargetListDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~RouteTargetListDefaultTypeInternal() {}
  union {
    RouteTargetList _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT RouteTargetListDefaultTypeInternal _RouteTargetList_default_instance_;
constexpr RouteTargetReference::RouteTargetReference(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : resourcereference_(nullptr)
  , attributes_(nullptr){}
struct RouteTargetReferenceDefaultTypeInternal {
  constexpr RouteTargetReferenceDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~RouteTargetReferenceDefaultTypeInternal() {}
  union {
    RouteTargetReference _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT RouteTargetReferenceDefaultTypeInternal _RouteTargetReference_default_instance_;
constexpr RouteTargetReferenceAttributes::RouteTargetReferenceAttributes(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : importexport_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct RouteTargetReferenceAttributesDefaultTypeInternal {
  constexpr RouteTargetReferenceAttributesDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~RouteTargetReferenceAttributesDefaultTypeInternal() {}
  union {
    RouteTargetReferenceAttributes _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT RouteTargetReferenceAttributesDefaultTypeInternal _RouteTargetReferenceAttributes_default_instance_;
constexpr RouteTargetSpec::RouteTargetSpec(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : commonspec_(nullptr){}
struct RouteTargetSpecDefaultTypeInternal {
  constexpr RouteTargetSpecDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~RouteTargetSpecDefaultTypeInternal() {}
  union {
    RouteTargetSpec _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT RouteTargetSpecDefaultTypeInternal _RouteTargetSpec_default_instance_;
constexpr RouteTargetStatus::RouteTargetStatus(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : commonstatus_(nullptr){}
struct RouteTargetStatusDefaultTypeInternal {
  constexpr RouteTargetStatusDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~RouteTargetStatusDefaultTypeInternal() {}
  union {
    RouteTargetStatus _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT RouteTargetStatusDefaultTypeInternal _RouteTargetStatus_default_instance_;
constexpr RoutingInstance::RoutingInstance(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : metadata_(nullptr)
  , spec_(nullptr)
  , status_(nullptr){}
struct RoutingInstanceDefaultTypeInternal {
  constexpr RoutingInstanceDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~RoutingInstanceDefaultTypeInternal() {}
  union {
    RoutingInstance _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT RoutingInstanceDefaultTypeInternal _RoutingInstance_default_instance_;
constexpr RoutingInstanceList::RoutingInstanceList(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : items_()
  , metadata_(nullptr){}
struct RoutingInstanceListDefaultTypeInternal {
  constexpr RoutingInstanceListDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~RoutingInstanceListDefaultTypeInternal() {}
  union {
    RoutingInstanceList _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT RoutingInstanceListDefaultTypeInternal _RoutingInstanceList_default_instance_;
constexpr RoutingInstanceReference::RoutingInstanceReference(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : resourcereference_(nullptr)
  , attributes_(nullptr){}
struct RoutingInstanceReferenceDefaultTypeInternal {
  constexpr RoutingInstanceReferenceDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~RoutingInstanceReferenceDefaultTypeInternal() {}
  union {
    RoutingInstanceReference _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT RoutingInstanceReferenceDefaultTypeInternal _RoutingInstanceReference_default_instance_;
constexpr RoutingInstanceSpec::RoutingInstanceSpec(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : routetargetreferences_()
  , commonspec_(nullptr)
  , parent_(nullptr){}
struct RoutingInstanceSpecDefaultTypeInternal {
  constexpr RoutingInstanceSpecDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~RoutingInstanceSpecDefaultTypeInternal() {}
  union {
    RoutingInstanceSpec _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT RoutingInstanceSpecDefaultTypeInternal _RoutingInstanceSpec_default_instance_;
constexpr RoutingInstanceStatus_VirtualNetworkRouterRouteTargetReferencesEntry_DoNotUse::RoutingInstanceStatus_VirtualNetworkRouterRouteTargetReferencesEntry_DoNotUse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct RoutingInstanceStatus_VirtualNetworkRouterRouteTargetReferencesEntry_DoNotUseDefaultTypeInternal {
  constexpr RoutingInstanceStatus_VirtualNetworkRouterRouteTargetReferencesEntry_DoNotUseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~RoutingInstanceStatus_VirtualNetworkRouterRouteTargetReferencesEntry_DoNotUseDefaultTypeInternal() {}
  union {
    RoutingInstanceStatus_VirtualNetworkRouterRouteTargetReferencesEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT RoutingInstanceStatus_VirtualNetworkRouterRouteTargetReferencesEntry_DoNotUseDefaultTypeInternal _RoutingInstanceStatus_VirtualNetworkRouterRouteTargetReferencesEntry_DoNotUse_default_instance_;
constexpr RoutingInstanceStatus::RoutingInstanceStatus(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : virtualnetworkrouterroutetargetreferences_(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{})
  , commonstatus_(nullptr)
  , defaultroutetargetreference_(nullptr)
  , isdefault_(false)
  , routinginstancefabricsnat_(false){}
struct RoutingInstanceStatusDefaultTypeInternal {
  constexpr RoutingInstanceStatusDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~RoutingInstanceStatusDefaultTypeInternal() {}
  union {
    RoutingInstanceStatus _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT RoutingInstanceStatusDefaultTypeInternal _RoutingInstanceStatus_default_instance_;
constexpr Subnet::Subnet(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : metadata_(nullptr)
  , spec_(nullptr)
  , status_(nullptr){}
struct SubnetDefaultTypeInternal {
  constexpr SubnetDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SubnetDefaultTypeInternal() {}
  union {
    Subnet _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SubnetDefaultTypeInternal _Subnet_default_instance_;
constexpr SubnetList::SubnetList(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : items_()
  , metadata_(nullptr){}
struct SubnetListDefaultTypeInternal {
  constexpr SubnetListDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SubnetListDefaultTypeInternal() {}
  union {
    SubnetList _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SubnetListDefaultTypeInternal _SubnetList_default_instance_;
constexpr SubnetReference::SubnetReference(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : resourcereference_(nullptr)
  , attributes_(nullptr){}
struct SubnetReferenceDefaultTypeInternal {
  constexpr SubnetReferenceDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SubnetReferenceDefaultTypeInternal() {}
  union {
    SubnetReference _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SubnetReferenceDefaultTypeInternal _SubnetReference_default_instance_;
constexpr SubnetSpec::SubnetSpec(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : dnsnameservers_()
  , ranges_()
  , cidr_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , defaultgateway_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , bgpaasprimaryip_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , bgpaassecondaryip_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , commonspec_(nullptr)
  , disablebgpaasipautoallocation_(false){}
struct SubnetSpecDefaultTypeInternal {
  constexpr SubnetSpecDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SubnetSpecDefaultTypeInternal() {}
  union {
    SubnetSpec _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SubnetSpecDefaultTypeInternal _SubnetSpec_default_instance_;
constexpr SubnetStatus::SubnetStatus(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : allocationusage_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , commonstatus_(nullptr)
  , ipcount_(int64_t{0}){}
struct SubnetStatusDefaultTypeInternal {
  constexpr SubnetStatusDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SubnetStatusDefaultTypeInternal() {}
  union {
    SubnetStatus _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SubnetStatusDefaultTypeInternal _SubnetStatus_default_instance_;
constexpr Tag::Tag(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : metadata_(nullptr)
  , spec_(nullptr)
  , status_(nullptr){}
struct TagDefaultTypeInternal {
  constexpr TagDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TagDefaultTypeInternal() {}
  union {
    Tag _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TagDefaultTypeInternal _Tag_default_instance_;
constexpr TagList::TagList(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : items_()
  , metadata_(nullptr){}
struct TagListDefaultTypeInternal {
  constexpr TagListDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TagListDefaultTypeInternal() {}
  union {
    TagList _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TagListDefaultTypeInternal _TagList_default_instance_;
constexpr TagSpec::TagSpec(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : tagtypename_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , tagvalue_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , commonspec_(nullptr)
  , tagtypereference_(nullptr){}
struct TagSpecDefaultTypeInternal {
  constexpr TagSpecDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TagSpecDefaultTypeInternal() {}
  union {
    TagSpec _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TagSpecDefaultTypeInternal _TagSpec_default_instance_;
constexpr TagStatus::TagStatus(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : tagid_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , commonstatus_(nullptr){}
struct TagStatusDefaultTypeInternal {
  constexpr TagStatusDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TagStatusDefaultTypeInternal() {}
  union {
    TagStatus _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TagStatusDefaultTypeInternal _TagStatus_default_instance_;
constexpr TagType::TagType(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : metadata_(nullptr)
  , spec_(nullptr)
  , status_(nullptr){}
struct TagTypeDefaultTypeInternal {
  constexpr TagTypeDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TagTypeDefaultTypeInternal() {}
  union {
    TagType _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TagTypeDefaultTypeInternal _TagType_default_instance_;
constexpr TagTypeList::TagTypeList(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : items_()
  , metadata_(nullptr){}
struct TagTypeListDefaultTypeInternal {
  constexpr TagTypeListDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TagTypeListDefaultTypeInternal() {}
  union {
    TagTypeList _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TagTypeListDefaultTypeInternal _TagTypeList_default_instance_;
constexpr TagTypeSpec::TagTypeSpec(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : commonspec_(nullptr){}
struct TagTypeSpecDefaultTypeInternal {
  constexpr TagTypeSpecDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TagTypeSpecDefaultTypeInternal() {}
  union {
    TagTypeSpec _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TagTypeSpecDefaultTypeInternal _TagTypeSpec_default_instance_;
constexpr TagTypeStatus::TagTypeStatus(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : tagtypeid_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , commonstatus_(nullptr){}
struct TagTypeStatusDefaultTypeInternal {
  constexpr TagTypeStatusDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TagTypeStatusDefaultTypeInternal() {}
  union {
    TagTypeStatus _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TagTypeStatusDefaultTypeInternal _TagTypeStatus_default_instance_;
constexpr VirtualMachine::VirtualMachine(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : metadata_(nullptr)
  , spec_(nullptr)
  , status_(nullptr){}
struct VirtualMachineDefaultTypeInternal {
  constexpr VirtualMachineDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~VirtualMachineDefaultTypeInternal() {}
  union {
    VirtualMachine _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT VirtualMachineDefaultTypeInternal _VirtualMachine_default_instance_;
constexpr VirtualMachineInterface::VirtualMachineInterface(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : metadata_(nullptr)
  , spec_(nullptr)
  , status_(nullptr){}
struct VirtualMachineInterfaceDefaultTypeInternal {
  constexpr VirtualMachineInterfaceDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~VirtualMachineInterfaceDefaultTypeInternal() {}
  union {
    VirtualMachineInterface _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT VirtualMachineInterfaceDefaultTypeInternal _VirtualMachineInterface_default_instance_;
constexpr VirtualMachineInterfaceList::VirtualMachineInterfaceList(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : items_()
  , metadata_(nullptr){}
struct VirtualMachineInterfaceListDefaultTypeInternal {
  constexpr VirtualMachineInterfaceListDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~VirtualMachineInterfaceListDefaultTypeInternal() {}
  union {
    VirtualMachineInterfaceList _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT VirtualMachineInterfaceListDefaultTypeInternal _VirtualMachineInterfaceList_default_instance_;
constexpr VirtualMachineInterfaceProperties::VirtualMachineInterfaceProperties(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : subinterfacevlantag_(0u){}
struct VirtualMachineInterfacePropertiesDefaultTypeInternal {
  constexpr VirtualMachineInterfacePropertiesDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~VirtualMachineInterfacePropertiesDefaultTypeInternal() {}
  union {
    VirtualMachineInterfaceProperties _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT VirtualMachineInterfacePropertiesDefaultTypeInternal _VirtualMachineInterfaceProperties_default_instance_;
constexpr VirtualMachineInterfaceSpec::VirtualMachineInterfaceSpec(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : virtualmachinereferences_()
  , virtualmachineinterfacereferences_()
  , tagreferences_()
  , commonspec_(nullptr)
  , parent_(nullptr)
  , virtualmachineinterfacemacaddresses_(nullptr)
  , virtualnetworkreference_(nullptr)
  , allowedaddresspairs_(nullptr)
  , properties_(nullptr)
  , virtualmachineinterfacedisablepolicy_(false)
  , portsecurityenabled_(false){}
struct VirtualMachineInterfaceSpecDefaultTypeInternal {
  constexpr VirtualMachineInterfaceSpecDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~VirtualMachineInterfaceSpecDefaultTypeInternal() {}
  union {
    VirtualMachineInterfaceSpec _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT VirtualMachineInterfaceSpecDefaultTypeInternal _VirtualMachineInterfaceSpec_default_instance_;
constexpr VirtualMachineInterfaceStatus::VirtualMachineInterfaceStatus(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : routinginstancereferences_()
  , commonstatus_(nullptr)
  , bgprouterreference_(nullptr){}
struct VirtualMachineInterfaceStatusDefaultTypeInternal {
  constexpr VirtualMachineInterfaceStatusDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~VirtualMachineInterfaceStatusDefaultTypeInternal() {}
  union {
    VirtualMachineInterfaceStatus _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT VirtualMachineInterfaceStatusDefaultTypeInternal _VirtualMachineInterfaceStatus_default_instance_;
constexpr VirtualMachineList::VirtualMachineList(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : items_()
  , metadata_(nullptr){}
struct VirtualMachineListDefaultTypeInternal {
  constexpr VirtualMachineListDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~VirtualMachineListDefaultTypeInternal() {}
  union {
    VirtualMachineList _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT VirtualMachineListDefaultTypeInternal _VirtualMachineList_default_instance_;
constexpr VirtualMachineSpec::VirtualMachineSpec(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : servertype_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , servername_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , servernamespace_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , serverclustername_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , commonspec_(nullptr){}
struct VirtualMachineSpecDefaultTypeInternal {
  constexpr VirtualMachineSpecDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~VirtualMachineSpecDefaultTypeInternal() {}
  union {
    VirtualMachineSpec _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT VirtualMachineSpecDefaultTypeInternal _VirtualMachineSpec_default_instance_;
constexpr VirtualMachineStatus::VirtualMachineStatus(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : commonstatus_(nullptr){}
struct VirtualMachineStatusDefaultTypeInternal {
  constexpr VirtualMachineStatusDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~VirtualMachineStatusDefaultTypeInternal() {}
  union {
    VirtualMachineStatus _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT VirtualMachineStatusDefaultTypeInternal _VirtualMachineStatus_default_instance_;
constexpr VirtualNetwork::VirtualNetwork(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : metadata_(nullptr)
  , spec_(nullptr)
  , status_(nullptr){}
struct VirtualNetworkDefaultTypeInternal {
  constexpr VirtualNetworkDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~VirtualNetworkDefaultTypeInternal() {}
  union {
    VirtualNetwork _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT VirtualNetworkDefaultTypeInternal _VirtualNetwork_default_instance_;
constexpr VirtualNetworkList::VirtualNetworkList(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : items_()
  , metadata_(nullptr){}
struct VirtualNetworkListDefaultTypeInternal {
  constexpr VirtualNetworkListDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~VirtualNetworkListDefaultTypeInternal() {}
  union {
    VirtualNetworkList _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT VirtualNetworkListDefaultTypeInternal _VirtualNetworkList_default_instance_;
constexpr VirtualNetworkRouteTargetReferenceList::VirtualNetworkRouteTargetReferenceList(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : routetargetreferences_(){}
struct VirtualNetworkRouteTargetReferenceListDefaultTypeInternal {
  constexpr VirtualNetworkRouteTargetReferenceListDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~VirtualNetworkRouteTargetReferenceListDefaultTypeInternal() {}
  union {
    VirtualNetworkRouteTargetReferenceList _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT VirtualNetworkRouteTargetReferenceListDefaultTypeInternal _VirtualNetworkRouteTargetReferenceList_default_instance_;
constexpr VirtualNetworkRouter::VirtualNetworkRouter(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : metadata_(nullptr)
  , spec_(nullptr)
  , status_(nullptr){}
struct VirtualNetworkRouterDefaultTypeInternal {
  constexpr VirtualNetworkRouterDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~VirtualNetworkRouterDefaultTypeInternal() {}
  union {
    VirtualNetworkRouter _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT VirtualNetworkRouterDefaultTypeInternal _VirtualNetworkRouter_default_instance_;
constexpr VirtualNetworkRouterEntry::VirtualNetworkRouterEntry(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : virtualnetworkrouterselector_(nullptr)
  , namespaceselector_(nullptr){}
struct VirtualNetworkRouterEntryDefaultTypeInternal {
  constexpr VirtualNetworkRouterEntryDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~VirtualNetworkRouterEntryDefaultTypeInternal() {}
  union {
    VirtualNetworkRouterEntry _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT VirtualNetworkRouterEntryDefaultTypeInternal _VirtualNetworkRouterEntry_default_instance_;
constexpr VirtualNetworkRouterList::VirtualNetworkRouterList(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : items_()
  , metadata_(nullptr){}
struct VirtualNetworkRouterListDefaultTypeInternal {
  constexpr VirtualNetworkRouterListDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~VirtualNetworkRouterListDefaultTypeInternal() {}
  union {
    VirtualNetworkRouterList _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT VirtualNetworkRouterListDefaultTypeInternal _VirtualNetworkRouterList_default_instance_;
constexpr VirtualNetworkRouterSpec::VirtualNetworkRouterSpec(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : type_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , commonspec_(nullptr)
  , virtualnetworkselector_(nullptr)
  , import_(nullptr){}
struct VirtualNetworkRouterSpecDefaultTypeInternal {
  constexpr VirtualNetworkRouterSpecDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~VirtualNetworkRouterSpecDefaultTypeInternal() {}
  union {
    VirtualNetworkRouterSpec _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT VirtualNetworkRouterSpecDefaultTypeInternal _VirtualNetworkRouterSpec_default_instance_;
constexpr VirtualNetworkRouterStatus::VirtualNetworkRouterStatus(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : commonstatus_(nullptr){}
struct VirtualNetworkRouterStatusDefaultTypeInternal {
  constexpr VirtualNetworkRouterStatusDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~VirtualNetworkRouterStatusDefaultTypeInternal() {}
  union {
    VirtualNetworkRouterStatus _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT VirtualNetworkRouterStatusDefaultTypeInternal _VirtualNetworkRouterStatus_default_instance_;
constexpr VirtualNetworkSpec::VirtualNetworkSpec(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : routetargetlist_()
  , importroutetargetlist_()
  , exportroutetargetlist_()
  , commonspec_(nullptr)
  , v4subnetreference_(nullptr)
  , v6subnetreference_(nullptr)
  , virtualnetworkproperties_(nullptr)
  , providernetworkreference_(nullptr)
  , fabricsnat_(false)
  , isprovidernetwork_(false)
  , fabricforwarding_(false){}
struct VirtualNetworkSpecDefaultTypeInternal {
  constexpr VirtualNetworkSpecDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~VirtualNetworkSpecDefaultTypeInternal() {}
  union {
    VirtualNetworkSpec _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT VirtualNetworkSpecDefaultTypeInternal _VirtualNetworkSpec_default_instance_;
constexpr VirtualNetworkStatus::VirtualNetworkStatus(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : commonstatus_(nullptr)
  , virtualnetworknetworkid_(int64_t{0}){}
struct VirtualNetworkStatusDefaultTypeInternal {
  constexpr VirtualNetworkStatusDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~VirtualNetworkStatusDefaultTypeInternal() {}
  union {
    VirtualNetworkStatus _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT VirtualNetworkStatusDefaultTypeInternal _VirtualNetworkStatus_default_instance_;
constexpr VirtualNetworkType::VirtualNetworkType(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : rpf_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , forwardingmode_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct VirtualNetworkTypeDefaultTypeInternal {
  constexpr VirtualNetworkTypeDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~VirtualNetworkTypeDefaultTypeInternal() {}
  union {
    VirtualNetworkType _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT VirtualNetworkTypeDefaultTypeInternal _VirtualNetworkType_default_instance_;
constexpr VirtualRouter::VirtualRouter(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : metadata_(nullptr)
  , spec_(nullptr)
  , status_(nullptr){}
struct VirtualRouterDefaultTypeInternal {
  constexpr VirtualRouterDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~VirtualRouterDefaultTypeInternal() {}
  union {
    VirtualRouter _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT VirtualRouterDefaultTypeInternal _VirtualRouter_default_instance_;
constexpr VirtualRouterList::VirtualRouterList(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : items_()
  , metadata_(nullptr){}
struct VirtualRouterListDefaultTypeInternal {
  constexpr VirtualRouterListDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~VirtualRouterListDefaultTypeInternal() {}
  union {
    VirtualRouterList _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT VirtualRouterListDefaultTypeInternal _VirtualRouterList_default_instance_;
constexpr VirtualRouterSpec::VirtualRouterSpec(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : virtualmachinereferences_()
  , virtualrouteripaddress_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , virtualroutertype_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , commonspec_(nullptr)
  , parent_(nullptr)
  , virtualrouterdpdkenabled_(false){}
struct VirtualRouterSpecDefaultTypeInternal {
  constexpr VirtualRouterSpecDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~VirtualRouterSpecDefaultTypeInternal() {}
  union {
    VirtualRouterSpec _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT VirtualRouterSpecDefaultTypeInternal _VirtualRouterSpec_default_instance_;
constexpr VirtualRouterStatus::VirtualRouterStatus(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : commonstatus_(nullptr){}
struct VirtualRouterStatusDefaultTypeInternal {
  constexpr VirtualRouterStatusDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~VirtualRouterStatusDefaultTypeInternal() {}
  union {
    VirtualRouterStatus _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT VirtualRouterStatusDefaultTypeInternal _VirtualRouterStatus_default_instance_;
}  // namespace v1alpha1
}  // namespace core
}  // namespace apis
}  // namespace pkg
}  // namespace contrail
}  // namespace cn2
}  // namespace contrail
}  // namespace net
}  // namespace juniper
}  // namespace ssd_git
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_ssd_2dgit_2ejuniper_2enet_2fcontrail_2fcn2_2fcontrail_2fpkg_2fapis_2fcore_2fv1alpha1_2fgenerated_2eproto[132];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_ssd_2dgit_2ejuniper_2enet_2fcontrail_2fcn2_2fcontrail_2fpkg_2fapis_2fcore_2fv1alpha1_2fgenerated_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_ssd_2dgit_2ejuniper_2enet_2fcontrail_2fcn2_2fcontrail_2fpkg_2fapis_2fcore_2fv1alpha1_2fgenerated_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_ssd_2dgit_2ejuniper_2enet_2fcontrail_2fcn2_2fcontrail_2fpkg_2fapis_2fcore_2fv1alpha1_2fgenerated_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::APSAttribute, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::APSAttribute, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::APSAttribute, sequence_),
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::AddressFamilies, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::AddressFamilies, family_),
  PROTOBUF_FIELD_OFFSET(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::AddressGroup, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::AddressGroup, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::AddressGroup, metadata_),
  PROTOBUF_FIELD_OFFSET(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::AddressGroup, spec_),
  PROTOBUF_FIELD_OFFSET(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::AddressGroup, status_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::AddressGroupList, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::AddressGroupList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::AddressGroupList, metadata_),
  PROTOBUF_FIELD_OFFSET(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::AddressGroupList, items_),
  0,
  ~0u,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::AddressGroupPrefix, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::AddressGroupPrefix, subnet_),
  PROTOBUF_FIELD_OFFSET(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::AddressGroupSpec, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::AddressGroupSpec, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::AddressGroupSpec, commonspec_),
  PROTOBUF_FIELD_OFFSET(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::AddressGroupSpec, addressgroupprefixes_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::AddressGroupStatus, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::AddressGroupStatus, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::AddressGroupStatus, commonstatus_),
  0,
  PROTOBUF_FIELD_OFFSET(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::AllowedAddressPair, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::AllowedAddressPair, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::AllowedAddressPair, ip_),
  PROTOBUF_FIELD_OFFSET(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::AllowedAddressPair, mac_),
  PROTOBUF_FIELD_OFFSET(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::AllowedAddressPair, addressmode_),
  2,
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::AllowedAddressPairSubnet, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::AllowedAddressPairSubnet, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::AllowedAddressPairSubnet, ipprefix_),
  PROTOBUF_FIELD_OFFSET(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::AllowedAddressPairSubnet, ipprefixlen_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::AllowedAddressPairs, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::AllowedAddressPairs, allowedaddresspair_),
  PROTOBUF_FIELD_OFFSET(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::ApplicationPolicySet, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::ApplicationPolicySet, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::ApplicationPolicySet, metadata_),
  PROTOBUF_FIELD_OFFSET(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::ApplicationPolicySet, spec_),
  PROTOBUF_FIELD_OFFSET(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::ApplicationPolicySet, status_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::ApplicationPolicySetList, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::ApplicationPolicySetList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::ApplicationPolicySetList, metadata_),
  PROTOBUF_FIELD_OFFSET(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::ApplicationPolicySetList, items_),
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::ApplicationPolicySetSpec, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::ApplicationPolicySetSpec, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::ApplicationPolicySetSpec, commonspec_),
  PROTOBUF_FIELD_OFFSET(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::ApplicationPolicySetSpec, firewallpolicyreferences_),
  PROTOBUF_FIELD_OFFSET(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::ApplicationPolicySetSpec, tagreferences_),
  0,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::ApplicationPolicySetStatus, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::ApplicationPolicySetStatus, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::ApplicationPolicySetStatus, commonstatus_),
  PROTOBUF_FIELD_OFFSET(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::ApplicationPolicySetStatus, allapplications_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::AuthenticationData, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::AuthenticationData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::AuthenticationData, keytype_),
  PROTOBUF_FIELD_OFFSET(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::AuthenticationData, keyitems_),
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::AuthenticationKeyItem, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::AuthenticationKeyItem, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::AuthenticationKeyItem, keyid_),
  PROTOBUF_FIELD_OFFSET(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::AuthenticationKeyItem, key_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::BGPAsAService, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::BGPAsAService, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::BGPAsAService, metadata_),
  PROTOBUF_FIELD_OFFSET(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::BGPAsAService, spec_),
  PROTOBUF_FIELD_OFFSET(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::BGPAsAService, status_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::BGPAsAServiceList, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::BGPAsAServiceList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::BGPAsAServiceList, metadata_),
  PROTOBUF_FIELD_OFFSET(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::BGPAsAServiceList, items_),
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::BGPAsAServiceSpec, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::BGPAsAServiceSpec, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::BGPAsAServiceSpec, commonspec_),
  PROTOBUF_FIELD_OFFSET(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::BGPAsAServiceSpec, shared_),
  PROTOBUF_FIELD_OFFSET(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::BGPAsAServiceSpec, ipaddress_),
  PROTOBUF_FIELD_OFFSET(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::BGPAsAServiceSpec, autonomoussystem_),
  PROTOBUF_FIELD_OFFSET(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::BGPAsAServiceSpec, suppressrouteadvertisement_),
  PROTOBUF_FIELD_OFFSET(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::BGPAsAServiceSpec, ipv4mappedipv6nexthop_),
  PROTOBUF_FIELD_OFFSET(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::BGPAsAServiceSpec, bgpasaservicesessionattributes_),
  PROTOBUF_FIELD_OFFSET(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::BGPAsAServiceSpec, virtualmachineinterfacereferences_),
  PROTOBUF_FIELD_OFFSET(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::BGPAsAServiceSpec, virtualmachineinterfacesselector_),
  1,
  4,
  0,
  3,
  5,
  6,
  2,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::BGPAsAServiceStatus, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::BGPAsAServiceStatus, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::BGPAsAServiceStatus, commonstatus_),
  PROTOBUF_FIELD_OFFSET(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::BGPAsAServiceStatus, bgprouterreferences_),
  PROTOBUF_FIELD_OFFSET(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::BGPAsAServiceStatus, subnetreferences_),
  0,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::BGPFamilyAttributes, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::BGPFamilyAttributes, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::BGPFamilyAttributes, addressfamily_),
  PROTOBUF_FIELD_OFFSET(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::BGPFamilyAttributes, loopcount_),
  PROTOBUF_FIELD_OFFSET(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::BGPFamilyAttributes, prefixlimit_),
  PROTOBUF_FIELD_OFFSET(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::BGPFamilyAttributes, defaulttunnelencap_),
  0,
  2,
  1,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::BGPPrefixLimit, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::BGPPrefixLimit, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::BGPPrefixLimit, idletimeout_),
  PROTOBUF_FIELD_OFFSET(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::BGPPrefixLimit, maximum_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::BGPRouter, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::BGPRouter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::BGPRouter, metadata_),
  PROTOBUF_FIELD_OFFSET(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::BGPRouter, spec_),
  PROTOBUF_FIELD_OFFSET(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::BGPRouter, status_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::BGPRouterList, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::BGPRouterList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::BGPRouterList, metadata_),
  PROTOBUF_FIELD_OFFSET(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::BGPRouterList, items_),
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::BGPRouterParameters, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::BGPRouterParameters, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::BGPRouterParameters, admindown_),
  PROTOBUF_FIELD_OFFSET(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::BGPRouterParameters, vendor_),
  PROTOBUF_FIELD_OFFSET(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::BGPRouterParameters, clusterid_),
  PROTOBUF_FIELD_OFFSET(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::BGPRouterParameters, autonomoussystem_),
  PROTOBUF_FIELD_OFFSET(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::BGPRouterParameters, identifier_),
  PROTOBUF_FIELD_OFFSET(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::BGPRouterParameters, address_),
  PROTOBUF_FIELD_OFFSET(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::BGPRouterParameters, port_),
  PROTOBUF_FIELD_OFFSET(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::BGPRouterParameters, sourceport_),
  PROTOBUF_FIELD_OFFSET(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::BGPRouterParameters, holdtime_),
  PROTOBUF_FIELD_OFFSET(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::BGPRouterParameters, addressfamilies_),
  PROTOBUF_FIELD_OFFSET(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::BGPRouterParameters, authdata_),
  PROTOBUF_FIELD_OFFSET(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::BGPRouterParameters, localautonomoussystem_),
  PROTOBUF_FIELD_OFFSET(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::BGPRouterParameters, routertype_),
  PROTOBUF_FIELD_OFFSET(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::BGPRouterParameters, gatewayaddress_),
  PROTOBUF_FIELD_OFFSET(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::BGPRouterParameters, ipv6gatewayaddress_),
  8,
  0,
  10,
  9,
  1,
  2,
  11,
  12,
  13,
  6,
  7,
  14,
  3,
  4,
  5,
  PROTOBUF_FIELD_OFFSET(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::BGPRouterReference, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::BGPRouterReference, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::BGPRouterReference, resourcereference_),
  PROTOBUF_FIELD_OFFSET(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::BGPRouterReference, attributes_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::BGPRouterReferenceAttributes, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::BGPRouterReferenceAttributes, session_),
  PROTOBUF_FIELD_OFFSET(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::BGPRouterSpec, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::BGPRouterSpec, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::BGPRouterSpec, commonspec_),
  PROTOBUF_FIELD_OFFSET(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::BGPRouterSpec, parent_),
  PROTOBUF_FIELD_OFFSET(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::BGPRouterSpec, bgprouterreferences_),
  PROTOBUF_FIELD_OFFSET(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::BGPRouterSpec, bgprouterparameters_),
  0,
  1,
  ~0u,
  2,
  PROTOBUF_FIELD_OFFSET(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::BGPRouterStatus, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::BGPRouterStatus, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::BGPRouterStatus, commonstatus_),
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::BGPSession, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::BGPSession, sessionattributes_),
  PROTOBUF_FIELD_OFFSET(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::BGPSessionAttributes, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::BGPSessionAttributes, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::BGPSessionAttributes, bgprouter_),
  PROTOBUF_FIELD_OFFSET(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::BGPSessionAttributes, admindown_),
  PROTOBUF_FIELD_OFFSET(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::BGPSessionAttributes, passive_),
  PROTOBUF_FIELD_OFFSET(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::BGPSessionAttributes, asoverride_),
  PROTOBUF_FIELD_OFFSET(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::BGPSessionAttributes, holdtime_),
  PROTOBUF_FIELD_OFFSET(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::BGPSessionAttributes, loopcount_),
  PROTOBUF_FIELD_OFFSET(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::BGPSessionAttributes, localautonomoussystem_),
  PROTOBUF_FIELD_OFFSET(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::BGPSessionAttributes, addressfamilies_),
  PROTOBUF_FIELD_OFFSET(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::BGPSessionAttributes, authdata_),
  PROTOBUF_FIELD_OFFSET(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::BGPSessionAttributes, familyattributes_),
  PROTOBUF_FIELD_OFFSET(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::BGPSessionAttributes, privateasaction_),
  PROTOBUF_FIELD_OFFSET(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::BGPSessionAttributes, routeoriginoverride_),
  0,
  5,
  6,
  7,
  8,
  9,
  10,
  2,
  3,
  ~0u,
  1,
  4,
  PROTOBUF_FIELD_OFFSET(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::BGPSessionIPAttributes, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::BGPSessionIPAttributes, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::BGPSessionIPAttributes, bgpaasprimaryip_),
  PROTOBUF_FIELD_OFFSET(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::BGPSessionIPAttributes, bgpaassecondaryip_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::CommonSpec, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::CommonSpec, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::CommonSpec, contrailfqname_),
  0,
  PROTOBUF_FIELD_OFFSET(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::CommonStatus, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::CommonStatus, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::CommonStatus, reconcilerstate_),
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::ContrailFqName, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::ContrailFqName, fqname_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::EncapsulationPriorities, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::EncapsulationPriorities, encapsulation_),
  PROTOBUF_FIELD_OFFSET(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::FirewallActionListType, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::FirewallActionListType, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::FirewallActionListType, simpleaction_),
  0,
  PROTOBUF_FIELD_OFFSET(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::FirewallPolicy, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::FirewallPolicy, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::FirewallPolicy, metadata_),
  PROTOBUF_FIELD_OFFSET(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::FirewallPolicy, spec_),
  PROTOBUF_FIELD_OFFSET(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::FirewallPolicy, status_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::FirewallPolicyAttribute, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::FirewallPolicyAttribute, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::FirewallPolicyAttribute, sequence_),
  0,
  PROTOBUF_FIELD_OFFSET(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::FirewallPolicyList, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::FirewallPolicyList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::FirewallPolicyList, metadata_),
  PROTOBUF_FIELD_OFFSET(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::FirewallPolicyList, items_),
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::FirewallPolicyReference, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::FirewallPolicyReference, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::FirewallPolicyReference, resourcereference_),
  PROTOBUF_FIELD_OFFSET(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::FirewallPolicyReference, attributes_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::FirewallPolicySpec, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::FirewallPolicySpec, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::FirewallPolicySpec, commonspec_),
  PROTOBUF_FIELD_OFFSET(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::FirewallPolicySpec, firewallrule_),
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::FirewallPolicyStatus, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::FirewallPolicyStatus, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::FirewallPolicyStatus, commonstatus_),
  0,
  PROTOBUF_FIELD_OFFSET(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::FirewallRule, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::FirewallRule, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::FirewallRule, metadata_),
  PROTOBUF_FIELD_OFFSET(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::FirewallRule, spec_),
  PROTOBUF_FIELD_OFFSET(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::FirewallRule, status_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::FirewallRuleEndpointType, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::FirewallRuleEndpointType, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::FirewallRuleEndpointType, subnet_),
  PROTOBUF_FIELD_OFFSET(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::FirewallRuleEndpointType, addressgroup_),
  PROTOBUF_FIELD_OFFSET(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::FirewallRuleEndpointType, tags_),
  PROTOBUF_FIELD_OFFSET(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::FirewallRuleEndpointType, tagids_),
  PROTOBUF_FIELD_OFFSET(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::FirewallRuleEndpointType, any_),
  1,
  0,
  ~0u,
  ~0u,
  2,
  PROTOBUF_FIELD_OFFSET(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::FirewallRuleList, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::FirewallRuleList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::FirewallRuleList, metadata_),
  PROTOBUF_FIELD_OFFSET(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::FirewallRuleList, items_),
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::FirewallRuleReference, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::FirewallRuleReference, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::FirewallRuleReference, resourcereference_),
  PROTOBUF_FIELD_OFFSET(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::FirewallRuleReference, attributes_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::FirewallRuleSpec, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::FirewallRuleSpec, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::FirewallRuleSpec, commonspec_),
  PROTOBUF_FIELD_OFFSET(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::FirewallRuleSpec, addressgroupreference_),
  PROTOBUF_FIELD_OFFSET(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::FirewallRuleSpec, actionlist_),
  PROTOBUF_FIELD_OFFSET(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::FirewallRuleSpec, service_),
  PROTOBUF_FIELD_OFFSET(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::FirewallRuleSpec, endpoint1_),
  PROTOBUF_FIELD_OFFSET(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::FirewallRuleSpec, endpoint2_),
  PROTOBUF_FIELD_OFFSET(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::FirewallRuleSpec, matchtags_),
  PROTOBUF_FIELD_OFFSET(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::FirewallRuleSpec, matchtagstypes_),
  PROTOBUF_FIELD_OFFSET(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::FirewallRuleSpec, direction_),
  PROTOBUF_FIELD_OFFSET(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::FirewallRuleSpec, tagreferences_),
  1,
  2,
  3,
  4,
  5,
  6,
  ~0u,
  ~0u,
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::FirewallRuleStatus, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::FirewallRuleStatus, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::FirewallRuleStatus, commonstatus_),
  0,
  PROTOBUF_FIELD_OFFSET(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::FirewallServiceType, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::FirewallServiceType, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::FirewallServiceType, protocol_),
  PROTOBUF_FIELD_OFFSET(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::FirewallServiceType, protocolid_),
  PROTOBUF_FIELD_OFFSET(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::FirewallServiceType, sourceports_),
  PROTOBUF_FIELD_OFFSET(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::FirewallServiceType, destinationports_),
  0,
  3,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::FirewallSubnet, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::FirewallSubnet, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::FirewallSubnet, ipprefix_),
  PROTOBUF_FIELD_OFFSET(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::FirewallSubnet, ipprefixlen_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::FloatingIP, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::FloatingIP, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::FloatingIP, metadata_),
  PROTOBUF_FIELD_OFFSET(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::FloatingIP, spec_),
  PROTOBUF_FIELD_OFFSET(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::FloatingIP, status_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::FloatingIPList, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::FloatingIPList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::FloatingIPList, metadata_),
  PROTOBUF_FIELD_OFFSET(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::FloatingIPList, items_),
  0,
  ~0u,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::FloatingIPPortMappings, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::FloatingIPPortMappings, portmappings_),
  PROTOBUF_FIELD_OFFSET(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::FloatingIPPortPortMapping, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::FloatingIPPortPortMapping, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::FloatingIPPortPortMapping, srcport_),
  PROTOBUF_FIELD_OFFSET(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::FloatingIPPortPortMapping, dstport_),
  PROTOBUF_FIELD_OFFSET(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::FloatingIPPortPortMapping, protocol_),
  1,
  2,
  0,
  PROTOBUF_FIELD_OFFSET(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::FloatingIPSpec, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::FloatingIPSpec, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::FloatingIPSpec, commonspec_),
  PROTOBUF_FIELD_OFFSET(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::FloatingIPSpec, floatingipaddress_),
  PROTOBUF_FIELD_OFFSET(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::FloatingIPSpec, floatingipportmappings_),
  PROTOBUF_FIELD_OFFSET(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::FloatingIPSpec, floatingiptrafficdirection_),
  PROTOBUF_FIELD_OFFSET(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::FloatingIPSpec, parent_),
  PROTOBUF_FIELD_OFFSET(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::FloatingIPSpec, virtualmachineinterfacereferences_),
  PROTOBUF_FIELD_OFFSET(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::FloatingIPSpec, floatingipportmappingsenable_),
  2,
  0,
  3,
  1,
  4,
  ~0u,
  5,
  PROTOBUF_FIELD_OFFSET(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::FloatingIPStatus, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::FloatingIPStatus, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::FloatingIPStatus, commonstatus_),
  PROTOBUF_FIELD_OFFSET(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::FloatingIPStatus, subnetreference_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::GlobalSystemConfig, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::GlobalSystemConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::GlobalSystemConfig, metadata_),
  PROTOBUF_FIELD_OFFSET(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::GlobalSystemConfig, spec_),
  PROTOBUF_FIELD_OFFSET(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::GlobalSystemConfig, status_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::GlobalSystemConfigList, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::GlobalSystemConfigList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::GlobalSystemConfigList, metadata_),
  PROTOBUF_FIELD_OFFSET(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::GlobalSystemConfigList, items_),
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::GlobalSystemConfigSpec, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::GlobalSystemConfigSpec, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::GlobalSystemConfigSpec, commonspec_),
  PROTOBUF_FIELD_OFFSET(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::GlobalSystemConfigSpec, enable4bytesas_),
  PROTOBUF_FIELD_OFFSET(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::GlobalSystemConfigSpec, autonomoussystem_),
  PROTOBUF_FIELD_OFFSET(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::GlobalSystemConfigSpec, bgprouterreferences_),
  PROTOBUF_FIELD_OFFSET(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::GlobalSystemConfigSpec, ibgpautomesh_),
  PROTOBUF_FIELD_OFFSET(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::GlobalSystemConfigSpec, defaultenablesnat_),
  0,
  2,
  1,
  ~0u,
  3,
  4,
  PROTOBUF_FIELD_OFFSET(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::GlobalSystemConfigStatus, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::GlobalSystemConfigStatus, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::GlobalSystemConfigStatus, commonstatus_),
  0,
  PROTOBUF_FIELD_OFFSET(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::GlobalVrouterConfig, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::GlobalVrouterConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::GlobalVrouterConfig, metadata_),
  PROTOBUF_FIELD_OFFSET(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::GlobalVrouterConfig, spec_),
  PROTOBUF_FIELD_OFFSET(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::GlobalVrouterConfig, status_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::GlobalVrouterConfigList, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::GlobalVrouterConfigList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::GlobalVrouterConfigList, metadata_),
  PROTOBUF_FIELD_OFFSET(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::GlobalVrouterConfigList, items_),
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::GlobalVrouterConfigSpec, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::GlobalVrouterConfigSpec, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::GlobalVrouterConfigSpec, commonspec_),
  PROTOBUF_FIELD_OFFSET(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::GlobalVrouterConfigSpec, parent_),
  PROTOBUF_FIELD_OFFSET(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::GlobalVrouterConfigSpec, encapsulationpriorities_),
  PROTOBUF_FIELD_OFFSET(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::GlobalVrouterConfigSpec, linklocalservices_),
  PROTOBUF_FIELD_OFFSET(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::GlobalVrouterConfigSpec, porttranslationpools_),
  PROTOBUF_FIELD_OFFSET(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::GlobalVrouterConfigSpec, flowexportrate_),
  0,
  1,
  2,
  3,
  4,
  5,
  PROTOBUF_FIELD_OFFSET(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::GlobalVrouterConfigStatus, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::GlobalVrouterConfigStatus, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::GlobalVrouterConfigStatus, commonstatus_),
  0,
  PROTOBUF_FIELD_OFFSET(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::IPRange, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::IPRange, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::IPRange, from_),
  PROTOBUF_FIELD_OFFSET(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::IPRange, to_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::ImportVirtualNetworkRouter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::ImportVirtualNetworkRouter, virtualnetworkrouters_),
  PROTOBUF_FIELD_OFFSET(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::InstanceIP, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::InstanceIP, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::InstanceIP, metadata_),
  PROTOBUF_FIELD_OFFSET(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::InstanceIP, spec_),
  PROTOBUF_FIELD_OFFSET(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::InstanceIP, status_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::InstanceIPList, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::InstanceIPList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::InstanceIPList, metadata_),
  PROTOBUF_FIELD_OFFSET(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::InstanceIPList, items_),
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::InstanceIPSpec, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::InstanceIPSpec, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::InstanceIPSpec, commonspec_),
  PROTOBUF_FIELD_OFFSET(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::InstanceIPSpec, instanceipaddress_),
  PROTOBUF_FIELD_OFFSET(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::InstanceIPSpec, instanceipfamily_),
  PROTOBUF_FIELD_OFFSET(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::InstanceIPSpec, cidr_),
  PROTOBUF_FIELD_OFFSET(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::InstanceIPSpec, virtualnetworkreference_),
  PROTOBUF_FIELD_OFFSET(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::InstanceIPSpec, virtualmachineinterfacereferences_),
  PROTOBUF_FIELD_OFFSET(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::InstanceIPSpec, iprangekeys_),
  3,
  0,
  1,
  2,
  4,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::InstanceIPStatus, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::InstanceIPStatus, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::InstanceIPStatus, commonstatus_),
  PROTOBUF_FIELD_OFFSET(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::InstanceIPStatus, subnetreference_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::LinklocalServiceEntryType, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::LinklocalServiceEntryType, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::LinklocalServiceEntryType, ipfabricdnsservicename_),
  PROTOBUF_FIELD_OFFSET(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::LinklocalServiceEntryType, ipfabricserviceip_),
  PROTOBUF_FIELD_OFFSET(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::LinklocalServiceEntryType, ipfabricserviceport_),
  PROTOBUF_FIELD_OFFSET(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::LinklocalServiceEntryType, linklocalserviceip_),
  PROTOBUF_FIELD_OFFSET(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::LinklocalServiceEntryType, linklocalservicename_),
  PROTOBUF_FIELD_OFFSET(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::LinklocalServiceEntryType, linklocalserviceport_),
  0,
  ~0u,
  3,
  1,
  2,
  4,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::LinklocalServices, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::LinklocalServices, linklocalserviceentry_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::MACAddresses, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::MACAddresses, macaddress_),
  PROTOBUF_FIELD_OFFSET(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::PolicyBasedForwardingRule, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::PolicyBasedForwardingRule, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::PolicyBasedForwardingRule, direction_),
  0,
  PROTOBUF_FIELD_OFFSET(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::PortRange, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::PortRange, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::PortRange, startport_),
  PROTOBUF_FIELD_OFFSET(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::PortRange, endport_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::PortTranslationPool, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::PortTranslationPool, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::PortTranslationPool, protocol_),
  PROTOBUF_FIELD_OFFSET(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::PortTranslationPool, portrange_),
  PROTOBUF_FIELD_OFFSET(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::PortTranslationPool, portcount_),
  0,
  1,
  2,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::PortTranslationPools, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::PortTranslationPools, pools_),
  PROTOBUF_FIELD_OFFSET(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::PortType, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::PortType, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::PortType, startport_),
  PROTOBUF_FIELD_OFFSET(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::PortType, endport_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::Range, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::Range, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::Range, key_),
  PROTOBUF_FIELD_OFFSET(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::Range, ipranges_),
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::ReconcilerState, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::ReconcilerState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::ReconcilerState, state_),
  PROTOBUF_FIELD_OFFSET(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::ReconcilerState, observation_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::ResourceReference, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::ResourceReference, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::ResourceReference, objectreference_),
  PROTOBUF_FIELD_OFFSET(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::ResourceReference, contrailfqname_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::RouteOriginOverride, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::RouteOriginOverride, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::RouteOriginOverride, originoverride_),
  PROTOBUF_FIELD_OFFSET(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::RouteOriginOverride, origin_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::RouteTarget, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::RouteTarget, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::RouteTarget, metadata_),
  PROTOBUF_FIELD_OFFSET(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::RouteTarget, spec_),
  PROTOBUF_FIELD_OFFSET(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::RouteTarget, status_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::RouteTargetList, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::RouteTargetList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::RouteTargetList, metadata_),
  PROTOBUF_FIELD_OFFSET(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::RouteTargetList, items_),
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::RouteTargetReference, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::RouteTargetReference, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::RouteTargetReference, resourcereference_),
  PROTOBUF_FIELD_OFFSET(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::RouteTargetReference, attributes_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::RouteTargetReferenceAttributes, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::RouteTargetReferenceAttributes, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::RouteTargetReferenceAttributes, importexport_),
  0,
  PROTOBUF_FIELD_OFFSET(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::RouteTargetSpec, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::RouteTargetSpec, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::RouteTargetSpec, commonspec_),
  0,
  PROTOBUF_FIELD_OFFSET(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::RouteTargetStatus, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::RouteTargetStatus, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::RouteTargetStatus, commonstatus_),
  0,
  PROTOBUF_FIELD_OFFSET(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::RoutingInstance, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::RoutingInstance, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::RoutingInstance, metadata_),
  PROTOBUF_FIELD_OFFSET(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::RoutingInstance, spec_),
  PROTOBUF_FIELD_OFFSET(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::RoutingInstance, status_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::RoutingInstanceList, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::RoutingInstanceList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::RoutingInstanceList, metadata_),
  PROTOBUF_FIELD_OFFSET(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::RoutingInstanceList, items_),
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::RoutingInstanceReference, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::RoutingInstanceReference, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::RoutingInstanceReference, resourcereference_),
  PROTOBUF_FIELD_OFFSET(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::RoutingInstanceReference, attributes_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::RoutingInstanceSpec, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::RoutingInstanceSpec, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::RoutingInstanceSpec, commonspec_),
  PROTOBUF_FIELD_OFFSET(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::RoutingInstanceSpec, parent_),
  PROTOBUF_FIELD_OFFSET(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::RoutingInstanceSpec, routetargetreferences_),
  0,
  1,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::RoutingInstanceStatus_VirtualNetworkRouterRouteTargetReferencesEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::RoutingInstanceStatus_VirtualNetworkRouterRouteTargetReferencesEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::RoutingInstanceStatus_VirtualNetworkRouterRouteTargetReferencesEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::RoutingInstanceStatus_VirtualNetworkRouterRouteTargetReferencesEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::RoutingInstanceStatus, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::RoutingInstanceStatus, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::RoutingInstanceStatus, commonstatus_),
  PROTOBUF_FIELD_OFFSET(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::RoutingInstanceStatus, isdefault_),
  PROTOBUF_FIELD_OFFSET(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::RoutingInstanceStatus, routinginstancefabricsnat_),
  PROTOBUF_FIELD_OFFSET(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::RoutingInstanceStatus, defaultroutetargetreference_),
  PROTOBUF_FIELD_OFFSET(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::RoutingInstanceStatus, virtualnetworkrouterroutetargetreferences_),
  0,
  2,
  3,
  1,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::Subnet, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::Subnet, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::Subnet, metadata_),
  PROTOBUF_FIELD_OFFSET(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::Subnet, spec_),
  PROTOBUF_FIELD_OFFSET(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::Subnet, status_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::SubnetList, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::SubnetList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::SubnetList, metadata_),
  PROTOBUF_FIELD_OFFSET(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::SubnetList, items_),
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::SubnetReference, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::SubnetReference, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::SubnetReference, resourcereference_),
  PROTOBUF_FIELD_OFFSET(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::SubnetReference, attributes_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::SubnetSpec, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::SubnetSpec, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::SubnetSpec, commonspec_),
  PROTOBUF_FIELD_OFFSET(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::SubnetSpec, cidr_),
  PROTOBUF_FIELD_OFFSET(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::SubnetSpec, defaultgateway_),
  PROTOBUF_FIELD_OFFSET(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::SubnetSpec, dnsnameservers_),
  PROTOBUF_FIELD_OFFSET(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::SubnetSpec, ranges_),
  PROTOBUF_FIELD_OFFSET(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::SubnetSpec, disablebgpaasipautoallocation_),
  PROTOBUF_FIELD_OFFSET(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::SubnetSpec, bgpaasprimaryip_),
  PROTOBUF_FIELD_OFFSET(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::SubnetSpec, bgpaassecondaryip_),
  4,
  0,
  1,
  ~0u,
  ~0u,
  5,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::SubnetStatus, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::SubnetStatus, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::SubnetStatus, commonstatus_),
  PROTOBUF_FIELD_OFFSET(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::SubnetStatus, ipcount_),
  PROTOBUF_FIELD_OFFSET(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::SubnetStatus, allocationusage_),
  1,
  2,
  0,
  PROTOBUF_FIELD_OFFSET(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::Tag, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::Tag, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::Tag, metadata_),
  PROTOBUF_FIELD_OFFSET(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::Tag, spec_),
  PROTOBUF_FIELD_OFFSET(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::Tag, status_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::TagList, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::TagList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::TagList, metadata_),
  PROTOBUF_FIELD_OFFSET(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::TagList, items_),
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::TagSpec, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::TagSpec, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::TagSpec, commonspec_),
  PROTOBUF_FIELD_OFFSET(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::TagSpec, tagtypename_),
  PROTOBUF_FIELD_OFFSET(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::TagSpec, tagvalue_),
  PROTOBUF_FIELD_OFFSET(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::TagSpec, tagtypereference_),
  2,
  0,
  1,
  3,
  PROTOBUF_FIELD_OFFSET(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::TagStatus, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::TagStatus, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::TagStatus, commonstatus_),
  PROTOBUF_FIELD_OFFSET(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::TagStatus, tagid_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::TagType, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::TagType, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::TagType, metadata_),
  PROTOBUF_FIELD_OFFSET(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::TagType, spec_),
  PROTOBUF_FIELD_OFFSET(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::TagType, status_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::TagTypeList, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::TagTypeList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::TagTypeList, metadata_),
  PROTOBUF_FIELD_OFFSET(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::TagTypeList, items_),
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::TagTypeSpec, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::TagTypeSpec, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::TagTypeSpec, commonspec_),
  0,
  PROTOBUF_FIELD_OFFSET(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::TagTypeStatus, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::TagTypeStatus, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::TagTypeStatus, commonstatus_),
  PROTOBUF_FIELD_OFFSET(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::TagTypeStatus, tagtypeid_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::VirtualMachine, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::VirtualMachine, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::VirtualMachine, metadata_),
  PROTOBUF_FIELD_OFFSET(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::VirtualMachine, spec_),
  PROTOBUF_FIELD_OFFSET(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::VirtualMachine, status_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::VirtualMachineInterface, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::VirtualMachineInterface, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::VirtualMachineInterface, metadata_),
  PROTOBUF_FIELD_OFFSET(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::VirtualMachineInterface, spec_),
  PROTOBUF_FIELD_OFFSET(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::VirtualMachineInterface, status_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::VirtualMachineInterfaceList, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::VirtualMachineInterfaceList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::VirtualMachineInterfaceList, metadata_),
  PROTOBUF_FIELD_OFFSET(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::VirtualMachineInterfaceList, items_),
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::VirtualMachineInterfaceProperties, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::VirtualMachineInterfaceProperties, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::VirtualMachineInterfaceProperties, subinterfacevlantag_),
  0,
  PROTOBUF_FIELD_OFFSET(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::VirtualMachineInterfaceSpec, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::VirtualMachineInterfaceSpec, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::VirtualMachineInterfaceSpec, commonspec_),
  PROTOBUF_FIELD_OFFSET(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::VirtualMachineInterfaceSpec, parent_),
  PROTOBUF_FIELD_OFFSET(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::VirtualMachineInterfaceSpec, virtualmachineinterfacemacaddresses_),
  PROTOBUF_FIELD_OFFSET(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::VirtualMachineInterfaceSpec, virtualnetworkreference_),
  PROTOBUF_FIELD_OFFSET(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::VirtualMachineInterfaceSpec, virtualmachinereferences_),
  PROTOBUF_FIELD_OFFSET(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::VirtualMachineInterfaceSpec, virtualmachineinterfacedisablepolicy_),
  PROTOBUF_FIELD_OFFSET(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::VirtualMachineInterfaceSpec, allowedaddresspairs_),
  PROTOBUF_FIELD_OFFSET(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::VirtualMachineInterfaceSpec, portsecurityenabled_),
  PROTOBUF_FIELD_OFFSET(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::VirtualMachineInterfaceSpec, virtualmachineinterfacereferences_),
  PROTOBUF_FIELD_OFFSET(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::VirtualMachineInterfaceSpec, properties_),
  PROTOBUF_FIELD_OFFSET(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::VirtualMachineInterfaceSpec, tagreferences_),
  0,
  1,
  2,
  3,
  ~0u,
  6,
  4,
  7,
  ~0u,
  5,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::VirtualMachineInterfaceStatus, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::VirtualMachineInterfaceStatus, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::VirtualMachineInterfaceStatus, commonstatus_),
  PROTOBUF_FIELD_OFFSET(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::VirtualMachineInterfaceStatus, routinginstancereferences_),
  PROTOBUF_FIELD_OFFSET(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::VirtualMachineInterfaceStatus, bgprouterreference_),
  0,
  ~0u,
  1,
  PROTOBUF_FIELD_OFFSET(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::VirtualMachineList, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::VirtualMachineList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::VirtualMachineList, metadata_),
  PROTOBUF_FIELD_OFFSET(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::VirtualMachineList, items_),
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::VirtualMachineSpec, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::VirtualMachineSpec, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::VirtualMachineSpec, commonspec_),
  PROTOBUF_FIELD_OFFSET(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::VirtualMachineSpec, servertype_),
  PROTOBUF_FIELD_OFFSET(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::VirtualMachineSpec, servername_),
  PROTOBUF_FIELD_OFFSET(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::VirtualMachineSpec, servernamespace_),
  PROTOBUF_FIELD_OFFSET(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::VirtualMachineSpec, serverclustername_),
  4,
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::VirtualMachineStatus, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::VirtualMachineStatus, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::VirtualMachineStatus, commonstatus_),
  0,
  PROTOBUF_FIELD_OFFSET(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::VirtualNetwork, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::VirtualNetwork, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::VirtualNetwork, metadata_),
  PROTOBUF_FIELD_OFFSET(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::VirtualNetwork, spec_),
  PROTOBUF_FIELD_OFFSET(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::VirtualNetwork, status_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::VirtualNetworkList, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::VirtualNetworkList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::VirtualNetworkList, metadata_),
  PROTOBUF_FIELD_OFFSET(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::VirtualNetworkList, items_),
  0,
  ~0u,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::VirtualNetworkRouteTargetReferenceList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::VirtualNetworkRouteTargetReferenceList, routetargetreferences_),
  PROTOBUF_FIELD_OFFSET(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::VirtualNetworkRouter, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::VirtualNetworkRouter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::VirtualNetworkRouter, metadata_),
  PROTOBUF_FIELD_OFFSET(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::VirtualNetworkRouter, spec_),
  PROTOBUF_FIELD_OFFSET(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::VirtualNetworkRouter, status_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::VirtualNetworkRouterEntry, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::VirtualNetworkRouterEntry, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::VirtualNetworkRouterEntry, virtualnetworkrouterselector_),
  PROTOBUF_FIELD_OFFSET(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::VirtualNetworkRouterEntry, namespaceselector_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::VirtualNetworkRouterList, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::VirtualNetworkRouterList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::VirtualNetworkRouterList, metadata_),
  PROTOBUF_FIELD_OFFSET(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::VirtualNetworkRouterList, items_),
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::VirtualNetworkRouterSpec, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::VirtualNetworkRouterSpec, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::VirtualNetworkRouterSpec, commonspec_),
  PROTOBUF_FIELD_OFFSET(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::VirtualNetworkRouterSpec, type_),
  PROTOBUF_FIELD_OFFSET(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::VirtualNetworkRouterSpec, virtualnetworkselector_),
  PROTOBUF_FIELD_OFFSET(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::VirtualNetworkRouterSpec, import_),
  1,
  0,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::VirtualNetworkRouterStatus, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::VirtualNetworkRouterStatus, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::VirtualNetworkRouterStatus, commonstatus_),
  0,
  PROTOBUF_FIELD_OFFSET(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::VirtualNetworkSpec, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::VirtualNetworkSpec, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::VirtualNetworkSpec, commonspec_),
  PROTOBUF_FIELD_OFFSET(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::VirtualNetworkSpec, fabricsnat_),
  PROTOBUF_FIELD_OFFSET(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::VirtualNetworkSpec, v4subnetreference_),
  PROTOBUF_FIELD_OFFSET(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::VirtualNetworkSpec, v6subnetreference_),
  PROTOBUF_FIELD_OFFSET(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::VirtualNetworkSpec, routetargetlist_),
  PROTOBUF_FIELD_OFFSET(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::VirtualNetworkSpec, importroutetargetlist_),
  PROTOBUF_FIELD_OFFSET(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::VirtualNetworkSpec, exportroutetargetlist_),
  PROTOBUF_FIELD_OFFSET(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::VirtualNetworkSpec, virtualnetworkproperties_),
  PROTOBUF_FIELD_OFFSET(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::VirtualNetworkSpec, providernetworkreference_),
  PROTOBUF_FIELD_OFFSET(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::VirtualNetworkSpec, isprovidernetwork_),
  PROTOBUF_FIELD_OFFSET(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::VirtualNetworkSpec, fabricforwarding_),
  0,
  5,
  1,
  2,
  ~0u,
  ~0u,
  ~0u,
  3,
  4,
  6,
  7,
  PROTOBUF_FIELD_OFFSET(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::VirtualNetworkStatus, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::VirtualNetworkStatus, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::VirtualNetworkStatus, commonstatus_),
  PROTOBUF_FIELD_OFFSET(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::VirtualNetworkStatus, virtualnetworknetworkid_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::VirtualNetworkType, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::VirtualNetworkType, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::VirtualNetworkType, rpf_),
  PROTOBUF_FIELD_OFFSET(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::VirtualNetworkType, forwardingmode_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::VirtualRouter, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::VirtualRouter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::VirtualRouter, metadata_),
  PROTOBUF_FIELD_OFFSET(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::VirtualRouter, spec_),
  PROTOBUF_FIELD_OFFSET(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::VirtualRouter, status_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::VirtualRouterList, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::VirtualRouterList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::VirtualRouterList, metadata_),
  PROTOBUF_FIELD_OFFSET(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::VirtualRouterList, items_),
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::VirtualRouterSpec, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::VirtualRouterSpec, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::VirtualRouterSpec, commonspec_),
  PROTOBUF_FIELD_OFFSET(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::VirtualRouterSpec, parent_),
  PROTOBUF_FIELD_OFFSET(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::VirtualRouterSpec, virtualrouterdpdkenabled_),
  PROTOBUF_FIELD_OFFSET(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::VirtualRouterSpec, virtualrouteripaddress_),
  PROTOBUF_FIELD_OFFSET(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::VirtualRouterSpec, virtualroutertype_),
  PROTOBUF_FIELD_OFFSET(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::VirtualRouterSpec, virtualmachinereferences_),
  2,
  3,
  4,
  0,
  1,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::VirtualRouterStatus, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::VirtualRouterStatus, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::VirtualRouterStatus, commonstatus_),
  0,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 6, sizeof(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::APSAttribute)},
  { 7, -1, sizeof(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::AddressFamilies)},
  { 13, 21, sizeof(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::AddressGroup)},
  { 24, 31, sizeof(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::AddressGroupList)},
  { 33, -1, sizeof(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::AddressGroupPrefix)},
  { 39, 46, sizeof(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::AddressGroupSpec)},
  { 48, 54, sizeof(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::AddressGroupStatus)},
  { 55, 63, sizeof(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::AllowedAddressPair)},
  { 66, 73, sizeof(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::AllowedAddressPairSubnet)},
  { 75, -1, sizeof(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::AllowedAddressPairs)},
  { 81, 89, sizeof(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::ApplicationPolicySet)},
  { 92, 99, sizeof(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::ApplicationPolicySetList)},
  { 101, 109, sizeof(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::ApplicationPolicySetSpec)},
  { 112, 119, sizeof(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::ApplicationPolicySetStatus)},
  { 121, 128, sizeof(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::AuthenticationData)},
  { 130, 137, sizeof(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::AuthenticationKeyItem)},
  { 139, 147, sizeof(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::BGPAsAService)},
  { 150, 157, sizeof(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::BGPAsAServiceList)},
  { 159, 173, sizeof(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::BGPAsAServiceSpec)},
  { 182, 190, sizeof(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::BGPAsAServiceStatus)},
  { 193, 202, sizeof(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::BGPFamilyAttributes)},
  { 206, 213, sizeof(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::BGPPrefixLimit)},
  { 215, 223, sizeof(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::BGPRouter)},
  { 226, 233, sizeof(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::BGPRouterList)},
  { 235, 255, sizeof(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::BGPRouterParameters)},
  { 270, 277, sizeof(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::BGPRouterReference)},
  { 279, -1, sizeof(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::BGPRouterReferenceAttributes)},
  { 285, 294, sizeof(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::BGPRouterSpec)},
  { 298, 304, sizeof(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::BGPRouterStatus)},
  { 305, -1, sizeof(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::BGPSession)},
  { 311, 328, sizeof(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::BGPSessionAttributes)},
  { 340, 347, sizeof(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::BGPSessionIPAttributes)},
  { 349, 355, sizeof(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::CommonSpec)},
  { 356, 362, sizeof(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::CommonStatus)},
  { 363, -1, sizeof(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::ContrailFqName)},
  { 369, -1, sizeof(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::EncapsulationPriorities)},
  { 375, 381, sizeof(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::FirewallActionListType)},
  { 382, 390, sizeof(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::FirewallPolicy)},
  { 393, 399, sizeof(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::FirewallPolicyAttribute)},
  { 400, 407, sizeof(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::FirewallPolicyList)},
  { 409, 416, sizeof(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::FirewallPolicyReference)},
  { 418, 425, sizeof(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::FirewallPolicySpec)},
  { 427, 433, sizeof(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::FirewallPolicyStatus)},
  { 434, 442, sizeof(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::FirewallRule)},
  { 445, 455, sizeof(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::FirewallRuleEndpointType)},
  { 460, 467, sizeof(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::FirewallRuleList)},
  { 469, 476, sizeof(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::FirewallRuleReference)},
  { 478, 493, sizeof(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::FirewallRuleSpec)},
  { 503, 509, sizeof(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::FirewallRuleStatus)},
  { 510, 519, sizeof(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::FirewallServiceType)},
  { 523, 530, sizeof(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::FirewallSubnet)},
  { 532, 540, sizeof(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::FloatingIP)},
  { 543, 550, sizeof(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::FloatingIPList)},
  { 552, -1, sizeof(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::FloatingIPPortMappings)},
  { 558, 566, sizeof(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::FloatingIPPortPortMapping)},
  { 569, 581, sizeof(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::FloatingIPSpec)},
  { 588, 595, sizeof(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::FloatingIPStatus)},
  { 597, 605, sizeof(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::GlobalSystemConfig)},
  { 608, 615, sizeof(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::GlobalSystemConfigList)},
  { 617, 628, sizeof(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::GlobalSystemConfigSpec)},
  { 634, 640, sizeof(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::GlobalSystemConfigStatus)},
  { 641, 649, sizeof(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::GlobalVrouterConfig)},
  { 652, 659, sizeof(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::GlobalVrouterConfigList)},
  { 661, 672, sizeof(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::GlobalVrouterConfigSpec)},
  { 678, 684, sizeof(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::GlobalVrouterConfigStatus)},
  { 685, 692, sizeof(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::IPRange)},
  { 694, -1, sizeof(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::ImportVirtualNetworkRouter)},
  { 700, 708, sizeof(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::InstanceIP)},
  { 711, 718, sizeof(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::InstanceIPList)},
  { 720, 732, sizeof(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::InstanceIPSpec)},
  { 739, 746, sizeof(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::InstanceIPStatus)},
  { 748, 759, sizeof(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::LinklocalServiceEntryType)},
  { 765, -1, sizeof(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::LinklocalServices)},
  { 771, -1, sizeof(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::MACAddresses)},
  { 777, 783, sizeof(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::PolicyBasedForwardingRule)},
  { 784, 791, sizeof(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::PortRange)},
  { 793, 801, sizeof(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::PortTranslationPool)},
  { 804, -1, sizeof(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::PortTranslationPools)},
  { 810, 817, sizeof(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::PortType)},
  { 819, 826, sizeof(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::Range)},
  { 828, 835, sizeof(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::ReconcilerState)},
  { 837, 844, sizeof(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::ResourceReference)},
  { 846, 853, sizeof(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::RouteOriginOverride)},
  { 855, 863, sizeof(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::RouteTarget)},
  { 866, 873, sizeof(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::RouteTargetList)},
  { 875, 882, sizeof(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::RouteTargetReference)},
  { 884, 890, sizeof(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::RouteTargetReferenceAttributes)},
  { 891, 897, sizeof(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::RouteTargetSpec)},
  { 898, 904, sizeof(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::RouteTargetStatus)},
  { 905, 913, sizeof(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::RoutingInstance)},
  { 916, 923, sizeof(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::RoutingInstanceList)},
  { 925, 932, sizeof(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::RoutingInstanceReference)},
  { 934, 942, sizeof(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::RoutingInstanceSpec)},
  { 945, 952, sizeof(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::RoutingInstanceStatus_VirtualNetworkRouterRouteTargetReferencesEntry_DoNotUse)},
  { 954, 964, sizeof(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::RoutingInstanceStatus)},
  { 969, 977, sizeof(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::Subnet)},
  { 980, 987, sizeof(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::SubnetList)},
  { 989, 996, sizeof(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::SubnetReference)},
  { 998, 1011, sizeof(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::SubnetSpec)},
  { 1019, 1027, sizeof(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::SubnetStatus)},
  { 1030, 1038, sizeof(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::Tag)},
  { 1041, 1048, sizeof(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::TagList)},
  { 1050, 1059, sizeof(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::TagSpec)},
  { 1063, 1070, sizeof(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::TagStatus)},
  { 1072, 1080, sizeof(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::TagType)},
  { 1083, 1090, sizeof(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::TagTypeList)},
  { 1092, 1098, sizeof(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::TagTypeSpec)},
  { 1099, 1106, sizeof(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::TagTypeStatus)},
  { 1108, 1116, sizeof(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::VirtualMachine)},
  { 1119, 1127, sizeof(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::VirtualMachineInterface)},
  { 1130, 1137, sizeof(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::VirtualMachineInterfaceList)},
  { 1139, 1145, sizeof(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::VirtualMachineInterfaceProperties)},
  { 1146, 1162, sizeof(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::VirtualMachineInterfaceSpec)},
  { 1173, 1181, sizeof(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::VirtualMachineInterfaceStatus)},
  { 1184, 1191, sizeof(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::VirtualMachineList)},
  { 1193, 1203, sizeof(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::VirtualMachineSpec)},
  { 1208, 1214, sizeof(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::VirtualMachineStatus)},
  { 1215, 1223, sizeof(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::VirtualNetwork)},
  { 1226, 1233, sizeof(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::VirtualNetworkList)},
  { 1235, -1, sizeof(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::VirtualNetworkRouteTargetReferenceList)},
  { 1241, 1249, sizeof(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::VirtualNetworkRouter)},
  { 1252, 1259, sizeof(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::VirtualNetworkRouterEntry)},
  { 1261, 1268, sizeof(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::VirtualNetworkRouterList)},
  { 1270, 1279, sizeof(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::VirtualNetworkRouterSpec)},
  { 1283, 1289, sizeof(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::VirtualNetworkRouterStatus)},
  { 1290, 1306, sizeof(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::VirtualNetworkSpec)},
  { 1317, 1324, sizeof(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::VirtualNetworkStatus)},
  { 1326, 1333, sizeof(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::VirtualNetworkType)},
  { 1335, 1343, sizeof(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::VirtualRouter)},
  { 1346, 1353, sizeof(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::VirtualRouterList)},
  { 1355, 1366, sizeof(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::VirtualRouterSpec)},
  { 1372, 1378, sizeof(::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::VirtualRouterStatus)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::_APSAttribute_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::_AddressFamilies_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::_AddressGroup_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::_AddressGroupList_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::_AddressGroupPrefix_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::_AddressGroupSpec_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::_AddressGroupStatus_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::_AllowedAddressPair_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::_AllowedAddressPairSubnet_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::_AllowedAddressPairs_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::_ApplicationPolicySet_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::_ApplicationPolicySetList_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::_ApplicationPolicySetSpec_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::_ApplicationPolicySetStatus_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::_AuthenticationData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::_AuthenticationKeyItem_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::_BGPAsAService_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::_BGPAsAServiceList_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::_BGPAsAServiceSpec_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::_BGPAsAServiceStatus_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::_BGPFamilyAttributes_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::_BGPPrefixLimit_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::_BGPRouter_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::_BGPRouterList_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::_BGPRouterParameters_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::_BGPRouterReference_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::_BGPRouterReferenceAttributes_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::_BGPRouterSpec_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::_BGPRouterStatus_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::_BGPSession_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::_BGPSessionAttributes_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::_BGPSessionIPAttributes_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::_CommonSpec_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::_CommonStatus_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::_ContrailFqName_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::_EncapsulationPriorities_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::_FirewallActionListType_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::_FirewallPolicy_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::_FirewallPolicyAttribute_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::_FirewallPolicyList_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::_FirewallPolicyReference_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::_FirewallPolicySpec_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::_FirewallPolicyStatus_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::_FirewallRule_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::_FirewallRuleEndpointType_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::_FirewallRuleList_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::_FirewallRuleReference_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::_FirewallRuleSpec_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::_FirewallRuleStatus_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::_FirewallServiceType_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::_FirewallSubnet_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::_FloatingIP_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::_FloatingIPList_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::_FloatingIPPortMappings_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::_FloatingIPPortPortMapping_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::_FloatingIPSpec_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::_FloatingIPStatus_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::_GlobalSystemConfig_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::_GlobalSystemConfigList_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::_GlobalSystemConfigSpec_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::_GlobalSystemConfigStatus_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::_GlobalVrouterConfig_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::_GlobalVrouterConfigList_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::_GlobalVrouterConfigSpec_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::_GlobalVrouterConfigStatus_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::_IPRange_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::_ImportVirtualNetworkRouter_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::_InstanceIP_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::_InstanceIPList_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::_InstanceIPSpec_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::_InstanceIPStatus_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::_LinklocalServiceEntryType_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::_LinklocalServices_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::_MACAddresses_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::_PolicyBasedForwardingRule_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::_PortRange_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::_PortTranslationPool_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::_PortTranslationPools_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::_PortType_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::_Range_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::_ReconcilerState_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::_ResourceReference_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::_RouteOriginOverride_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::_RouteTarget_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::_RouteTargetList_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::_RouteTargetReference_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::_RouteTargetReferenceAttributes_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::_RouteTargetSpec_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::_RouteTargetStatus_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::_RoutingInstance_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::_RoutingInstanceList_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::_RoutingInstanceReference_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::_RoutingInstanceSpec_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::_RoutingInstanceStatus_VirtualNetworkRouterRouteTargetReferencesEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::_RoutingInstanceStatus_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::_Subnet_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::_SubnetList_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::_SubnetReference_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::_SubnetSpec_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::_SubnetStatus_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::_Tag_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::_TagList_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::_TagSpec_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::_TagStatus_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::_TagType_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::_TagTypeList_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::_TagTypeSpec_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::_TagTypeStatus_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::_VirtualMachine_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::_VirtualMachineInterface_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::_VirtualMachineInterfaceList_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::_VirtualMachineInterfaceProperties_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::_VirtualMachineInterfaceSpec_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::_VirtualMachineInterfaceStatus_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::_VirtualMachineList_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::_VirtualMachineSpec_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::_VirtualMachineStatus_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::_VirtualNetwork_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::_VirtualNetworkList_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::_VirtualNetworkRouteTargetReferenceList_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::_VirtualNetworkRouter_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::_VirtualNetworkRouterEntry_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::_VirtualNetworkRouterList_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::_VirtualNetworkRouterSpec_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::_VirtualNetworkRouterStatus_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::_VirtualNetworkSpec_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::_VirtualNetworkStatus_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::_VirtualNetworkType_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::_VirtualRouter_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::_VirtualRouterList_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::_VirtualRouterSpec_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::_VirtualRouterStatus_default_instance_),
};

const char descriptor_table_protodef_ssd_2dgit_2ejuniper_2enet_2fcontrail_2fcn2_2fcontrail_2fpkg_2fapis_2fcore_2fv1alpha1_2fgenerated_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\nPssd-git.juniper.net/contrail/cn2/contr"
  "ail/pkg/apis/core/v1alpha1/generated.pro"
  "to\022@ssd_git.juniper.net.contrail.cn2.con"
  "trail.pkg.apis.core.v1alpha1\032\"k8s.io/api"
  "/core/v1/generated.proto\0324k8s.io/apimach"
  "inery/pkg/apis/meta/v1/generated.proto\032/"
  "k8s.io/apimachinery/pkg/runtime/generate"
  "d.proto\0326k8s.io/apimachinery/pkg/runtime"
  "/schema/generated.proto\0323k8s.io/apimachi"
  "nery/pkg/util/intstr/generated.proto\032ass"
  "d-git.juniper.net/contrail/cn2/third_par"
  "ty/apiserver-builder-alpha/pkg/builders/"
  "generated.proto\" \n\014APSAttribute\022\020\n\010seque"
  "nce\030\001 \001(\t\"!\n\017AddressFamilies\022\016\n\006family\030\001"
  " \003(\t\"\232\002\n\014AddressGroup\022B\n\010metadata\030\001 \001(\0132"
  "0.k8s.io.apimachinery.pkg.apis.meta.v1.O"
  "bjectMeta\022`\n\004spec\030\002 \001(\0132R.ssd_git.junipe"
  "r.net.contrail.cn2.contrail.pkg.apis.cor"
  "e.v1alpha1.AddressGroupSpec\022d\n\006status\030\003 "
  "\001(\0132T.ssd_git.juniper.net.contrail.cn2.c"
  "ontrail.pkg.apis.core.v1alpha1.AddressGr"
  "oupStatus\"\263\001\n\020AddressGroupList\022@\n\010metada"
  "ta\030\001 \001(\0132..k8s.io.apimachinery.pkg.apis."
  "meta.v1.ListMeta\022]\n\005items\030\002 \003(\0132N.ssd_gi"
  "t.juniper.net.contrail.cn2.contrail.pkg."
  "apis.core.v1alpha1.AddressGroup\"v\n\022Addre"
  "ssGroupPrefix\022`\n\006subnet\030\001 \003(\0132P.ssd_git."
  "juniper.net.contrail.cn2.contrail.pkg.ap"
  "is.core.v1alpha1.FirewallSubnet\"\350\001\n\020Addr"
  "essGroupSpec\022`\n\ncommonSpec\030\001 \001(\0132L.ssd_g"
  "it.juniper.net.contrail.cn2.contrail.pkg"
  ".apis.core.v1alpha1.CommonSpec\022r\n\024addres"
  "sGroupPrefixes\030\002 \001(\0132T.ssd_git.juniper.n"
  "et.contrail.cn2.contrail.pkg.apis.core.v"
  "1alpha1.AddressGroupPrefix\"z\n\022AddressGro"
  "upStatus\022d\n\014commonStatus\030\001 \001(\0132N.ssd_git"
  ".juniper.net.contrail.cn2.contrail.pkg.a"
  "pis.core.v1alpha1.CommonStatus\"\236\001\n\022Allow"
  "edAddressPair\022f\n\002ip\030\001 \001(\0132Z.ssd_git.juni"
  "per.net.contrail.cn2.contrail.pkg.apis.c"
  "ore.v1alpha1.AllowedAddressPairSubnet\022\013\n"
  "\003mac\030\002 \001(\t\022\023\n\013addressMode\030\003 \001(\t\"s\n\030Allow"
  "edAddressPairSubnet\022\020\n\010ipPrefix\030\001 \001(\t\022E\n"
  "\013ipPrefixLen\030\002 \001(\01320.k8s.io.apimachinery"
  ".pkg.util.intstr.IntOrString\"\207\001\n\023Allowed"
  "AddressPairs\022p\n\022allowedAddressPair\030\001 \003(\013"
  "2T.ssd_git.juniper.net.contrail.cn2.cont"
  "rail.pkg.apis.core.v1alpha1.AllowedAddre"
  "ssPair\"\262\002\n\024ApplicationPolicySet\022B\n\010metad"
  "ata\030\001 \001(\01320.k8s.io.apimachinery.pkg.apis"
  ".meta.v1.ObjectMeta\022h\n\004spec\030\002 \001(\0132Z.ssd_"
  "git.juniper.net.contrail.cn2.contrail.pk"
  "g.apis.core.v1alpha1.ApplicationPolicySe"
  "tSpec\022l\n\006status\030\003 \001(\0132\\.ssd_git.juniper."
  "net.contrail.cn2.contrail.pkg.apis.core."
  "v1alpha1.ApplicationPolicySetStatus\"\303\001\n\030"
  "ApplicationPolicySetList\022@\n\010metadata\030\001 \001"
  "(\0132..k8s.io.apimachinery.pkg.apis.meta.v"
  "1.ListMeta\022e\n\005items\030\002 \003(\0132V.ssd_git.juni"
  "per.net.contrail.cn2.contrail.pkg.apis.c"
  "ore.v1alpha1.ApplicationPolicySet\"\345\002\n\030Ap"
  "plicationPolicySetSpec\022`\n\ncommonSpec\030\001 \001"
  "(\0132L.ssd_git.juniper.net.contrail.cn2.co"
  "ntrail.pkg.apis.core.v1alpha1.CommonSpec"
  "\022{\n\030firewallPolicyReferences\030\002 \003(\0132Y.ssd"
  "_git.juniper.net.contrail.cn2.contrail.p"
  "kg.apis.core.v1alpha1.FirewallPolicyRefe"
  "rence\022j\n\rtagReferences\030\003 \003(\0132S.ssd_git.j"
  "uniper.net.contrail.cn2.contrail.pkg.api"
  "s.core.v1alpha1.ResourceReference\"\233\001\n\032Ap"
  "plicationPolicySetStatus\022d\n\014commonStatus"
  "\030\001 \001(\0132N.ssd_git.juniper.net.contrail.cn"
  "2.contrail.pkg.apis.core.v1alpha1.Common"
  "Status\022\027\n\017allApplications\030\003 \001(\010\"\220\001\n\022Auth"
  "enticationData\022\017\n\007keyType\030\001 \001(\t\022i\n\010keyIt"
  "ems\030\002 \003(\0132W.ssd_git.juniper.net.contrail"
  ".cn2.contrail.pkg.apis.core.v1alpha1.Aut"
  "henticationKeyItem\"3\n\025AuthenticationKeyI"
  "tem\022\r\n\005keyId\030\001 \001(\005\022\013\n\003key\030\002 \001(\t\"\235\002\n\rBGPA"
  "sAService\022B\n\010metadata\030\001 \001(\01320.k8s.io.api"
  "machinery.pkg.apis.meta.v1.ObjectMeta\022a\n"
  "\004spec\030\002 \001(\0132S.ssd_git.juniper.net.contra"
  "il.cn2.contrail.pkg.apis.core.v1alpha1.B"
  "GPAsAServiceSpec\022e\n\006status\030\003 \001(\0132U.ssd_g"
  "it.juniper.net.contrail.cn2.contrail.pkg"
  ".apis.core.v1alpha1.BGPAsAServiceStatus\""
  "\265\001\n\021BGPAsAServiceList\022@\n\010metadata\030\001 \001(\0132"
  "..k8s.io.apimachinery.pkg.apis.meta.v1.L"
  "istMeta\022^\n\005items\030\002 \003(\0132O.ssd_git.juniper"
  ".net.contrail.cn2.contrail.pkg.apis.core"
  ".v1alpha1.BGPAsAService\"\324\004\n\021BGPAsAServic"
  "eSpec\022`\n\ncommonSpec\030\001 \001(\0132L.ssd_git.juni"
  "per.net.contrail.cn2.contrail.pkg.apis.c"
  "ore.v1alpha1.CommonSpec\022\016\n\006shared\030\002 \001(\010\022"
  "\021\n\tipAddress\030\003 \001(\t\022\030\n\020autonomousSystem\030\004"
  " \001(\005\022\"\n\032suppressRouteAdvertisement\030\005 \001(\010"
  "\022\035\n\025ipv4MappedIPv6NextHop\030\006 \001(\010\022~\n\036bgpAs"
  "AServiceSessionAttributes\030\007 \001(\0132V.ssd_gi"
  "t.juniper.net.contrail.cn2.contrail.pkg."
  "apis.core.v1alpha1.BGPSessionAttributes\022"
  "~\n!virtualMachineInterfaceReferences\030\010 \003"
  "(\0132S.ssd_git.juniper.net.contrail.cn2.co"
  "ntrail.pkg.apis.core.v1alpha1.ResourceRe"
  "ference\022]\n virtualMachineInterfacesSelec"
  "tor\030\t \003(\01323.k8s.io.apimachinery.pkg.apis"
  ".meta.v1.LabelSelector\"\333\002\n\023BGPAsAService"
  "Status\022d\n\014commonStatus\030\001 \001(\0132N.ssd_git.j"
  "uniper.net.contrail.cn2.contrail.pkg.api"
  "s.core.v1alpha1.CommonStatus\022q\n\023bgpRoute"
  "rReferences\030\002 \003(\0132T.ssd_git.juniper.net."
  "contrail.cn2.contrail.pkg.apis.core.v1al"
  "pha1.BGPRouterReference\022k\n\020subnetReferen"
  "ces\030\003 \003(\0132Q.ssd_git.juniper.net.contrail"
  ".cn2.contrail.pkg.apis.core.v1alpha1.Sub"
  "netReference\"\302\001\n\023BGPFamilyAttributes\022\025\n\r"
  "addressFamily\030\001 \001(\t\022\021\n\tloopCount\030\002 \001(\005\022e"
  "\n\013prefixLimit\030\003 \001(\0132P.ssd_git.juniper.ne"
  "t.contrail.cn2.contrail.pkg.apis.core.v1"
  "alpha1.BGPPrefixLimit\022\032\n\022defaultTunnelEn"
  "cap\030\004 \003(\t\"6\n\016BGPPrefixLimit\022\023\n\013idleTimeo"
  "ut\030\001 \001(\005\022\017\n\007maximum\030\002 \001(\005\"\221\002\n\tBGPRouter\022"
  "B\n\010metadata\030\001 \001(\01320.k8s.io.apimachinery."
  "pkg.apis.meta.v1.ObjectMeta\022]\n\004spec\030\002 \001("
  "\0132O.ssd_git.juniper.net.contrail.cn2.con"
  "trail.pkg.apis.core.v1alpha1.BGPRouterSp"
  "ec\022a\n\006status\030\003 \001(\0132Q.ssd_git.juniper.net"
  ".contrail.cn2.contrail.pkg.apis.core.v1a"
  "lpha1.BGPRouterStatus\"\255\001\n\rBGPRouterList\022"
  "@\n\010metadata\030\001 \001(\0132..k8s.io.apimachinery."
  "pkg.apis.meta.v1.ListMeta\022Z\n\005items\030\002 \003(\013"
  "2K.ssd_git.juniper.net.contrail.cn2.cont"
  "rail.pkg.apis.core.v1alpha1.BGPRouter\"\371\003"
  "\n\023BGPRouterParameters\022\021\n\tadminDown\030\001 \001(\010"
  "\022\016\n\006vendor\030\002 \001(\t\022\021\n\tclusterID\030\003 \001(\003\022\030\n\020a"
  "utonomousSystem\030\004 \001(\005\022\022\n\nidentifier\030\005 \001("
  "\t\022\017\n\007address\030\006 \001(\t\022\014\n\004port\030\007 \001(\005\022\022\n\nsour"
  "cePort\030\010 \001(\005\022\020\n\010holdTime\030\t \001(\005\022j\n\017addres"
  "sFamilies\030\n \001(\0132Q.ssd_git.juniper.net.co"
  "ntrail.cn2.contrail.pkg.apis.core.v1alph"
  "a1.AddressFamilies\022f\n\010authData\030\013 \001(\0132T.s"
  "sd_git.juniper.net.contrail.cn2.contrail"
  ".pkg.apis.core.v1alpha1.AuthenticationDa"
  "ta\022\035\n\025localAutonomousSystem\030\014 \001(\005\022\022\n\nrou"
  "terType\030\r \001(\t\022\026\n\016gatewayAddress\030\016 \001(\t\022\032\n"
  "\022ipv6GatewayAddress\030\017 \001(\t\"\370\001\n\022BGPRouterR"
  "eference\022n\n\021resourceReference\030\001 \001(\0132S.ss"
  "d_git.juniper.net.contrail.cn2.contrail."
  "pkg.apis.core.v1alpha1.ResourceReference"
  "\022r\n\nattributes\030\002 \001(\0132^.ssd_git.juniper.n"
  "et.contrail.cn2.contrail.pkg.apis.core.v"
  "1alpha1.BGPRouterReferenceAttributes\"}\n\034"
  "BGPRouterReferenceAttributes\022]\n\007session\030"
  "\001 \003(\0132L.ssd_git.juniper.net.contrail.cn2"
  ".contrail.pkg.apis.core.v1alpha1.BGPSess"
  "ion\"\215\003\n\rBGPRouterSpec\022`\n\ncommonSpec\030\001 \001("
  "\0132L.ssd_git.juniper.net.contrail.cn2.con"
  "trail.pkg.apis.core.v1alpha1.CommonSpec\022"
  "3\n\006parent\030\002 \001(\0132#.k8s.io.api.core.v1.Obj"
  "ectReference\022q\n\023bgpRouterReferences\030\004 \003("
  "\0132T.ssd_git.juniper.net.contrail.cn2.con"
  "trail.pkg.apis.core.v1alpha1.BGPRouterRe"
  "ference\022r\n\023bgpRouterParameters\030\003 \001(\0132U.s"
  "sd_git.juniper.net.contrail.cn2.contrail"
  ".pkg.apis.core.v1alpha1.BGPRouterParamet"
  "ers\"w\n\017BGPRouterStatus\022d\n\014commonStatus\030\001"
  " \001(\0132N.ssd_git.juniper.net.contrail.cn2."
  "contrail.pkg.apis.core.v1alpha1.CommonSt"
  "atus\"\177\n\nBGPSession\022q\n\021sessionAttributes\030"
  "\001 \003(\0132V.ssd_git.juniper.net.contrail.cn2"
  ".contrail.pkg.apis.core.v1alpha1.BGPSess"
  "ionAttributes\"\367\004\n\024BGPSessionAttributes\022\021"
  "\n\tbgpRouter\030\001 \001(\t\022\021\n\tadminDown\030\002 \001(\010\022\017\n\007"
  "passive\030\003 \001(\010\022\022\n\nasOverride\030\004 \001(\010\022\020\n\010hol"
  "dTime\030\005 \001(\005\022\021\n\tloopCount\030\006 \001(\005\022\035\n\025localA"
  "utonomousSystem\030\007 \001(\005\022j\n\017addressFamilies"
  "\030\010 \001(\0132Q.ssd_git.juniper.net.contrail.cn"
  "2.contrail.pkg.apis.core.v1alpha1.Addres"
  "sFamilies\022f\n\010authData\030\t \001(\0132T.ssd_git.ju"
  "niper.net.contrail.cn2.contrail.pkg.apis"
  ".core.v1alpha1.AuthenticationData\022o\n\020fam"
  "ilyAttributes\030\n \003(\0132U.ssd_git.juniper.ne"
  "t.contrail.cn2.contrail.pkg.apis.core.v1"
  "alpha1.BGPFamilyAttributes\022\027\n\017privateAsA"
  "ction\030\013 \001(\t\022r\n\023routeOriginOverride\030\014 \001(\013"
  "2U.ssd_git.juniper.net.contrail.cn2.cont"
  "rail.pkg.apis.core.v1alpha1.RouteOriginO"
  "verride\"L\n\026BGPSessionIPAttributes\022\027\n\017bgp"
  "aasPrimaryIP\030\001 \001(\t\022\031\n\021bgpaasSecondaryIP\030"
  "\002 \001(\t\"v\n\nCommonSpec\022h\n\016contrailFqName\030\001 "
  "\001(\0132P.ssd_git.juniper.net.contrail.cn2.c"
  "ontrail.pkg.apis.core.v1alpha1.ContrailF"
  "qName\"z\n\014CommonStatus\022j\n\017reconcilerState"
  "\030\001 \001(\0132Q.ssd_git.juniper.net.contrail.cn"
  "2.contrail.pkg.apis.core.v1alpha1.Reconc"
  "ilerState\" \n\016ContrailFqName\022\016\n\006fqName\030\001 "
  "\003(\t\"0\n\027EncapsulationPriorities\022\025\n\rencaps"
  "ulation\030\001 \003(\t\".\n\026FirewallActionListType\022"
  "\024\n\014simpleAction\030\001 \001(\t\"\240\002\n\016FirewallPolicy"
  "\022B\n\010metadata\030\001 \001(\01320.k8s.io.apimachinery"
  ".pkg.apis.meta.v1.ObjectMeta\022b\n\004spec\030\002 \001"
  "(\0132T.ssd_git.juniper.net.contrail.cn2.co"
  "ntrail.pkg.apis.core.v1alpha1.FirewallPo"
  "licySpec\022f\n\006status\030\003 \001(\0132V.ssd_git.junip"
  "er.net.contrail.cn2.contrail.pkg.apis.co"
  "re.v1alpha1.FirewallPolicyStatus\"+\n\027Fire"
  "wallPolicyAttribute\022\020\n\010sequence\030\001 \001(\t\"\267\001"
  "\n\022FirewallPolicyList\022@\n\010metadata\030\001 \001(\0132."
  ".k8s.io.apimachinery.pkg.apis.meta.v1.Li"
  "stMeta\022_\n\005items\030\002 \003(\0132P.ssd_git.juniper."
  "net.contrail.cn2.contrail.pkg.apis.core."
  "v1alpha1.FirewallPolicy\"\355\001\n\027FirewallPoli"
  "cyReference\022n\n\021resourceReference\030\001 \001(\0132S"
  ".ssd_git.juniper.net.contrail.cn2.contra"
  "il.pkg.apis.core.v1alpha1.ResourceRefere"
  "nce\022b\n\nattributes\030\002 \001(\0132N.ssd_git.junipe"
  "r.net.contrail.cn2.contrail.pkg.apis.cor"
  "e.v1alpha1.APSAttribute\"\345\001\n\022FirewallPoli"
  "cySpec\022`\n\ncommonSpec\030\001 \001(\0132L.ssd_git.jun"
  "iper.net.contrail.cn2.contrail.pkg.apis."
  "core.v1alpha1.CommonSpec\022m\n\014firewallRule"
  "\030\003 \003(\0132W.ssd_git.juniper.net.contrail.cn"
  "2.contrail.pkg.apis.core.v1alpha1.Firewa"
  "llRuleReference\"|\n\024FirewallPolicyStatus\022"
  "d\n\014commonStatus\030\001 \001(\0132N.ssd_git.juniper."
  "net.contrail.cn2.contrail.pkg.apis.core."
  "v1alpha1.CommonStatus\"\232\002\n\014FirewallRule\022B"
  "\n\010metadata\030\001 \001(\01320.k8s.io.apimachinery.p"
  "kg.apis.meta.v1.ObjectMeta\022`\n\004spec\030\002 \001(\013"
  "2R.ssd_git.juniper.net.contrail.cn2.cont"
  "rail.pkg.apis.core.v1alpha1.FirewallRule"
  "Spec\022d\n\006status\030\003 \001(\0132T.ssd_git.juniper.n"
  "et.contrail.cn2.contrail.pkg.apis.core.v"
  "1alpha1.FirewallRuleStatus\"\275\001\n\030FirewallR"
  "uleEndpointType\022`\n\006subnet\030\001 \001(\0132P.ssd_gi"
  "t.juniper.net.contrail.cn2.contrail.pkg."
  "apis.core.v1alpha1.FirewallSubnet\022\024\n\014add"
  "ressGroup\030\003 \001(\t\022\014\n\004tags\030\004 \003(\t\022\016\n\006tagIds\030"
  "\005 \003(\003\022\013\n\003any\030\006 \001(\010\"\263\001\n\020FirewallRuleList\022"
  "@\n\010metadata\030\001 \001(\0132..k8s.io.apimachinery."
  "pkg.apis.meta.v1.ListMeta\022]\n\005items\030\002 \003(\013"
  "2N.ssd_git.juniper.net.contrail.cn2.cont"
  "rail.pkg.apis.core.v1alpha1.FirewallRule"
  "\"\366\001\n\025FirewallRuleReference\022n\n\021resourceRe"
  "ference\030\001 \001(\0132S.ssd_git.juniper.net.cont"
  "rail.cn2.contrail.pkg.apis.core.v1alpha1"
  ".ResourceReference\022m\n\nattributes\030\002 \001(\0132Y"
  ".ssd_git.juniper.net.contrail.cn2.contra"
  "il.pkg.apis.core.v1alpha1.FirewallPolicy"
  "Attribute\"\306\006\n\020FirewallRuleSpec\022`\n\ncommon"
  "Spec\030\001 \001(\0132L.ssd_git.juniper.net.contrai"
  "l.cn2.contrail.pkg.apis.core.v1alpha1.Co"
  "mmonSpec\022r\n\025addressGroupReference\030\002 \001(\0132"
  "S.ssd_git.juniper.net.contrail.cn2.contr"
  "ail.pkg.apis.core.v1alpha1.ResourceRefer"
  "ence\022l\n\nactionList\030\003 \001(\0132X.ssd_git.junip"
  "er.net.contrail.cn2.contrail.pkg.apis.co"
  "re.v1alpha1.FirewallActionListType\022f\n\007se"
  "rvice\030\004 \001(\0132U.ssd_git.juniper.net.contra"
  "il.cn2.contrail.pkg.apis.core.v1alpha1.F"
  "irewallServiceType\022m\n\tEndpoint1\030\005 \001(\0132Z."
  "ssd_git.juniper.net.contrail.cn2.contrai"
  "l.pkg.apis.core.v1alpha1.FirewallRuleEnd"
  "pointType\022m\n\tEndpoint2\030\006 \001(\0132Z.ssd_git.j"
  "uniper.net.contrail.cn2.contrail.pkg.api"
  "s.core.v1alpha1.FirewallRuleEndpointType"
  "\022\021\n\tmatchTags\030\007 \003(\t\022\026\n\016matchTagsTypes\030\010 "
  "\003(\003\022\021\n\tdirection\030\t \001(\t\022j\n\rtagReferences\030"
  "\n \003(\0132S.ssd_git.juniper.net.contrail.cn2"
  ".contrail.pkg.apis.core.v1alpha1.Resourc"
  "eReference\"z\n\022FirewallRuleStatus\022d\n\014comm"
  "onStatus\030\001 \001(\0132N.ssd_git.juniper.net.con"
  "trail.cn2.contrail.pkg.apis.core.v1alpha"
  "1.CommonStatus\"\202\002\n\023FirewallServiceType\022\020"
  "\n\010protocol\030\001 \001(\t\022\022\n\nprotocolId\030\002 \001(\003\022_\n\013"
  "sourcePorts\030\003 \001(\0132J.ssd_git.juniper.net."
  "contrail.cn2.contrail.pkg.apis.core.v1al"
  "pha1.PortType\022d\n\020destinationPorts\030\004 \001(\0132"
  "J.ssd_git.juniper.net.contrail.cn2.contr"
  "ail.pkg.apis.core.v1alpha1.PortType\"i\n\016F"
  "irewallSubnet\022\020\n\010ipPrefix\030\001 \001(\t\022E\n\013ipPre"
  "fixLen\030\002 \001(\01320.k8s.io.apimachinery.pkg.u"
  "til.intstr.IntOrString\"\224\002\n\nFloatingIP\022B\n"
  "\010metadata\030\001 \001(\01320.k8s.io.apimachinery.pk"
  "g.apis.meta.v1.ObjectMeta\022^\n\004spec\030\002 \001(\0132"
  "P.ssd_git.juniper.net.contrail.cn2.contr"
  "ail.pkg.apis.core.v1alpha1.FloatingIPSpe"
  "c\022b\n\006status\030\003 \001(\0132R.ssd_git.juniper.net."
  "contrail.cn2.contrail.pkg.apis.core.v1al"
  "pha1.FloatingIPStatus\"\257\001\n\016FloatingIPList"
  "\022@\n\010metadata\030\001 \001(\0132..k8s.io.apimachinery"
  ".pkg.apis.meta.v1.ListMeta\022[\n\005items\030\002 \003("
  "\0132L.ssd_git.juniper.net.contrail.cn2.con"
  "trail.pkg.apis.core.v1alpha1.FloatingIP\""
  "\213\001\n\026FloatingIPPortMappings\022q\n\014portMappin"
  "gs\030\001 \003(\0132[.ssd_git.juniper.net.contrail."
  "cn2.contrail.pkg.apis.core.v1alpha1.Floa"
  "tingIPPortPortMapping\"O\n\031FloatingIPPortP"
  "ortMapping\022\017\n\007srcPort\030\001 \001(\005\022\017\n\007dstPort\030\002"
  " \001(\005\022\020\n\010protocol\030\003 \001(\t\"\206\004\n\016FloatingIPSpe"
  "c\022`\n\ncommonSpec\030\001 \001(\0132L.ssd_git.juniper."
  "net.contrail.cn2.contrail.pkg.apis.core."
  "v1alpha1.CommonSpec\022\031\n\021floatingIPAddress"
  "\030\002 \001(\t\022x\n\026floatingIPPortMappings\030\003 \001(\0132X"
  ".ssd_git.juniper.net.contrail.cn2.contra"
  "il.pkg.apis.core.v1alpha1.FloatingIPPort"
  "Mappings\022\"\n\032floatingIPTrafficDirection\030\004"
  " \001(\t\0223\n\006parent\030\005 \001(\0132#.k8s.io.api.core.v"
  "1.ObjectReference\022~\n!virtualMachineInter"
  "faceReferences\030\007 \003(\0132S.ssd_git.juniper.n"
  "et.contrail.cn2.contrail.pkg.apis.core.v"
  "1alpha1.ResourceReference\022$\n\034floatingIPP"
  "ortMappingsEnable\030\010 \001(\010\"\346\001\n\020FloatingIPSt"
  "atus\022d\n\014commonStatus\030\001 \001(\0132N.ssd_git.jun"
  "iper.net.contrail.cn2.contrail.pkg.apis."
  "core.v1alpha1.CommonStatus\022l\n\017subnetRefe"
  "rence\030\002 \001(\0132S.ssd_git.juniper.net.contra"
  "il.cn2.contrail.pkg.apis.core.v1alpha1.R"
  "esourceReference\"\254\002\n\022GlobalSystemConfig\022"
  "B\n\010metadata\030\001 \001(\01320.k8s.io.apimachinery."
  "pkg.apis.meta.v1.ObjectMeta\022f\n\004spec\030\002 \001("
  "\0132X.ssd_git.juniper.net.contrail.cn2.con"
  "trail.pkg.apis.core.v1alpha1.GlobalSyste"
  "mConfigSpec\022j\n\006status\030\003 \001(\0132Z.ssd_git.ju"
  "niper.net.contrail.cn2.contrail.pkg.apis"
  ".core.v1alpha1.GlobalSystemConfigStatus\""
  "\277\001\n\026GlobalSystemConfigList\022@\n\010metadata\030\001"
  " \001(\0132..k8s.io.apimachinery.pkg.apis.meta"
  ".v1.ListMeta\022c\n\005items\030\002 \003(\0132T.ssd_git.ju"
  "niper.net.contrail.cn2.contrail.pkg.apis"
  ".core.v1alpha1.GlobalSystemConfig\"\317\002\n\026Gl"
  "obalSystemConfigSpec\022`\n\ncommonSpec\030\001 \001(\013"
  "2L.ssd_git.juniper.net.contrail.cn2.cont"
  "rail.pkg.apis.core.v1alpha1.CommonSpec\022\026"
  "\n\016enable4bytesAS\030\002 \001(\010\022\030\n\020autonomousSyst"
  "em\030\003 \001(\005\022p\n\023bgpRouterReferences\030\004 \003(\0132S."
  "ssd_git.juniper.net.contrail.cn2.contrai"
  "l.pkg.apis.core.v1alpha1.ResourceReferen"
  "ce\022\024\n\014ibgpAutoMesh\030\005 \001(\010\022\031\n\021defaultEnabl"
  "eSNAT\030\006 \001(\010\"\200\001\n\030GlobalSystemConfigStatus"
  "\022d\n\014commonStatus\030\001 \001(\0132N.ssd_git.juniper"
  ".net.contrail.cn2.contrail.pkg.apis.core"
  ".v1alpha1.CommonStatus\"\257\002\n\023GlobalVrouter"
  "Config\022B\n\010metadata\030\001 \001(\01320.k8s.io.apimac"
  "hinery.pkg.apis.meta.v1.ObjectMeta\022g\n\004sp"
  "ec\030\002 \001(\0132Y.ssd_git.juniper.net.contrail."
  "cn2.contrail.pkg.apis.core.v1alpha1.Glob"
  "alVrouterConfigSpec\022k\n\006status\030\003 \001(\0132[.ss"
  "d_git.juniper.net.contrail.cn2.contrail."
  "pkg.apis.core.v1alpha1.GlobalVrouterConf"
  "igStatus\"\301\001\n\027GlobalVrouterConfigList\022@\n\010"
  "metadata\030\001 \001(\0132..k8s.io.apimachinery.pkg"
  ".apis.meta.v1.ListMeta\022d\n\005items\030\002 \003(\0132U."
  "ssd_git.juniper.net.contrail.cn2.contrai"
  "l.pkg.apis.core.v1alpha1.GlobalVrouterCo"
  "nfig\"\252\004\n\027GlobalVrouterConfigSpec\022`\n\ncomm"
  "onSpec\030\001 \001(\0132L.ssd_git.juniper.net.contr"
  "ail.cn2.contrail.pkg.apis.core.v1alpha1."
  "CommonSpec\0223\n\006parent\030\002 \001(\0132#.k8s.io.api."
  "core.v1.ObjectReference\022z\n\027encapsulation"
  "Priorities\030\003 \001(\0132Y.ssd_git.juniper.net.c"
  "ontrail.cn2.contrail.pkg.apis.core.v1alp"
  "ha1.EncapsulationPriorities\022n\n\021linklocal"
  "Services\030\004 \001(\0132S.ssd_git.juniper.net.con"
  "trail.cn2.contrail.pkg.apis.core.v1alpha"
  "1.LinklocalServices\022t\n\024portTranslationPo"
  "ols\030\005 \001(\0132V.ssd_git.juniper.net.contrail"
  ".cn2.contrail.pkg.apis.core.v1alpha1.Por"
  "tTranslationPools\022\026\n\016flowExportRate\030\006 \001("
  "\005\"\201\001\n\031GlobalVrouterConfigStatus\022d\n\014commo"
  "nStatus\030\001 \001(\0132N.ssd_git.juniper.net.cont"
  "rail.cn2.contrail.pkg.apis.core.v1alpha1"
  ".CommonStatus\"#\n\007IPRange\022\014\n\004from\030\001 \001(\t\022\n"
  "\n\002to\030\002 \001(\t\"\230\001\n\032ImportVirtualNetworkRoute"
  "r\022z\n\025virtualNetworkRouters\030\001 \003(\0132[.ssd_g"
  "it.juniper.net.contrail.cn2.contrail.pkg"
  ".apis.core.v1alpha1.VirtualNetworkRouter"
  "Entry\"\224\002\n\nInstanceIP\022B\n\010metadata\030\001 \001(\01320"
  ".k8s.io.apimachinery.pkg.apis.meta.v1.Ob"
  "jectMeta\022^\n\004spec\030\002 \001(\0132P.ssd_git.juniper"
  ".net.contrail.cn2.contrail.pkg.apis.core"
  ".v1alpha1.InstanceIPSpec\022b\n\006status\030\003 \001(\013"
  "2R.ssd_git.juniper.net.contrail.cn2.cont"
  "rail.pkg.apis.core.v1alpha1.InstanceIPSt"
  "atus\"\257\001\n\016InstanceIPList\022@\n\010metadata\030\001 \001("
  "\0132..k8s.io.apimachinery.pkg.apis.meta.v1"
  ".ListMeta\022[\n\005items\030\002 \003(\0132L.ssd_git.junip"
  "er.net.contrail.cn2.contrail.pkg.apis.co"
  "re.v1alpha1.InstanceIP\"\300\003\n\016InstanceIPSpe"
  "c\022`\n\ncommonSpec\030\001 \001(\0132L.ssd_git.juniper."
  "net.contrail.cn2.contrail.pkg.apis.core."
  "v1alpha1.CommonSpec\022\031\n\021instanceIPAddress"
  "\030\002 \001(\t\022\030\n\020instanceIPFamily\030\003 \001(\t\022\014\n\004cidr"
  "\030\004 \001(\t\022t\n\027virtualNetworkReference\030\005 \001(\0132"
  "S.ssd_git.juniper.net.contrail.cn2.contr"
  "ail.pkg.apis.core.v1alpha1.ResourceRefer"
  "ence\022~\n!virtualMachineInterfaceReference"
  "s\030\006 \003(\0132S.ssd_git.juniper.net.contrail.c"
  "n2.contrail.pkg.apis.core.v1alpha1.Resou"
  "rceReference\022\023\n\013ipRangeKeys\030\007 \003(\t\"\346\001\n\020In"
  "stanceIPStatus\022d\n\014commonStatus\030\001 \001(\0132N.s"
  "sd_git.juniper.net.contrail.cn2.contrail"
  ".pkg.apis.core.v1alpha1.CommonStatus\022l\n\017"
  "subnetReference\030\002 \001(\0132S.ssd_git.juniper."
  "net.contrail.cn2.contrail.pkg.apis.core."
  "v1alpha1.ResourceReference\"\313\001\n\031Linklocal"
  "ServiceEntryType\022\036\n\026ipFabricDNSServiceNa"
  "me\030\001 \001(\t\022\031\n\021ipFabricServiceIP\030\002 \003(\t\022\033\n\023i"
  "pFabricServicePort\030\003 \001(\005\022\032\n\022linklocalSer"
  "viceIP\030\004 \001(\t\022\034\n\024linklocalServiceName\030\005 \001"
  "(\t\022\034\n\024linklocalServicePort\030\006 \001(\005\"\217\001\n\021Lin"
  "klocalServices\022z\n\025linklocalServiceEntry\030"
  "\001 \003(\0132[.ssd_git.juniper.net.contrail.cn2"
  ".contrail.pkg.apis.core.v1alpha1.Linkloc"
  "alServiceEntryType\"\"\n\014MACAddresses\022\022\n\nma"
  "cAddress\030\001 \003(\t\".\n\031PolicyBasedForwardingR"
  "ule\022\021\n\tdirection\030\001 \001(\t\"/\n\tPortRange\022\021\n\ts"
  "tartPort\030\001 \001(\005\022\017\n\007endPort\030\002 \001(\005\"\232\001\n\023Port"
  "TranslationPool\022\020\n\010protocol\030\001 \001(\t\022^\n\tpor"
  "tRange\030\002 \001(\0132K.ssd_git.juniper.net.contr"
  "ail.cn2.contrail.pkg.apis.core.v1alpha1."
  "PortRange\022\021\n\tportCount\030\003 \001(\005\"|\n\024PortTran"
  "slationPools\022d\n\005pools\030\001 \003(\0132U.ssd_git.ju"
  "niper.net.contrail.cn2.contrail.pkg.apis"
  ".core.v1alpha1.PortTranslationPool\".\n\010Po"
  "rtType\022\021\n\tstartPort\030\001 \001(\003\022\017\n\007endPort\030\002 \001"
  "(\003\"q\n\005Range\022\013\n\003key\030\001 \001(\t\022[\n\010ipRanges\030\002 \003"
  "(\0132I.ssd_git.juniper.net.contrail.cn2.co"
  "ntrail.pkg.apis.core.v1alpha1.IPRange\"5\n"
  "\017ReconcilerState\022\r\n\005state\030\001 \001(\t\022\023\n\013obser"
  "vation\030\002 \001(\t\"\273\001\n\021ResourceReference\022<\n\017ob"
  "jectReference\030\001 \001(\0132#.k8s.io.api.core.v1"
  ".ObjectReference\022h\n\016contrailFqName\030\002 \001(\013"
  "2P.ssd_git.juniper.net.contrail.cn2.cont"
  "rail.pkg.apis.core.v1alpha1.ContrailFqNa"
  "me\"=\n\023RouteOriginOverride\022\026\n\016originOverr"
  "ide\030\001 \001(\010\022\016\n\006origin\030\002 \001(\t\"\227\002\n\013RouteTarge"
  "t\022B\n\010metadata\030\001 \001(\01320.k8s.io.apimachiner"
  "y.pkg.apis.meta.v1.ObjectMeta\022_\n\004spec\030\002 "
  "\001(\0132Q.ssd_git.juniper.net.contrail.cn2.c"
  "ontrail.pkg.apis.core.v1alpha1.RouteTarg"
  "etSpec\022c\n\006status\030\003 \001(\0132S.ssd_git.juniper"
  ".net.contrail.cn2.contrail.pkg.apis.core"
  ".v1alpha1.RouteTargetStatus\"\261\001\n\017RouteTar"
  "getList\022@\n\010metadata\030\001 \001(\0132..k8s.io.apima"
  "chinery.pkg.apis.meta.v1.ListMeta\022\\\n\005ite"
  "ms\030\002 \003(\0132M.ssd_git.juniper.net.contrail."
  "cn2.contrail.pkg.apis.core.v1alpha1.Rout"
  "eTarget\"\374\001\n\024RouteTargetReference\022n\n\021reso"
  "urceReference\030\001 \001(\0132S.ssd_git.juniper.ne"
  "t.contrail.cn2.contrail.pkg.apis.core.v1"
  "alpha1.ResourceReference\022t\n\nattributes\030\002"
  " \001(\0132`.ssd_git.juniper.net.contrail.cn2."
  "contrail.pkg.apis.core.v1alpha1.RouteTar"
  "getReferenceAttributes\"6\n\036RouteTargetRef"
  "erenceAttributes\022\024\n\014importExport\030\001 \001(\t\"s"
  "\n\017RouteTargetSpec\022`\n\ncommonSpec\030\001 \001(\0132L."
  "ssd_git.juniper.net.contrail.cn2.contrai"
  "l.pkg.apis.core.v1alpha1.CommonSpec\"y\n\021R"
  "outeTargetStatus\022d\n\014commonStatus\030\001 \001(\0132N"
  ".ssd_git.juniper.net.contrail.cn2.contra"
  "il.pkg.apis.core.v1alpha1.CommonStatus\"\243"
  "\002\n\017RoutingInstance\022B\n\010metadata\030\001 \001(\01320.k"
  "8s.io.apimachinery.pkg.apis.meta.v1.Obje"
  "ctMeta\022c\n\004spec\030\002 \001(\0132U.ssd_git.juniper.n"
  "et.contrail.cn2.contrail.pkg.apis.core.v"
  "1alpha1.RoutingInstanceSpec\022g\n\006status\030\003 "
  "\001(\0132W.ssd_git.juniper.net.contrail.cn2.c"
  "ontrail.pkg.apis.core.v1alpha1.RoutingIn"
  "stanceStatus\"\271\001\n\023RoutingInstanceList\022@\n\010"
  "metadata\030\001 \001(\0132..k8s.io.apimachinery.pkg"
  ".apis.meta.v1.ListMeta\022`\n\005items\030\002 \003(\0132Q."
  "ssd_git.juniper.net.contrail.cn2.contrai"
  "l.pkg.apis.core.v1alpha1.RoutingInstance"
  "\"\373\001\n\030RoutingInstanceReference\022n\n\021resourc"
  "eReference\030\001 \001(\0132S.ssd_git.juniper.net.c"
  "ontrail.cn2.contrail.pkg.apis.core.v1alp"
  "ha1.ResourceReference\022o\n\nattributes\030\002 \001("
  "\0132[.ssd_git.juniper.net.contrail.cn2.con"
  "trail.pkg.apis.core.v1alpha1.PolicyBased"
  "ForwardingRule\"\243\002\n\023RoutingInstanceSpec\022`"
  "\n\ncommonSpec\030\001 \001(\0132L.ssd_git.juniper.net"
  ".contrail.cn2.contrail.pkg.apis.core.v1a"
  "lpha1.CommonSpec\0223\n\006parent\030\002 \001(\0132#.k8s.i"
  "o.api.core.v1.ObjectReference\022u\n\025routeTa"
  "rgetReferences\030\003 \003(\0132V.ssd_git.juniper.n"
  "et.contrail.cn2.contrail.pkg.apis.core.v"
  "1alpha1.RouteTargetReference\"\252\005\n\025Routing"
  "InstanceStatus\022d\n\014commonStatus\030\001 \001(\0132N.s"
  "sd_git.juniper.net.contrail.cn2.contrail"
  ".pkg.apis.core.v1alpha1.CommonStatus\022\021\n\t"
  "isDefault\030\002 \001(\010\022!\n\031routingInstanceFabric"
  "SNAT\030\003 \001(\010\022{\n\033defaultRouteTargetReferenc"
  "e\030\004 \001(\0132V.ssd_git.juniper.net.contrail.c"
  "n2.contrail.pkg.apis.core.v1alpha1.Route"
  "TargetReference\022\272\001\n)virtualNetworkRouter"
  "RouteTargetReferences\030\005 \003(\0132\206\001.ssd_git.j"
  "uniper.net.contrail.cn2.contrail.pkg.api"
  "s.core.v1alpha1.RoutingInstanceStatus.Vi"
  "rtualNetworkRouterRouteTargetReferencesE"
  "ntry\032\272\001\n.VirtualNetworkRouterRouteTarget"
  "ReferencesEntry\022\013\n\003key\030\001 \001(\t\022w\n\005value\030\002 "
  "\001(\0132h.ssd_git.juniper.net.contrail.cn2.c"
  "ontrail.pkg.apis.core.v1alpha1.VirtualNe"
  "tworkRouteTargetReferenceList:\0028\001\"\210\002\n\006Su"
  "bnet\022B\n\010metadata\030\001 \001(\01320.k8s.io.apimachi"
  "nery.pkg.apis.meta.v1.ObjectMeta\022Z\n\004spec"
  "\030\002 \001(\0132L.ssd_git.juniper.net.contrail.cn"
  "2.contrail.pkg.apis.core.v1alpha1.Subnet"
  "Spec\022^\n\006status\030\003 \001(\0132N.ssd_git.juniper.n"
  "et.contrail.cn2.contrail.pkg.apis.core.v"
  "1alpha1.SubnetStatus\"\247\001\n\nSubnetList\022@\n\010m"
  "etadata\030\001 \001(\0132..k8s.io.apimachinery.pkg."
  "apis.meta.v1.ListMeta\022W\n\005items\030\002 \003(\0132H.s"
  "sd_git.juniper.net.contrail.cn2.contrail"
  ".pkg.apis.core.v1alpha1.Subnet\"\357\001\n\017Subne"
  "tReference\022n\n\021resourceReference\030\001 \001(\0132S."
  "ssd_git.juniper.net.contrail.cn2.contrai"
  "l.pkg.apis.core.v1alpha1.ResourceReferen"
  "ce\022l\n\nattributes\030\002 \001(\0132X.ssd_git.juniper"
  ".net.contrail.cn2.contrail.pkg.apis.core"
  ".v1alpha1.BGPSessionIPAttributes\"\340\002\n\nSub"
  "netSpec\022`\n\ncommonSpec\030\001 \001(\0132L.ssd_git.ju"
  "niper.net.contrail.cn2.contrail.pkg.apis"
  ".core.v1alpha1.CommonSpec\022\014\n\004cidr\030\003 \001(\t\022"
  "\026\n\016defaultGateway\030\004 \001(\t\022\026\n\016dnsNameserver"
  "s\030\005 \003(\t\022W\n\006ranges\030\006 \003(\0132G.ssd_git.junipe"
  "r.net.contrail.cn2.contrail.pkg.apis.cor"
  "e.v1alpha1.Range\022%\n\035disableBGPaaSIPAutoA"
  "llocation\030\007 \001(\010\022\027\n\017bgpaasPrimaryIP\030\010 \001(\t"
  "\022\031\n\021bgpaasSecondaryIP\030\t \001(\t\"\236\001\n\014SubnetSt"
  "atus\022d\n\014commonStatus\030\001 \001(\0132N.ssd_git.jun"
  "iper.net.contrail.cn2.contrail.pkg.apis."
  "core.v1alpha1.CommonStatus\022\017\n\007ipCount\030\002 "
  "\001(\003\022\027\n\017allocationUsage\030\003 \001(\t\"\377\001\n\003Tag\022B\n\010"
  "metadata\030\001 \001(\01320.k8s.io.apimachinery.pkg"
  ".apis.meta.v1.ObjectMeta\022W\n\004spec\030\002 \001(\0132I"
  ".ssd_git.juniper.net.contrail.cn2.contra"
  "il.pkg.apis.core.v1alpha1.TagSpec\022[\n\006sta"
  "tus\030\003 \001(\0132K.ssd_git.juniper.net.contrail"
  ".cn2.contrail.pkg.apis.core.v1alpha1.Tag"
  "Status\"\241\001\n\007TagList\022@\n\010metadata\030\001 \001(\0132..k"
  "8s.io.apimachinery.pkg.apis.meta.v1.List"
  "Meta\022T\n\005items\030\002 \003(\0132E.ssd_git.juniper.ne"
  "t.contrail.cn2.contrail.pkg.apis.core.v1"
  "alpha1.Tag\"\201\002\n\007TagSpec\022`\n\ncommonSpec\030\001 \001"
  "(\0132L.ssd_git.juniper.net.contrail.cn2.co"
  "ntrail.pkg.apis.core.v1alpha1.CommonSpec"
  "\022\023\n\013tagTypeName\030\002 \001(\t\022\020\n\010tagValue\030\003 \001(\t\022"
  "m\n\020tagTypeReference\030\004 \001(\0132S.ssd_git.juni"
  "per.net.contrail.cn2.contrail.pkg.apis.c"
  "ore.v1alpha1.ResourceReference\"\200\001\n\tTagSt"
  "atus\022d\n\014commonStatus\030\001 \001(\0132N.ssd_git.jun"
  "iper.net.contrail.cn2.contrail.pkg.apis."
  "core.v1alpha1.CommonStatus\022\r\n\005tagId\030\002 \001("
  "\t\"\213\002\n\007TagType\022B\n\010metadata\030\001 \001(\01320.k8s.io"
  ".apimachinery.pkg.apis.meta.v1.ObjectMet"
  "a\022[\n\004spec\030\002 \001(\0132M.ssd_git.juniper.net.co"
  "ntrail.cn2.contrail.pkg.apis.core.v1alph"
  "a1.TagTypeSpec\022_\n\006status\030\003 \001(\0132O.ssd_git"
  ".juniper.net.contrail.cn2.contrail.pkg.a"
  "pis.core.v1alpha1.TagTypeStatus\"\251\001\n\013TagT"
  "ypeList\022@\n\010metadata\030\001 \001(\0132..k8s.io.apima"
  "chinery.pkg.apis.meta.v1.ListMeta\022X\n\005ite"
  "ms\030\002 \003(\0132I.ssd_git.juniper.net.contrail."
  "cn2.contrail.pkg.apis.core.v1alpha1.TagT"
  "ype\"o\n\013TagTypeSpec\022`\n\ncommonSpec\030\001 \001(\0132L"
  ".ssd_git.juniper.net.contrail.cn2.contra"
  "il.pkg.apis.core.v1alpha1.CommonSpec\"\210\001\n"
  "\rTagTypeStatus\022d\n\014commonStatus\030\001 \001(\0132N.s"
  "sd_git.juniper.net.contrail.cn2.contrail"
  ".pkg.apis.core.v1alpha1.CommonStatus\022\021\n\t"
  "tagTypeId\030\002 \001(\t\"\240\002\n\016VirtualMachine\022B\n\010me"
  "tadata\030\001 \001(\01320.k8s.io.apimachinery.pkg.a"
  "pis.meta.v1.ObjectMeta\022b\n\004spec\030\002 \001(\0132T.s"
  "sd_git.juniper.net.contrail.cn2.contrail"
  ".pkg.apis.core.v1alpha1.VirtualMachineSp"
  "ec\022f\n\006status\030\003 \001(\0132V.ssd_git.juniper.net"
  ".contrail.cn2.contrail.pkg.apis.core.v1a"
  "lpha1.VirtualMachineStatus\"\273\002\n\027VirtualMa"
  "chineInterface\022B\n\010metadata\030\001 \001(\01320.k8s.i"
  "o.apimachinery.pkg.apis.meta.v1.ObjectMe"
  "ta\022k\n\004spec\030\002 \001(\0132].ssd_git.juniper.net.c"
  "ontrail.cn2.contrail.pkg.apis.core.v1alp"
  "ha1.VirtualMachineInterfaceSpec\022o\n\006statu"
  "s\030\003 \001(\0132_.ssd_git.juniper.net.contrail.c"
  "n2.contrail.pkg.apis.core.v1alpha1.Virtu"
  "alMachineInterfaceStatus\"\311\001\n\033VirtualMach"
  "ineInterfaceList\022@\n\010metadata\030\001 \001(\0132..k8s"
  ".io.apimachinery.pkg.apis.meta.v1.ListMe"
  "ta\022h\n\005items\030\002 \003(\0132Y.ssd_git.juniper.net."
  "contrail.cn2.contrail.pkg.apis.core.v1al"
  "pha1.VirtualMachineInterface\"@\n!VirtualM"
  "achineInterfaceProperties\022\033\n\023subInterfac"
  "eVlanTag\030\001 \001(\r\"\302\010\n\033VirtualMachineInterfa"
  "ceSpec\022`\n\ncommonSpec\030\001 \001(\0132L.ssd_git.jun"
  "iper.net.contrail.cn2.contrail.pkg.apis."
  "core.v1alpha1.CommonSpec\0223\n\006parent\030\002 \001(\013"
  "2#.k8s.io.api.core.v1.ObjectReference\022{\n"
  "#virtualMachineInterfaceMacAddresses\030\003 \001"
  "(\0132N.ssd_git.juniper.net.contrail.cn2.co"
  "ntrail.pkg.apis.core.v1alpha1.MACAddress"
  "es\022t\n\027virtualNetworkReference\030\004 \001(\0132S.ss"
  "d_git.juniper.net.contrail.cn2.contrail."
  "pkg.apis.core.v1alpha1.ResourceReference"
  "\022u\n\030virtualMachineReferences\030\005 \003(\0132S.ssd"
  "_git.juniper.net.contrail.cn2.contrail.p"
  "kg.apis.core.v1alpha1.ResourceReference\022"
  ",\n$virtualMachineInterfaceDisablePolicy\030"
  "\006 \001(\010\022r\n\023allowedAddressPairs\030\007 \001(\0132U.ssd"
  "_git.juniper.net.contrail.cn2.contrail.p"
  "kg.apis.core.v1alpha1.AllowedAddressPair"
  "s\022\033\n\023portSecurityEnabled\030\010 \001(\010\022~\n!virtua"
  "lMachineInterfaceReferences\030\t \003(\0132S.ssd_"
  "git.juniper.net.contrail.cn2.contrail.pk"
  "g.apis.core.v1alpha1.ResourceReference\022w"
  "\n\nproperties\030\n \001(\0132c.ssd_git.juniper.net"
  ".contrail.cn2.contrail.pkg.apis.core.v1a"
  "lpha1.VirtualMachineInterfaceProperties\022"
  "j\n\rtagReferences\030\013 \003(\0132S.ssd_git.juniper"
  ".net.contrail.cn2.contrail.pkg.apis.core"
  ".v1alpha1.ResourceReference\"\365\002\n\035VirtualM"
  "achineInterfaceStatus\022d\n\014commonStatus\030\001 "
  "\001(\0132N.ssd_git.juniper.net.contrail.cn2.c"
  "ontrail.pkg.apis.core.v1alpha1.CommonSta"
  "tus\022}\n\031routingInstanceReferences\030\003 \003(\0132Z"
  ".ssd_git.juniper.net.contrail.cn2.contra"
  "il.pkg.apis.core.v1alpha1.RoutingInstanc"
  "eReference\022o\n\022bgpRouterReference\030\004 \001(\0132S"
  ".ssd_git.juniper.net.contrail.cn2.contra"
  "il.pkg.apis.core.v1alpha1.ResourceRefere"
  "nce\"\267\001\n\022VirtualMachineList\022@\n\010metadata\030\001"
  " \001(\0132..k8s.io.apimachinery.pkg.apis.meta"
  ".v1.ListMeta\022_\n\005items\030\002 \003(\0132P.ssd_git.ju"
  "niper.net.contrail.cn2.contrail.pkg.apis"
  ".core.v1alpha1.VirtualMachine\"\322\001\n\022Virtua"
  "lMachineSpec\022`\n\ncommonSpec\030\001 \001(\0132L.ssd_g"
  "it.juniper.net.contrail.cn2.contrail.pkg"
  ".apis.core.v1alpha1.CommonSpec\022\022\n\nserver"
  "Type\030\002 \001(\t\022\022\n\nserverName\030\003 \001(\t\022\027\n\017server"
  "Namespace\030\004 \001(\t\022\031\n\021serverClusterName\030\005 \001"
  "(\t\"|\n\024VirtualMachineStatus\022d\n\014commonStat"
  "us\030\001 \001(\0132N.ssd_git.juniper.net.contrail."
  "cn2.contrail.pkg.apis.core.v1alpha1.Comm"
  "onStatus\"\240\002\n\016VirtualNetwork\022B\n\010metadata\030"
  "\001 \001(\01320.k8s.io.apimachinery.pkg.apis.met"
  "a.v1.ObjectMeta\022b\n\004spec\030\002 \001(\0132T.ssd_git."
  "juniper.net.contrail.cn2.contrail.pkg.ap"
  "is.core.v1alpha1.VirtualNetworkSpec\022f\n\006s"
  "tatus\030\003 \001(\0132V.ssd_git.juniper.net.contra"
  "il.cn2.contrail.pkg.apis.core.v1alpha1.V"
  "irtualNetworkStatus\"\267\001\n\022VirtualNetworkLi"
  "st\022@\n\010metadata\030\001 \001(\0132..k8s.io.apimachine"
  "ry.pkg.apis.meta.v1.ListMeta\022_\n\005items\030\002 "
  "\003(\0132P.ssd_git.juniper.net.contrail.cn2.c"
  "ontrail.pkg.apis.core.v1alpha1.VirtualNe"
  "twork\"\237\001\n&VirtualNetworkRouteTargetRefer"
  "enceList\022u\n\025routeTargetReferences\030\001 \003(\0132"
  "V.ssd_git.juniper.net.contrail.cn2.contr"
  "ail.pkg.apis.core.v1alpha1.RouteTargetRe"
  "ference\"\262\002\n\024VirtualNetworkRouter\022B\n\010meta"
  "data\030\001 \001(\01320.k8s.io.apimachinery.pkg.api"
  "s.meta.v1.ObjectMeta\022h\n\004spec\030\002 \001(\0132Z.ssd"
  "_git.juniper.net.contrail.cn2.contrail.p"
  "kg.apis.core.v1alpha1.VirtualNetworkRout"
  "erSpec\022l\n\006status\030\003 \001(\0132\\.ssd_git.juniper"
  ".net.contrail.cn2.contrail.pkg.apis.core"
  ".v1alpha1.VirtualNetworkRouterStatus\"\306\001\n"
  "\031VirtualNetworkRouterEntry\022Y\n\034virtualNet"
  "workRouterSelector\030\001 \001(\01323.k8s.io.apimac"
  "hinery.pkg.apis.meta.v1.LabelSelector\022N\n"
  "\021namespaceSelector\030\002 \001(\01323.k8s.io.apimac"
  "hinery.pkg.apis.meta.v1.LabelSelector\"\303\001"
  "\n\030VirtualNetworkRouterList\022@\n\010metadata\030\001"
  " \001(\0132..k8s.io.apimachinery.pkg.apis.meta"
  ".v1.ListMeta\022e\n\005items\030\002 \003(\0132V.ssd_git.ju"
  "niper.net.contrail.cn2.contrail.pkg.apis"
  ".core.v1alpha1.VirtualNetworkRouter\"\315\002\n\030"
  "VirtualNetworkRouterSpec\022`\n\ncommonSpec\030\001"
  " \001(\0132L.ssd_git.juniper.net.contrail.cn2."
  "contrail.pkg.apis.core.v1alpha1.CommonSp"
  "ec\022\014\n\004type\030\002 \001(\t\022S\n\026virtualNetworkSelect"
  "or\030\003 \001(\01323.k8s.io.apimachinery.pkg.apis."
  "meta.v1.LabelSelector\022l\n\006import\030\004 \001(\0132\\."
  "ssd_git.juniper.net.contrail.cn2.contrai"
  "l.pkg.apis.core.v1alpha1.ImportVirtualNe"
  "tworkRouter\"\202\001\n\032VirtualNetworkRouterStat"
  "us\022d\n\014commonStatus\030\001 \001(\0132N.ssd_git.junip"
  "er.net.contrail.cn2.contrail.pkg.apis.co"
  "re.v1alpha1.CommonStatus\"\345\005\n\022VirtualNetw"
  "orkSpec\022`\n\ncommonSpec\030\001 \001(\0132L.ssd_git.ju"
  "niper.net.contrail.cn2.contrail.pkg.apis"
  ".core.v1alpha1.CommonSpec\022\022\n\nfabricSNAT\030"
  "\002 \001(\010\022n\n\021v4SubnetReference\030\003 \001(\0132S.ssd_g"
  "it.juniper.net.contrail.cn2.contrail.pkg"
  ".apis.core.v1alpha1.ResourceReference\022n\n"
  "\021v6SubnetReference\030\004 \001(\0132S.ssd_git.junip"
  "er.net.contrail.cn2.contrail.pkg.apis.co"
  "re.v1alpha1.ResourceReference\022\027\n\017routeTa"
  "rgetList\030\005 \003(\t\022\035\n\025importRouteTargetList\030"
  "\006 \003(\t\022\035\n\025exportRouteTargetList\030\007 \003(\t\022v\n\030"
  "virtualNetworkProperties\030\010 \001(\0132T.ssd_git"
  ".juniper.net.contrail.cn2.contrail.pkg.a"
  "pis.core.v1alpha1.VirtualNetworkType\022u\n\030"
  "providerNetworkReference\030\t \001(\0132S.ssd_git"
  ".juniper.net.contrail.cn2.contrail.pkg.a"
  "pis.core.v1alpha1.ResourceReference\022\031\n\021i"
  "sProviderNetwork\030\n \001(\010\022\030\n\020fabricForwardi"
  "ng\030\013 \001(\010\"\235\001\n\024VirtualNetworkStatus\022d\n\014com"
  "monStatus\030\001 \001(\0132N.ssd_git.juniper.net.co"
  "ntrail.cn2.contrail.pkg.apis.core.v1alph"
  "a1.CommonStatus\022\037\n\027virtualNetworkNetwork"
  "Id\030\002 \001(\003\"9\n\022VirtualNetworkType\022\013\n\003rpf\030\001 "
  "\001(\t\022\026\n\016forwardingMode\030\002 \001(\t\"\235\002\n\rVirtualR"
  "outer\022B\n\010metadata\030\001 \001(\01320.k8s.io.apimach"
  "inery.pkg.apis.meta.v1.ObjectMeta\022a\n\004spe"
  "c\030\002 \001(\0132S.ssd_git.juniper.net.contrail.c"
  "n2.contrail.pkg.apis.core.v1alpha1.Virtu"
  "alRouterSpec\022e\n\006status\030\003 \001(\0132U.ssd_git.j"
  "uniper.net.contrail.cn2.contrail.pkg.api"
  "s.core.v1alpha1.VirtualRouterStatus\"\265\001\n\021"
  "VirtualRouterList\022@\n\010metadata\030\001 \001(\0132..k8"
  "s.io.apimachinery.pkg.apis.meta.v1.ListM"
  "eta\022^\n\005items\030\002 \003(\0132O.ssd_git.juniper.net"
  ".contrail.cn2.contrail.pkg.apis.core.v1a"
  "lpha1.VirtualRouter\"\376\002\n\021VirtualRouterSpe"
  "c\022`\n\ncommonSpec\030\001 \001(\0132L.ssd_git.juniper."
  "net.contrail.cn2.contrail.pkg.apis.core."
  "v1alpha1.CommonSpec\0223\n\006parent\030\002 \001(\0132#.k8"
  "s.io.api.core.v1.ObjectReference\022 \n\030virt"
  "ualRouterDpdkEnabled\030\003 \001(\010\022\036\n\026virtualRou"
  "terIPAddress\030\004 \001(\t\022\031\n\021virtualRouterType\030"
  "\005 \001(\t\022u\n\030virtualMachineReferences\030\006 \003(\0132"
  "S.ssd_git.juniper.net.contrail.cn2.contr"
  "ail.pkg.apis.core.v1alpha1.ResourceRefer"
  "ence\"{\n\023VirtualRouterStatus\022d\n\014commonSta"
  "tus\030\001 \001(\0132N.ssd_git.juniper.net.contrail"
  ".cn2.contrail.pkg.apis.core.v1alpha1.Com"
  "monStatusBBZ@ssd-git.juniper.net/contrai"
  "l/cn2/contrail/pkg/apis/core/v1alpha1"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_ssd_2dgit_2ejuniper_2enet_2fcontrail_2fcn2_2fcontrail_2fpkg_2fapis_2fcore_2fv1alpha1_2fgenerated_2eproto_deps[6] = {
  &::descriptor_table_k8s_2eio_2fapi_2fcore_2fv1_2fgenerated_2eproto,
  &::descriptor_table_k8s_2eio_2fapimachinery_2fpkg_2fapis_2fmeta_2fv1_2fgenerated_2eproto,
  &::descriptor_table_k8s_2eio_2fapimachinery_2fpkg_2fruntime_2fgenerated_2eproto,
  &::descriptor_table_k8s_2eio_2fapimachinery_2fpkg_2fruntime_2fschema_2fgenerated_2eproto,
  &::descriptor_table_k8s_2eio_2fapimachinery_2fpkg_2futil_2fintstr_2fgenerated_2eproto,
  &::descriptor_table_ssd_2dgit_2ejuniper_2enet_2fcontrail_2fcn2_2fthird_5fparty_2fapiserver_2dbuilder_2dalpha_2fpkg_2fbuilders_2fgenerated_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_ssd_2dgit_2ejuniper_2enet_2fcontrail_2fcn2_2fcontrail_2fpkg_2fapis_2fcore_2fv1alpha1_2fgenerated_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_ssd_2dgit_2ejuniper_2enet_2fcontrail_2fcn2_2fcontrail_2fpkg_2fapis_2fcore_2fv1alpha1_2fgenerated_2eproto = {
  false, false, 29557, descriptor_table_protodef_ssd_2dgit_2ejuniper_2enet_2fcontrail_2fcn2_2fcontrail_2fpkg_2fapis_2fcore_2fv1alpha1_2fgenerated_2eproto, "ssd-git.juniper.net/contrail/cn2/contrail/pkg/apis/core/v1alpha1/generated.proto", 
  &descriptor_table_ssd_2dgit_2ejuniper_2enet_2fcontrail_2fcn2_2fcontrail_2fpkg_2fapis_2fcore_2fv1alpha1_2fgenerated_2eproto_once, descriptor_table_ssd_2dgit_2ejuniper_2enet_2fcontrail_2fcn2_2fcontrail_2fpkg_2fapis_2fcore_2fv1alpha1_2fgenerated_2eproto_deps, 6, 132,
  schemas, file_default_instances, TableStruct_ssd_2dgit_2ejuniper_2enet_2fcontrail_2fcn2_2fcontrail_2fpkg_2fapis_2fcore_2fv1alpha1_2fgenerated_2eproto::offsets,
  file_level_metadata_ssd_2dgit_2ejuniper_2enet_2fcontrail_2fcn2_2fcontrail_2fpkg_2fapis_2fcore_2fv1alpha1_2fgenerated_2eproto, file_level_enum_descriptors_ssd_2dgit_2ejuniper_2enet_2fcontrail_2fcn2_2fcontrail_2fpkg_2fapis_2fcore_2fv1alpha1_2fgenerated_2eproto, file_level_service_descriptors_ssd_2dgit_2ejuniper_2enet_2fcontrail_2fcn2_2fcontrail_2fpkg_2fapis_2fcore_2fv1alpha1_2fgenerated_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_ssd_2dgit_2ejuniper_2enet_2fcontrail_2fcn2_2fcontrail_2fpkg_2fapis_2fcore_2fv1alpha1_2fgenerated_2eproto_getter() {
  return &descriptor_table_ssd_2dgit_2ejuniper_2enet_2fcontrail_2fcn2_2fcontrail_2fpkg_2fapis_2fcore_2fv1alpha1_2fgenerated_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_ssd_2dgit_2ejuniper_2enet_2fcontrail_2fcn2_2fcontrail_2fpkg_2fapis_2fcore_2fv1alpha1_2fgenerated_2eproto(&descriptor_table_ssd_2dgit_2ejuniper_2enet_2fcontrail_2fcn2_2fcontrail_2fpkg_2fapis_2fcore_2fv1alpha1_2fgenerated_2eproto);
namespace ssd_git {
namespace juniper {
namespace net {
namespace contrail {
namespace cn2 {
namespace contrail {
namespace pkg {
namespace apis {
namespace core {
namespace v1alpha1 {

// ===================================================================

class APSAttribute::_Internal {
 public:
  using HasBits = decltype(std::declval<APSAttribute>()._has_bits_);
  static void set_has_sequence(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

APSAttribute::APSAttribute(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.APSAttribute)
}
APSAttribute::APSAttribute(const APSAttribute& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  sequence_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_sequence()) {
    sequence_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_sequence(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.APSAttribute)
}

inline void APSAttribute::SharedCtor() {
sequence_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

APSAttribute::~APSAttribute() {
  // @@protoc_insertion_point(destructor:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.APSAttribute)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void APSAttribute::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  sequence_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void APSAttribute::ArenaDtor(void* object) {
  APSAttribute* _this = reinterpret_cast< APSAttribute* >(object);
  (void)_this;
}
void APSAttribute::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void APSAttribute::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void APSAttribute::Clear() {
// @@protoc_insertion_point(message_clear_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.APSAttribute)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    sequence_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* APSAttribute::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string sequence = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_sequence();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.APSAttribute.sequence");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* APSAttribute::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.APSAttribute)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string sequence = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_sequence().data(), static_cast<int>(this->_internal_sequence().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.APSAttribute.sequence");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_sequence(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.APSAttribute)
  return target;
}

size_t APSAttribute::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.APSAttribute)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string sequence = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_sequence());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData APSAttribute::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    APSAttribute::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*APSAttribute::GetClassData() const { return &_class_data_; }

void APSAttribute::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<APSAttribute *>(to)->MergeFrom(
      static_cast<const APSAttribute &>(from));
}


void APSAttribute::MergeFrom(const APSAttribute& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.APSAttribute)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_sequence()) {
    _internal_set_sequence(from._internal_sequence());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void APSAttribute::CopyFrom(const APSAttribute& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.APSAttribute)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool APSAttribute::IsInitialized() const {
  return true;
}

void APSAttribute::InternalSwap(APSAttribute* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &sequence_, GetArenaForAllocation(),
      &other->sequence_, other->GetArenaForAllocation()
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata APSAttribute::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_ssd_2dgit_2ejuniper_2enet_2fcontrail_2fcn2_2fcontrail_2fpkg_2fapis_2fcore_2fv1alpha1_2fgenerated_2eproto_getter, &descriptor_table_ssd_2dgit_2ejuniper_2enet_2fcontrail_2fcn2_2fcontrail_2fpkg_2fapis_2fcore_2fv1alpha1_2fgenerated_2eproto_once,
      file_level_metadata_ssd_2dgit_2ejuniper_2enet_2fcontrail_2fcn2_2fcontrail_2fpkg_2fapis_2fcore_2fv1alpha1_2fgenerated_2eproto[0]);
}

// ===================================================================

class AddressFamilies::_Internal {
 public:
};

AddressFamilies::AddressFamilies(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  family_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.AddressFamilies)
}
AddressFamilies::AddressFamilies(const AddressFamilies& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      family_(from.family_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.AddressFamilies)
}

inline void AddressFamilies::SharedCtor() {
}

AddressFamilies::~AddressFamilies() {
  // @@protoc_insertion_point(destructor:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.AddressFamilies)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void AddressFamilies::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void AddressFamilies::ArenaDtor(void* object) {
  AddressFamilies* _this = reinterpret_cast< AddressFamilies* >(object);
  (void)_this;
}
void AddressFamilies::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AddressFamilies::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AddressFamilies::Clear() {
// @@protoc_insertion_point(message_clear_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.AddressFamilies)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  family_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AddressFamilies::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated string family = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_family();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            #ifndef NDEBUG
            ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.AddressFamilies.family");
            #endif  // !NDEBUG
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AddressFamilies::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.AddressFamilies)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string family = 1;
  for (int i = 0, n = this->_internal_family_size(); i < n; i++) {
    const auto& s = this->_internal_family(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.AddressFamilies.family");
    target = stream->WriteString(1, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.AddressFamilies)
  return target;
}

size_t AddressFamilies::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.AddressFamilies)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string family = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(family_.size());
  for (int i = 0, n = family_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      family_.Get(i));
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AddressFamilies::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    AddressFamilies::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AddressFamilies::GetClassData() const { return &_class_data_; }

void AddressFamilies::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<AddressFamilies *>(to)->MergeFrom(
      static_cast<const AddressFamilies &>(from));
}


void AddressFamilies::MergeFrom(const AddressFamilies& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.AddressFamilies)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  family_.MergeFrom(from.family_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AddressFamilies::CopyFrom(const AddressFamilies& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.AddressFamilies)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddressFamilies::IsInitialized() const {
  return true;
}

void AddressFamilies::InternalSwap(AddressFamilies* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  family_.InternalSwap(&other->family_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AddressFamilies::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_ssd_2dgit_2ejuniper_2enet_2fcontrail_2fcn2_2fcontrail_2fpkg_2fapis_2fcore_2fv1alpha1_2fgenerated_2eproto_getter, &descriptor_table_ssd_2dgit_2ejuniper_2enet_2fcontrail_2fcn2_2fcontrail_2fpkg_2fapis_2fcore_2fv1alpha1_2fgenerated_2eproto_once,
      file_level_metadata_ssd_2dgit_2ejuniper_2enet_2fcontrail_2fcn2_2fcontrail_2fpkg_2fapis_2fcore_2fv1alpha1_2fgenerated_2eproto[1]);
}

// ===================================================================

class AddressGroup::_Internal {
 public:
  using HasBits = decltype(std::declval<AddressGroup>()._has_bits_);
  static const ::k8s::io::apimachinery::pkg::apis::meta::v1::ObjectMeta& metadata(const AddressGroup* msg);
  static void set_has_metadata(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::AddressGroupSpec& spec(const AddressGroup* msg);
  static void set_has_spec(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::AddressGroupStatus& status(const AddressGroup* msg);
  static void set_has_status(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::k8s::io::apimachinery::pkg::apis::meta::v1::ObjectMeta&
AddressGroup::_Internal::metadata(const AddressGroup* msg) {
  return *msg->metadata_;
}
const ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::AddressGroupSpec&
AddressGroup::_Internal::spec(const AddressGroup* msg) {
  return *msg->spec_;
}
const ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::AddressGroupStatus&
AddressGroup::_Internal::status(const AddressGroup* msg) {
  return *msg->status_;
}
void AddressGroup::clear_metadata() {
  if (metadata_ != nullptr) metadata_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
AddressGroup::AddressGroup(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.AddressGroup)
}
AddressGroup::AddressGroup(const AddressGroup& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_metadata()) {
    metadata_ = new ::k8s::io::apimachinery::pkg::apis::meta::v1::ObjectMeta(*from.metadata_);
  } else {
    metadata_ = nullptr;
  }
  if (from._internal_has_spec()) {
    spec_ = new ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::AddressGroupSpec(*from.spec_);
  } else {
    spec_ = nullptr;
  }
  if (from._internal_has_status()) {
    status_ = new ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::AddressGroupStatus(*from.status_);
  } else {
    status_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.AddressGroup)
}

inline void AddressGroup::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&metadata_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&status_) -
    reinterpret_cast<char*>(&metadata_)) + sizeof(status_));
}

AddressGroup::~AddressGroup() {
  // @@protoc_insertion_point(destructor:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.AddressGroup)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void AddressGroup::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete metadata_;
  if (this != internal_default_instance()) delete spec_;
  if (this != internal_default_instance()) delete status_;
}

void AddressGroup::ArenaDtor(void* object) {
  AddressGroup* _this = reinterpret_cast< AddressGroup* >(object);
  (void)_this;
}
void AddressGroup::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AddressGroup::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AddressGroup::Clear() {
// @@protoc_insertion_point(message_clear_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.AddressGroup)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(metadata_ != nullptr);
      metadata_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(spec_ != nullptr);
      spec_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(status_ != nullptr);
      status_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AddressGroup::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_metadata(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.AddressGroupSpec spec = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_spec(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.AddressGroupStatus status = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AddressGroup::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.AddressGroup)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::metadata(this), target, stream);
  }

  // optional .ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.AddressGroupSpec spec = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::spec(this), target, stream);
  }

  // optional .ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.AddressGroupStatus status = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::status(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.AddressGroup)
  return target;
}

size_t AddressGroup::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.AddressGroup)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *metadata_);
    }

    // optional .ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.AddressGroupSpec spec = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *spec_);
    }

    // optional .ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.AddressGroupStatus status = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *status_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AddressGroup::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    AddressGroup::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AddressGroup::GetClassData() const { return &_class_data_; }

void AddressGroup::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<AddressGroup *>(to)->MergeFrom(
      static_cast<const AddressGroup &>(from));
}


void AddressGroup::MergeFrom(const AddressGroup& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.AddressGroup)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_metadata()->::k8s::io::apimachinery::pkg::apis::meta::v1::ObjectMeta::MergeFrom(from._internal_metadata());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_spec()->::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::AddressGroupSpec::MergeFrom(from._internal_spec());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_status()->::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::AddressGroupStatus::MergeFrom(from._internal_status());
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AddressGroup::CopyFrom(const AddressGroup& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.AddressGroup)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddressGroup::IsInitialized() const {
  return true;
}

void AddressGroup::InternalSwap(AddressGroup* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AddressGroup, status_)
      + sizeof(AddressGroup::status_)
      - PROTOBUF_FIELD_OFFSET(AddressGroup, metadata_)>(
          reinterpret_cast<char*>(&metadata_),
          reinterpret_cast<char*>(&other->metadata_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AddressGroup::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_ssd_2dgit_2ejuniper_2enet_2fcontrail_2fcn2_2fcontrail_2fpkg_2fapis_2fcore_2fv1alpha1_2fgenerated_2eproto_getter, &descriptor_table_ssd_2dgit_2ejuniper_2enet_2fcontrail_2fcn2_2fcontrail_2fpkg_2fapis_2fcore_2fv1alpha1_2fgenerated_2eproto_once,
      file_level_metadata_ssd_2dgit_2ejuniper_2enet_2fcontrail_2fcn2_2fcontrail_2fpkg_2fapis_2fcore_2fv1alpha1_2fgenerated_2eproto[2]);
}

// ===================================================================

class AddressGroupList::_Internal {
 public:
  using HasBits = decltype(std::declval<AddressGroupList>()._has_bits_);
  static const ::k8s::io::apimachinery::pkg::apis::meta::v1::ListMeta& metadata(const AddressGroupList* msg);
  static void set_has_metadata(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::k8s::io::apimachinery::pkg::apis::meta::v1::ListMeta&
AddressGroupList::_Internal::metadata(const AddressGroupList* msg) {
  return *msg->metadata_;
}
void AddressGroupList::clear_metadata() {
  if (metadata_ != nullptr) metadata_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
AddressGroupList::AddressGroupList(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  items_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.AddressGroupList)
}
AddressGroupList::AddressGroupList(const AddressGroupList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      items_(from.items_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_metadata()) {
    metadata_ = new ::k8s::io::apimachinery::pkg::apis::meta::v1::ListMeta(*from.metadata_);
  } else {
    metadata_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.AddressGroupList)
}

inline void AddressGroupList::SharedCtor() {
metadata_ = nullptr;
}

AddressGroupList::~AddressGroupList() {
  // @@protoc_insertion_point(destructor:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.AddressGroupList)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void AddressGroupList::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete metadata_;
}

void AddressGroupList::ArenaDtor(void* object) {
  AddressGroupList* _this = reinterpret_cast< AddressGroupList* >(object);
  (void)_this;
}
void AddressGroupList::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AddressGroupList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AddressGroupList::Clear() {
// @@protoc_insertion_point(message_clear_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.AddressGroupList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  items_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(metadata_ != nullptr);
    metadata_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AddressGroupList::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_metadata(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.AddressGroup items = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_items(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AddressGroupList::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.AddressGroupList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::metadata(this), target, stream);
  }

  // repeated .ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.AddressGroup items = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_items_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_items(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.AddressGroupList)
  return target;
}

size_t AddressGroupList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.AddressGroupList)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.AddressGroup items = 2;
  total_size += 1UL * this->_internal_items_size();
  for (const auto& msg : this->items_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional .k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *metadata_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AddressGroupList::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    AddressGroupList::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AddressGroupList::GetClassData() const { return &_class_data_; }

void AddressGroupList::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<AddressGroupList *>(to)->MergeFrom(
      static_cast<const AddressGroupList &>(from));
}


void AddressGroupList::MergeFrom(const AddressGroupList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.AddressGroupList)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  items_.MergeFrom(from.items_);
  if (from._internal_has_metadata()) {
    _internal_mutable_metadata()->::k8s::io::apimachinery::pkg::apis::meta::v1::ListMeta::MergeFrom(from._internal_metadata());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AddressGroupList::CopyFrom(const AddressGroupList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.AddressGroupList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddressGroupList::IsInitialized() const {
  return true;
}

void AddressGroupList::InternalSwap(AddressGroupList* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  items_.InternalSwap(&other->items_);
  swap(metadata_, other->metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AddressGroupList::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_ssd_2dgit_2ejuniper_2enet_2fcontrail_2fcn2_2fcontrail_2fpkg_2fapis_2fcore_2fv1alpha1_2fgenerated_2eproto_getter, &descriptor_table_ssd_2dgit_2ejuniper_2enet_2fcontrail_2fcn2_2fcontrail_2fpkg_2fapis_2fcore_2fv1alpha1_2fgenerated_2eproto_once,
      file_level_metadata_ssd_2dgit_2ejuniper_2enet_2fcontrail_2fcn2_2fcontrail_2fpkg_2fapis_2fcore_2fv1alpha1_2fgenerated_2eproto[3]);
}

// ===================================================================

class AddressGroupPrefix::_Internal {
 public:
};

AddressGroupPrefix::AddressGroupPrefix(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  subnet_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.AddressGroupPrefix)
}
AddressGroupPrefix::AddressGroupPrefix(const AddressGroupPrefix& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      subnet_(from.subnet_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.AddressGroupPrefix)
}

inline void AddressGroupPrefix::SharedCtor() {
}

AddressGroupPrefix::~AddressGroupPrefix() {
  // @@protoc_insertion_point(destructor:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.AddressGroupPrefix)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void AddressGroupPrefix::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void AddressGroupPrefix::ArenaDtor(void* object) {
  AddressGroupPrefix* _this = reinterpret_cast< AddressGroupPrefix* >(object);
  (void)_this;
}
void AddressGroupPrefix::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AddressGroupPrefix::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AddressGroupPrefix::Clear() {
// @@protoc_insertion_point(message_clear_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.AddressGroupPrefix)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  subnet_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AddressGroupPrefix::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.FirewallSubnet subnet = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_subnet(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AddressGroupPrefix::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.AddressGroupPrefix)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.FirewallSubnet subnet = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_subnet_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_subnet(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.AddressGroupPrefix)
  return target;
}

size_t AddressGroupPrefix::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.AddressGroupPrefix)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.FirewallSubnet subnet = 1;
  total_size += 1UL * this->_internal_subnet_size();
  for (const auto& msg : this->subnet_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AddressGroupPrefix::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    AddressGroupPrefix::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AddressGroupPrefix::GetClassData() const { return &_class_data_; }

void AddressGroupPrefix::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<AddressGroupPrefix *>(to)->MergeFrom(
      static_cast<const AddressGroupPrefix &>(from));
}


void AddressGroupPrefix::MergeFrom(const AddressGroupPrefix& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.AddressGroupPrefix)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  subnet_.MergeFrom(from.subnet_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AddressGroupPrefix::CopyFrom(const AddressGroupPrefix& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.AddressGroupPrefix)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddressGroupPrefix::IsInitialized() const {
  return true;
}

void AddressGroupPrefix::InternalSwap(AddressGroupPrefix* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  subnet_.InternalSwap(&other->subnet_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AddressGroupPrefix::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_ssd_2dgit_2ejuniper_2enet_2fcontrail_2fcn2_2fcontrail_2fpkg_2fapis_2fcore_2fv1alpha1_2fgenerated_2eproto_getter, &descriptor_table_ssd_2dgit_2ejuniper_2enet_2fcontrail_2fcn2_2fcontrail_2fpkg_2fapis_2fcore_2fv1alpha1_2fgenerated_2eproto_once,
      file_level_metadata_ssd_2dgit_2ejuniper_2enet_2fcontrail_2fcn2_2fcontrail_2fpkg_2fapis_2fcore_2fv1alpha1_2fgenerated_2eproto[4]);
}

// ===================================================================

class AddressGroupSpec::_Internal {
 public:
  using HasBits = decltype(std::declval<AddressGroupSpec>()._has_bits_);
  static const ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::CommonSpec& commonspec(const AddressGroupSpec* msg);
  static void set_has_commonspec(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::AddressGroupPrefix& addressgroupprefixes(const AddressGroupSpec* msg);
  static void set_has_addressgroupprefixes(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::CommonSpec&
AddressGroupSpec::_Internal::commonspec(const AddressGroupSpec* msg) {
  return *msg->commonspec_;
}
const ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::AddressGroupPrefix&
AddressGroupSpec::_Internal::addressgroupprefixes(const AddressGroupSpec* msg) {
  return *msg->addressgroupprefixes_;
}
AddressGroupSpec::AddressGroupSpec(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.AddressGroupSpec)
}
AddressGroupSpec::AddressGroupSpec(const AddressGroupSpec& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_commonspec()) {
    commonspec_ = new ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::CommonSpec(*from.commonspec_);
  } else {
    commonspec_ = nullptr;
  }
  if (from._internal_has_addressgroupprefixes()) {
    addressgroupprefixes_ = new ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::AddressGroupPrefix(*from.addressgroupprefixes_);
  } else {
    addressgroupprefixes_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.AddressGroupSpec)
}

inline void AddressGroupSpec::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&commonspec_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&addressgroupprefixes_) -
    reinterpret_cast<char*>(&commonspec_)) + sizeof(addressgroupprefixes_));
}

AddressGroupSpec::~AddressGroupSpec() {
  // @@protoc_insertion_point(destructor:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.AddressGroupSpec)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void AddressGroupSpec::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete commonspec_;
  if (this != internal_default_instance()) delete addressgroupprefixes_;
}

void AddressGroupSpec::ArenaDtor(void* object) {
  AddressGroupSpec* _this = reinterpret_cast< AddressGroupSpec* >(object);
  (void)_this;
}
void AddressGroupSpec::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AddressGroupSpec::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AddressGroupSpec::Clear() {
// @@protoc_insertion_point(message_clear_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.AddressGroupSpec)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(commonspec_ != nullptr);
      commonspec_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(addressgroupprefixes_ != nullptr);
      addressgroupprefixes_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AddressGroupSpec::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.CommonSpec commonSpec = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_commonspec(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.AddressGroupPrefix addressGroupPrefixes = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_addressgroupprefixes(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AddressGroupSpec::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.AddressGroupSpec)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.CommonSpec commonSpec = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::commonspec(this), target, stream);
  }

  // optional .ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.AddressGroupPrefix addressGroupPrefixes = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::addressgroupprefixes(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.AddressGroupSpec)
  return target;
}

size_t AddressGroupSpec::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.AddressGroupSpec)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.CommonSpec commonSpec = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *commonspec_);
    }

    // optional .ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.AddressGroupPrefix addressGroupPrefixes = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *addressgroupprefixes_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AddressGroupSpec::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    AddressGroupSpec::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AddressGroupSpec::GetClassData() const { return &_class_data_; }

void AddressGroupSpec::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<AddressGroupSpec *>(to)->MergeFrom(
      static_cast<const AddressGroupSpec &>(from));
}


void AddressGroupSpec::MergeFrom(const AddressGroupSpec& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.AddressGroupSpec)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_commonspec()->::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::CommonSpec::MergeFrom(from._internal_commonspec());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_addressgroupprefixes()->::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::AddressGroupPrefix::MergeFrom(from._internal_addressgroupprefixes());
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AddressGroupSpec::CopyFrom(const AddressGroupSpec& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.AddressGroupSpec)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddressGroupSpec::IsInitialized() const {
  return true;
}

void AddressGroupSpec::InternalSwap(AddressGroupSpec* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AddressGroupSpec, addressgroupprefixes_)
      + sizeof(AddressGroupSpec::addressgroupprefixes_)
      - PROTOBUF_FIELD_OFFSET(AddressGroupSpec, commonspec_)>(
          reinterpret_cast<char*>(&commonspec_),
          reinterpret_cast<char*>(&other->commonspec_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AddressGroupSpec::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_ssd_2dgit_2ejuniper_2enet_2fcontrail_2fcn2_2fcontrail_2fpkg_2fapis_2fcore_2fv1alpha1_2fgenerated_2eproto_getter, &descriptor_table_ssd_2dgit_2ejuniper_2enet_2fcontrail_2fcn2_2fcontrail_2fpkg_2fapis_2fcore_2fv1alpha1_2fgenerated_2eproto_once,
      file_level_metadata_ssd_2dgit_2ejuniper_2enet_2fcontrail_2fcn2_2fcontrail_2fpkg_2fapis_2fcore_2fv1alpha1_2fgenerated_2eproto[5]);
}

// ===================================================================

class AddressGroupStatus::_Internal {
 public:
  using HasBits = decltype(std::declval<AddressGroupStatus>()._has_bits_);
  static const ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::CommonStatus& commonstatus(const AddressGroupStatus* msg);
  static void set_has_commonstatus(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::CommonStatus&
AddressGroupStatus::_Internal::commonstatus(const AddressGroupStatus* msg) {
  return *msg->commonstatus_;
}
AddressGroupStatus::AddressGroupStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.AddressGroupStatus)
}
AddressGroupStatus::AddressGroupStatus(const AddressGroupStatus& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_commonstatus()) {
    commonstatus_ = new ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::CommonStatus(*from.commonstatus_);
  } else {
    commonstatus_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.AddressGroupStatus)
}

inline void AddressGroupStatus::SharedCtor() {
commonstatus_ = nullptr;
}

AddressGroupStatus::~AddressGroupStatus() {
  // @@protoc_insertion_point(destructor:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.AddressGroupStatus)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void AddressGroupStatus::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete commonstatus_;
}

void AddressGroupStatus::ArenaDtor(void* object) {
  AddressGroupStatus* _this = reinterpret_cast< AddressGroupStatus* >(object);
  (void)_this;
}
void AddressGroupStatus::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AddressGroupStatus::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AddressGroupStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.AddressGroupStatus)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(commonstatus_ != nullptr);
    commonstatus_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AddressGroupStatus::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.CommonStatus commonStatus = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_commonstatus(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AddressGroupStatus::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.AddressGroupStatus)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.CommonStatus commonStatus = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::commonstatus(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.AddressGroupStatus)
  return target;
}

size_t AddressGroupStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.AddressGroupStatus)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.CommonStatus commonStatus = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *commonstatus_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AddressGroupStatus::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    AddressGroupStatus::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AddressGroupStatus::GetClassData() const { return &_class_data_; }

void AddressGroupStatus::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<AddressGroupStatus *>(to)->MergeFrom(
      static_cast<const AddressGroupStatus &>(from));
}


void AddressGroupStatus::MergeFrom(const AddressGroupStatus& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.AddressGroupStatus)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_commonstatus()) {
    _internal_mutable_commonstatus()->::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::CommonStatus::MergeFrom(from._internal_commonstatus());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AddressGroupStatus::CopyFrom(const AddressGroupStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.AddressGroupStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddressGroupStatus::IsInitialized() const {
  return true;
}

void AddressGroupStatus::InternalSwap(AddressGroupStatus* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(commonstatus_, other->commonstatus_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AddressGroupStatus::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_ssd_2dgit_2ejuniper_2enet_2fcontrail_2fcn2_2fcontrail_2fpkg_2fapis_2fcore_2fv1alpha1_2fgenerated_2eproto_getter, &descriptor_table_ssd_2dgit_2ejuniper_2enet_2fcontrail_2fcn2_2fcontrail_2fpkg_2fapis_2fcore_2fv1alpha1_2fgenerated_2eproto_once,
      file_level_metadata_ssd_2dgit_2ejuniper_2enet_2fcontrail_2fcn2_2fcontrail_2fpkg_2fapis_2fcore_2fv1alpha1_2fgenerated_2eproto[6]);
}

// ===================================================================

class AllowedAddressPair::_Internal {
 public:
  using HasBits = decltype(std::declval<AllowedAddressPair>()._has_bits_);
  static const ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::AllowedAddressPairSubnet& ip(const AllowedAddressPair* msg);
  static void set_has_ip(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_mac(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_addressmode(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::AllowedAddressPairSubnet&
AllowedAddressPair::_Internal::ip(const AllowedAddressPair* msg) {
  return *msg->ip_;
}
AllowedAddressPair::AllowedAddressPair(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.AllowedAddressPair)
}
AllowedAddressPair::AllowedAddressPair(const AllowedAddressPair& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  mac_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_mac()) {
    mac_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_mac(), 
      GetArenaForAllocation());
  }
  addressmode_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_addressmode()) {
    addressmode_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_addressmode(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_ip()) {
    ip_ = new ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::AllowedAddressPairSubnet(*from.ip_);
  } else {
    ip_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.AllowedAddressPair)
}

inline void AllowedAddressPair::SharedCtor() {
mac_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
addressmode_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
ip_ = nullptr;
}

AllowedAddressPair::~AllowedAddressPair() {
  // @@protoc_insertion_point(destructor:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.AllowedAddressPair)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void AllowedAddressPair::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  mac_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  addressmode_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete ip_;
}

void AllowedAddressPair::ArenaDtor(void* object) {
  AllowedAddressPair* _this = reinterpret_cast< AllowedAddressPair* >(object);
  (void)_this;
}
void AllowedAddressPair::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AllowedAddressPair::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AllowedAddressPair::Clear() {
// @@protoc_insertion_point(message_clear_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.AllowedAddressPair)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      mac_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      addressmode_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(ip_ != nullptr);
      ip_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AllowedAddressPair::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.AllowedAddressPairSubnet ip = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_ip(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string mac = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_mac();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.AllowedAddressPair.mac");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string addressMode = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_addressmode();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.AllowedAddressPair.addressMode");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AllowedAddressPair::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.AllowedAddressPair)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.AllowedAddressPairSubnet ip = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::ip(this), target, stream);
  }

  // optional string mac = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_mac().data(), static_cast<int>(this->_internal_mac().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.AllowedAddressPair.mac");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_mac(), target);
  }

  // optional string addressMode = 3;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_addressmode().data(), static_cast<int>(this->_internal_addressmode().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.AllowedAddressPair.addressMode");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_addressmode(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.AllowedAddressPair)
  return target;
}

size_t AllowedAddressPair::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.AllowedAddressPair)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string mac = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_mac());
    }

    // optional string addressMode = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_addressmode());
    }

    // optional .ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.AllowedAddressPairSubnet ip = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *ip_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AllowedAddressPair::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    AllowedAddressPair::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AllowedAddressPair::GetClassData() const { return &_class_data_; }

void AllowedAddressPair::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<AllowedAddressPair *>(to)->MergeFrom(
      static_cast<const AllowedAddressPair &>(from));
}


void AllowedAddressPair::MergeFrom(const AllowedAddressPair& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.AllowedAddressPair)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_mac(from._internal_mac());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_addressmode(from._internal_addressmode());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_ip()->::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::AllowedAddressPairSubnet::MergeFrom(from._internal_ip());
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AllowedAddressPair::CopyFrom(const AllowedAddressPair& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.AllowedAddressPair)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AllowedAddressPair::IsInitialized() const {
  return true;
}

void AllowedAddressPair::InternalSwap(AllowedAddressPair* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &mac_, GetArenaForAllocation(),
      &other->mac_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &addressmode_, GetArenaForAllocation(),
      &other->addressmode_, other->GetArenaForAllocation()
  );
  swap(ip_, other->ip_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AllowedAddressPair::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_ssd_2dgit_2ejuniper_2enet_2fcontrail_2fcn2_2fcontrail_2fpkg_2fapis_2fcore_2fv1alpha1_2fgenerated_2eproto_getter, &descriptor_table_ssd_2dgit_2ejuniper_2enet_2fcontrail_2fcn2_2fcontrail_2fpkg_2fapis_2fcore_2fv1alpha1_2fgenerated_2eproto_once,
      file_level_metadata_ssd_2dgit_2ejuniper_2enet_2fcontrail_2fcn2_2fcontrail_2fpkg_2fapis_2fcore_2fv1alpha1_2fgenerated_2eproto[7]);
}

// ===================================================================

class AllowedAddressPairSubnet::_Internal {
 public:
  using HasBits = decltype(std::declval<AllowedAddressPairSubnet>()._has_bits_);
  static void set_has_ipprefix(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::k8s::io::apimachinery::pkg::util::intstr::IntOrString& ipprefixlen(const AllowedAddressPairSubnet* msg);
  static void set_has_ipprefixlen(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::k8s::io::apimachinery::pkg::util::intstr::IntOrString&
AllowedAddressPairSubnet::_Internal::ipprefixlen(const AllowedAddressPairSubnet* msg) {
  return *msg->ipprefixlen_;
}
void AllowedAddressPairSubnet::clear_ipprefixlen() {
  if (ipprefixlen_ != nullptr) ipprefixlen_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
AllowedAddressPairSubnet::AllowedAddressPairSubnet(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.AllowedAddressPairSubnet)
}
AllowedAddressPairSubnet::AllowedAddressPairSubnet(const AllowedAddressPairSubnet& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ipprefix_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_ipprefix()) {
    ipprefix_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_ipprefix(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_ipprefixlen()) {
    ipprefixlen_ = new ::k8s::io::apimachinery::pkg::util::intstr::IntOrString(*from.ipprefixlen_);
  } else {
    ipprefixlen_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.AllowedAddressPairSubnet)
}

inline void AllowedAddressPairSubnet::SharedCtor() {
ipprefix_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
ipprefixlen_ = nullptr;
}

AllowedAddressPairSubnet::~AllowedAddressPairSubnet() {
  // @@protoc_insertion_point(destructor:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.AllowedAddressPairSubnet)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void AllowedAddressPairSubnet::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  ipprefix_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete ipprefixlen_;
}

void AllowedAddressPairSubnet::ArenaDtor(void* object) {
  AllowedAddressPairSubnet* _this = reinterpret_cast< AllowedAddressPairSubnet* >(object);
  (void)_this;
}
void AllowedAddressPairSubnet::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AllowedAddressPairSubnet::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AllowedAddressPairSubnet::Clear() {
// @@protoc_insertion_point(message_clear_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.AllowedAddressPairSubnet)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ipprefix_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(ipprefixlen_ != nullptr);
      ipprefixlen_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AllowedAddressPairSubnet::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string ipPrefix = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_ipprefix();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.AllowedAddressPairSubnet.ipPrefix");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .k8s.io.apimachinery.pkg.util.intstr.IntOrString ipPrefixLen = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_ipprefixlen(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AllowedAddressPairSubnet::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.AllowedAddressPairSubnet)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string ipPrefix = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_ipprefix().data(), static_cast<int>(this->_internal_ipprefix().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.AllowedAddressPairSubnet.ipPrefix");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_ipprefix(), target);
  }

  // optional .k8s.io.apimachinery.pkg.util.intstr.IntOrString ipPrefixLen = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::ipprefixlen(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.AllowedAddressPairSubnet)
  return target;
}

size_t AllowedAddressPairSubnet::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.AllowedAddressPairSubnet)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string ipPrefix = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_ipprefix());
    }

    // optional .k8s.io.apimachinery.pkg.util.intstr.IntOrString ipPrefixLen = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *ipprefixlen_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AllowedAddressPairSubnet::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    AllowedAddressPairSubnet::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AllowedAddressPairSubnet::GetClassData() const { return &_class_data_; }

void AllowedAddressPairSubnet::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<AllowedAddressPairSubnet *>(to)->MergeFrom(
      static_cast<const AllowedAddressPairSubnet &>(from));
}


void AllowedAddressPairSubnet::MergeFrom(const AllowedAddressPairSubnet& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.AllowedAddressPairSubnet)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_ipprefix(from._internal_ipprefix());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_ipprefixlen()->::k8s::io::apimachinery::pkg::util::intstr::IntOrString::MergeFrom(from._internal_ipprefixlen());
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AllowedAddressPairSubnet::CopyFrom(const AllowedAddressPairSubnet& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.AllowedAddressPairSubnet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AllowedAddressPairSubnet::IsInitialized() const {
  return true;
}

void AllowedAddressPairSubnet::InternalSwap(AllowedAddressPairSubnet* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &ipprefix_, GetArenaForAllocation(),
      &other->ipprefix_, other->GetArenaForAllocation()
  );
  swap(ipprefixlen_, other->ipprefixlen_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AllowedAddressPairSubnet::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_ssd_2dgit_2ejuniper_2enet_2fcontrail_2fcn2_2fcontrail_2fpkg_2fapis_2fcore_2fv1alpha1_2fgenerated_2eproto_getter, &descriptor_table_ssd_2dgit_2ejuniper_2enet_2fcontrail_2fcn2_2fcontrail_2fpkg_2fapis_2fcore_2fv1alpha1_2fgenerated_2eproto_once,
      file_level_metadata_ssd_2dgit_2ejuniper_2enet_2fcontrail_2fcn2_2fcontrail_2fpkg_2fapis_2fcore_2fv1alpha1_2fgenerated_2eproto[8]);
}

// ===================================================================

class AllowedAddressPairs::_Internal {
 public:
};

AllowedAddressPairs::AllowedAddressPairs(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  allowedaddresspair_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.AllowedAddressPairs)
}
AllowedAddressPairs::AllowedAddressPairs(const AllowedAddressPairs& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      allowedaddresspair_(from.allowedaddresspair_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.AllowedAddressPairs)
}

inline void AllowedAddressPairs::SharedCtor() {
}

AllowedAddressPairs::~AllowedAddressPairs() {
  // @@protoc_insertion_point(destructor:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.AllowedAddressPairs)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void AllowedAddressPairs::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void AllowedAddressPairs::ArenaDtor(void* object) {
  AllowedAddressPairs* _this = reinterpret_cast< AllowedAddressPairs* >(object);
  (void)_this;
}
void AllowedAddressPairs::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AllowedAddressPairs::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AllowedAddressPairs::Clear() {
// @@protoc_insertion_point(message_clear_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.AllowedAddressPairs)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  allowedaddresspair_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AllowedAddressPairs::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.AllowedAddressPair allowedAddressPair = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_allowedaddresspair(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AllowedAddressPairs::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.AllowedAddressPairs)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.AllowedAddressPair allowedAddressPair = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_allowedaddresspair_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_allowedaddresspair(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.AllowedAddressPairs)
  return target;
}

size_t AllowedAddressPairs::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.AllowedAddressPairs)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.AllowedAddressPair allowedAddressPair = 1;
  total_size += 1UL * this->_internal_allowedaddresspair_size();
  for (const auto& msg : this->allowedaddresspair_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AllowedAddressPairs::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    AllowedAddressPairs::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AllowedAddressPairs::GetClassData() const { return &_class_data_; }

void AllowedAddressPairs::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<AllowedAddressPairs *>(to)->MergeFrom(
      static_cast<const AllowedAddressPairs &>(from));
}


void AllowedAddressPairs::MergeFrom(const AllowedAddressPairs& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.AllowedAddressPairs)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  allowedaddresspair_.MergeFrom(from.allowedaddresspair_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AllowedAddressPairs::CopyFrom(const AllowedAddressPairs& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.AllowedAddressPairs)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AllowedAddressPairs::IsInitialized() const {
  return true;
}

void AllowedAddressPairs::InternalSwap(AllowedAddressPairs* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  allowedaddresspair_.InternalSwap(&other->allowedaddresspair_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AllowedAddressPairs::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_ssd_2dgit_2ejuniper_2enet_2fcontrail_2fcn2_2fcontrail_2fpkg_2fapis_2fcore_2fv1alpha1_2fgenerated_2eproto_getter, &descriptor_table_ssd_2dgit_2ejuniper_2enet_2fcontrail_2fcn2_2fcontrail_2fpkg_2fapis_2fcore_2fv1alpha1_2fgenerated_2eproto_once,
      file_level_metadata_ssd_2dgit_2ejuniper_2enet_2fcontrail_2fcn2_2fcontrail_2fpkg_2fapis_2fcore_2fv1alpha1_2fgenerated_2eproto[9]);
}

// ===================================================================

class ApplicationPolicySet::_Internal {
 public:
  using HasBits = decltype(std::declval<ApplicationPolicySet>()._has_bits_);
  static const ::k8s::io::apimachinery::pkg::apis::meta::v1::ObjectMeta& metadata(const ApplicationPolicySet* msg);
  static void set_has_metadata(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::ApplicationPolicySetSpec& spec(const ApplicationPolicySet* msg);
  static void set_has_spec(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::ApplicationPolicySetStatus& status(const ApplicationPolicySet* msg);
  static void set_has_status(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::k8s::io::apimachinery::pkg::apis::meta::v1::ObjectMeta&
ApplicationPolicySet::_Internal::metadata(const ApplicationPolicySet* msg) {
  return *msg->metadata_;
}
const ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::ApplicationPolicySetSpec&
ApplicationPolicySet::_Internal::spec(const ApplicationPolicySet* msg) {
  return *msg->spec_;
}
const ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::ApplicationPolicySetStatus&
ApplicationPolicySet::_Internal::status(const ApplicationPolicySet* msg) {
  return *msg->status_;
}
void ApplicationPolicySet::clear_metadata() {
  if (metadata_ != nullptr) metadata_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
ApplicationPolicySet::ApplicationPolicySet(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.ApplicationPolicySet)
}
ApplicationPolicySet::ApplicationPolicySet(const ApplicationPolicySet& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_metadata()) {
    metadata_ = new ::k8s::io::apimachinery::pkg::apis::meta::v1::ObjectMeta(*from.metadata_);
  } else {
    metadata_ = nullptr;
  }
  if (from._internal_has_spec()) {
    spec_ = new ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::ApplicationPolicySetSpec(*from.spec_);
  } else {
    spec_ = nullptr;
  }
  if (from._internal_has_status()) {
    status_ = new ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::ApplicationPolicySetStatus(*from.status_);
  } else {
    status_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.ApplicationPolicySet)
}

inline void ApplicationPolicySet::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&metadata_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&status_) -
    reinterpret_cast<char*>(&metadata_)) + sizeof(status_));
}

ApplicationPolicySet::~ApplicationPolicySet() {
  // @@protoc_insertion_point(destructor:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.ApplicationPolicySet)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ApplicationPolicySet::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete metadata_;
  if (this != internal_default_instance()) delete spec_;
  if (this != internal_default_instance()) delete status_;
}

void ApplicationPolicySet::ArenaDtor(void* object) {
  ApplicationPolicySet* _this = reinterpret_cast< ApplicationPolicySet* >(object);
  (void)_this;
}
void ApplicationPolicySet::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ApplicationPolicySet::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ApplicationPolicySet::Clear() {
// @@protoc_insertion_point(message_clear_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.ApplicationPolicySet)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(metadata_ != nullptr);
      metadata_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(spec_ != nullptr);
      spec_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(status_ != nullptr);
      status_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ApplicationPolicySet::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_metadata(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.ApplicationPolicySetSpec spec = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_spec(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.ApplicationPolicySetStatus status = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ApplicationPolicySet::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.ApplicationPolicySet)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::metadata(this), target, stream);
  }

  // optional .ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.ApplicationPolicySetSpec spec = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::spec(this), target, stream);
  }

  // optional .ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.ApplicationPolicySetStatus status = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::status(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.ApplicationPolicySet)
  return target;
}

size_t ApplicationPolicySet::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.ApplicationPolicySet)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *metadata_);
    }

    // optional .ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.ApplicationPolicySetSpec spec = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *spec_);
    }

    // optional .ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.ApplicationPolicySetStatus status = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *status_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ApplicationPolicySet::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ApplicationPolicySet::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ApplicationPolicySet::GetClassData() const { return &_class_data_; }

void ApplicationPolicySet::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<ApplicationPolicySet *>(to)->MergeFrom(
      static_cast<const ApplicationPolicySet &>(from));
}


void ApplicationPolicySet::MergeFrom(const ApplicationPolicySet& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.ApplicationPolicySet)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_metadata()->::k8s::io::apimachinery::pkg::apis::meta::v1::ObjectMeta::MergeFrom(from._internal_metadata());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_spec()->::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::ApplicationPolicySetSpec::MergeFrom(from._internal_spec());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_status()->::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::ApplicationPolicySetStatus::MergeFrom(from._internal_status());
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ApplicationPolicySet::CopyFrom(const ApplicationPolicySet& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.ApplicationPolicySet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ApplicationPolicySet::IsInitialized() const {
  return true;
}

void ApplicationPolicySet::InternalSwap(ApplicationPolicySet* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ApplicationPolicySet, status_)
      + sizeof(ApplicationPolicySet::status_)
      - PROTOBUF_FIELD_OFFSET(ApplicationPolicySet, metadata_)>(
          reinterpret_cast<char*>(&metadata_),
          reinterpret_cast<char*>(&other->metadata_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ApplicationPolicySet::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_ssd_2dgit_2ejuniper_2enet_2fcontrail_2fcn2_2fcontrail_2fpkg_2fapis_2fcore_2fv1alpha1_2fgenerated_2eproto_getter, &descriptor_table_ssd_2dgit_2ejuniper_2enet_2fcontrail_2fcn2_2fcontrail_2fpkg_2fapis_2fcore_2fv1alpha1_2fgenerated_2eproto_once,
      file_level_metadata_ssd_2dgit_2ejuniper_2enet_2fcontrail_2fcn2_2fcontrail_2fpkg_2fapis_2fcore_2fv1alpha1_2fgenerated_2eproto[10]);
}

// ===================================================================

class ApplicationPolicySetList::_Internal {
 public:
  using HasBits = decltype(std::declval<ApplicationPolicySetList>()._has_bits_);
  static const ::k8s::io::apimachinery::pkg::apis::meta::v1::ListMeta& metadata(const ApplicationPolicySetList* msg);
  static void set_has_metadata(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::k8s::io::apimachinery::pkg::apis::meta::v1::ListMeta&
ApplicationPolicySetList::_Internal::metadata(const ApplicationPolicySetList* msg) {
  return *msg->metadata_;
}
void ApplicationPolicySetList::clear_metadata() {
  if (metadata_ != nullptr) metadata_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
ApplicationPolicySetList::ApplicationPolicySetList(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  items_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.ApplicationPolicySetList)
}
ApplicationPolicySetList::ApplicationPolicySetList(const ApplicationPolicySetList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      items_(from.items_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_metadata()) {
    metadata_ = new ::k8s::io::apimachinery::pkg::apis::meta::v1::ListMeta(*from.metadata_);
  } else {
    metadata_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.ApplicationPolicySetList)
}

inline void ApplicationPolicySetList::SharedCtor() {
metadata_ = nullptr;
}

ApplicationPolicySetList::~ApplicationPolicySetList() {
  // @@protoc_insertion_point(destructor:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.ApplicationPolicySetList)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ApplicationPolicySetList::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete metadata_;
}

void ApplicationPolicySetList::ArenaDtor(void* object) {
  ApplicationPolicySetList* _this = reinterpret_cast< ApplicationPolicySetList* >(object);
  (void)_this;
}
void ApplicationPolicySetList::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ApplicationPolicySetList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ApplicationPolicySetList::Clear() {
// @@protoc_insertion_point(message_clear_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.ApplicationPolicySetList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  items_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(metadata_ != nullptr);
    metadata_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ApplicationPolicySetList::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_metadata(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.ApplicationPolicySet items = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_items(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ApplicationPolicySetList::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.ApplicationPolicySetList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::metadata(this), target, stream);
  }

  // repeated .ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.ApplicationPolicySet items = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_items_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_items(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.ApplicationPolicySetList)
  return target;
}

size_t ApplicationPolicySetList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.ApplicationPolicySetList)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.ApplicationPolicySet items = 2;
  total_size += 1UL * this->_internal_items_size();
  for (const auto& msg : this->items_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional .k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *metadata_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ApplicationPolicySetList::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ApplicationPolicySetList::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ApplicationPolicySetList::GetClassData() const { return &_class_data_; }

void ApplicationPolicySetList::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<ApplicationPolicySetList *>(to)->MergeFrom(
      static_cast<const ApplicationPolicySetList &>(from));
}


void ApplicationPolicySetList::MergeFrom(const ApplicationPolicySetList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.ApplicationPolicySetList)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  items_.MergeFrom(from.items_);
  if (from._internal_has_metadata()) {
    _internal_mutable_metadata()->::k8s::io::apimachinery::pkg::apis::meta::v1::ListMeta::MergeFrom(from._internal_metadata());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ApplicationPolicySetList::CopyFrom(const ApplicationPolicySetList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.ApplicationPolicySetList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ApplicationPolicySetList::IsInitialized() const {
  return true;
}

void ApplicationPolicySetList::InternalSwap(ApplicationPolicySetList* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  items_.InternalSwap(&other->items_);
  swap(metadata_, other->metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ApplicationPolicySetList::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_ssd_2dgit_2ejuniper_2enet_2fcontrail_2fcn2_2fcontrail_2fpkg_2fapis_2fcore_2fv1alpha1_2fgenerated_2eproto_getter, &descriptor_table_ssd_2dgit_2ejuniper_2enet_2fcontrail_2fcn2_2fcontrail_2fpkg_2fapis_2fcore_2fv1alpha1_2fgenerated_2eproto_once,
      file_level_metadata_ssd_2dgit_2ejuniper_2enet_2fcontrail_2fcn2_2fcontrail_2fpkg_2fapis_2fcore_2fv1alpha1_2fgenerated_2eproto[11]);
}

// ===================================================================

class ApplicationPolicySetSpec::_Internal {
 public:
  using HasBits = decltype(std::declval<ApplicationPolicySetSpec>()._has_bits_);
  static const ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::CommonSpec& commonspec(const ApplicationPolicySetSpec* msg);
  static void set_has_commonspec(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::CommonSpec&
ApplicationPolicySetSpec::_Internal::commonspec(const ApplicationPolicySetSpec* msg) {
  return *msg->commonspec_;
}
ApplicationPolicySetSpec::ApplicationPolicySetSpec(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  firewallpolicyreferences_(arena),
  tagreferences_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.ApplicationPolicySetSpec)
}
ApplicationPolicySetSpec::ApplicationPolicySetSpec(const ApplicationPolicySetSpec& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      firewallpolicyreferences_(from.firewallpolicyreferences_),
      tagreferences_(from.tagreferences_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_commonspec()) {
    commonspec_ = new ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::CommonSpec(*from.commonspec_);
  } else {
    commonspec_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.ApplicationPolicySetSpec)
}

inline void ApplicationPolicySetSpec::SharedCtor() {
commonspec_ = nullptr;
}

ApplicationPolicySetSpec::~ApplicationPolicySetSpec() {
  // @@protoc_insertion_point(destructor:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.ApplicationPolicySetSpec)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ApplicationPolicySetSpec::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete commonspec_;
}

void ApplicationPolicySetSpec::ArenaDtor(void* object) {
  ApplicationPolicySetSpec* _this = reinterpret_cast< ApplicationPolicySetSpec* >(object);
  (void)_this;
}
void ApplicationPolicySetSpec::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ApplicationPolicySetSpec::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ApplicationPolicySetSpec::Clear() {
// @@protoc_insertion_point(message_clear_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.ApplicationPolicySetSpec)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  firewallpolicyreferences_.Clear();
  tagreferences_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(commonspec_ != nullptr);
    commonspec_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ApplicationPolicySetSpec::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.CommonSpec commonSpec = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_commonspec(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.FirewallPolicyReference firewallPolicyReferences = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_firewallpolicyreferences(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.ResourceReference tagReferences = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_tagreferences(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ApplicationPolicySetSpec::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.ApplicationPolicySetSpec)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.CommonSpec commonSpec = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::commonspec(this), target, stream);
  }

  // repeated .ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.FirewallPolicyReference firewallPolicyReferences = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_firewallpolicyreferences_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_firewallpolicyreferences(i), target, stream);
  }

  // repeated .ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.ResourceReference tagReferences = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_tagreferences_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_tagreferences(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.ApplicationPolicySetSpec)
  return target;
}

size_t ApplicationPolicySetSpec::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.ApplicationPolicySetSpec)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.FirewallPolicyReference firewallPolicyReferences = 2;
  total_size += 1UL * this->_internal_firewallpolicyreferences_size();
  for (const auto& msg : this->firewallpolicyreferences_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.ResourceReference tagReferences = 3;
  total_size += 1UL * this->_internal_tagreferences_size();
  for (const auto& msg : this->tagreferences_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional .ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.CommonSpec commonSpec = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *commonspec_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ApplicationPolicySetSpec::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ApplicationPolicySetSpec::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ApplicationPolicySetSpec::GetClassData() const { return &_class_data_; }

void ApplicationPolicySetSpec::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<ApplicationPolicySetSpec *>(to)->MergeFrom(
      static_cast<const ApplicationPolicySetSpec &>(from));
}


void ApplicationPolicySetSpec::MergeFrom(const ApplicationPolicySetSpec& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.ApplicationPolicySetSpec)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  firewallpolicyreferences_.MergeFrom(from.firewallpolicyreferences_);
  tagreferences_.MergeFrom(from.tagreferences_);
  if (from._internal_has_commonspec()) {
    _internal_mutable_commonspec()->::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::CommonSpec::MergeFrom(from._internal_commonspec());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ApplicationPolicySetSpec::CopyFrom(const ApplicationPolicySetSpec& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.ApplicationPolicySetSpec)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ApplicationPolicySetSpec::IsInitialized() const {
  return true;
}

void ApplicationPolicySetSpec::InternalSwap(ApplicationPolicySetSpec* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  firewallpolicyreferences_.InternalSwap(&other->firewallpolicyreferences_);
  tagreferences_.InternalSwap(&other->tagreferences_);
  swap(commonspec_, other->commonspec_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ApplicationPolicySetSpec::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_ssd_2dgit_2ejuniper_2enet_2fcontrail_2fcn2_2fcontrail_2fpkg_2fapis_2fcore_2fv1alpha1_2fgenerated_2eproto_getter, &descriptor_table_ssd_2dgit_2ejuniper_2enet_2fcontrail_2fcn2_2fcontrail_2fpkg_2fapis_2fcore_2fv1alpha1_2fgenerated_2eproto_once,
      file_level_metadata_ssd_2dgit_2ejuniper_2enet_2fcontrail_2fcn2_2fcontrail_2fpkg_2fapis_2fcore_2fv1alpha1_2fgenerated_2eproto[12]);
}

// ===================================================================

class ApplicationPolicySetStatus::_Internal {
 public:
  using HasBits = decltype(std::declval<ApplicationPolicySetStatus>()._has_bits_);
  static const ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::CommonStatus& commonstatus(const ApplicationPolicySetStatus* msg);
  static void set_has_commonstatus(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_allapplications(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::CommonStatus&
ApplicationPolicySetStatus::_Internal::commonstatus(const ApplicationPolicySetStatus* msg) {
  return *msg->commonstatus_;
}
ApplicationPolicySetStatus::ApplicationPolicySetStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.ApplicationPolicySetStatus)
}
ApplicationPolicySetStatus::ApplicationPolicySetStatus(const ApplicationPolicySetStatus& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_commonstatus()) {
    commonstatus_ = new ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::CommonStatus(*from.commonstatus_);
  } else {
    commonstatus_ = nullptr;
  }
  allapplications_ = from.allapplications_;
  // @@protoc_insertion_point(copy_constructor:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.ApplicationPolicySetStatus)
}

inline void ApplicationPolicySetStatus::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&commonstatus_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&allapplications_) -
    reinterpret_cast<char*>(&commonstatus_)) + sizeof(allapplications_));
}

ApplicationPolicySetStatus::~ApplicationPolicySetStatus() {
  // @@protoc_insertion_point(destructor:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.ApplicationPolicySetStatus)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ApplicationPolicySetStatus::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete commonstatus_;
}

void ApplicationPolicySetStatus::ArenaDtor(void* object) {
  ApplicationPolicySetStatus* _this = reinterpret_cast< ApplicationPolicySetStatus* >(object);
  (void)_this;
}
void ApplicationPolicySetStatus::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ApplicationPolicySetStatus::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ApplicationPolicySetStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.ApplicationPolicySetStatus)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(commonstatus_ != nullptr);
    commonstatus_->Clear();
  }
  allapplications_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ApplicationPolicySetStatus::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.CommonStatus commonStatus = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_commonstatus(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool allApplications = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_allapplications(&has_bits);
          allapplications_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ApplicationPolicySetStatus::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.ApplicationPolicySetStatus)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.CommonStatus commonStatus = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::commonstatus(this), target, stream);
  }

  // optional bool allApplications = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_allapplications(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.ApplicationPolicySetStatus)
  return target;
}

size_t ApplicationPolicySetStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.ApplicationPolicySetStatus)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.CommonStatus commonStatus = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *commonstatus_);
    }

    // optional bool allApplications = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ApplicationPolicySetStatus::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ApplicationPolicySetStatus::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ApplicationPolicySetStatus::GetClassData() const { return &_class_data_; }

void ApplicationPolicySetStatus::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<ApplicationPolicySetStatus *>(to)->MergeFrom(
      static_cast<const ApplicationPolicySetStatus &>(from));
}


void ApplicationPolicySetStatus::MergeFrom(const ApplicationPolicySetStatus& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.ApplicationPolicySetStatus)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_commonstatus()->::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::CommonStatus::MergeFrom(from._internal_commonstatus());
    }
    if (cached_has_bits & 0x00000002u) {
      allapplications_ = from.allapplications_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ApplicationPolicySetStatus::CopyFrom(const ApplicationPolicySetStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.ApplicationPolicySetStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ApplicationPolicySetStatus::IsInitialized() const {
  return true;
}

void ApplicationPolicySetStatus::InternalSwap(ApplicationPolicySetStatus* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ApplicationPolicySetStatus, allapplications_)
      + sizeof(ApplicationPolicySetStatus::allapplications_)
      - PROTOBUF_FIELD_OFFSET(ApplicationPolicySetStatus, commonstatus_)>(
          reinterpret_cast<char*>(&commonstatus_),
          reinterpret_cast<char*>(&other->commonstatus_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ApplicationPolicySetStatus::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_ssd_2dgit_2ejuniper_2enet_2fcontrail_2fcn2_2fcontrail_2fpkg_2fapis_2fcore_2fv1alpha1_2fgenerated_2eproto_getter, &descriptor_table_ssd_2dgit_2ejuniper_2enet_2fcontrail_2fcn2_2fcontrail_2fpkg_2fapis_2fcore_2fv1alpha1_2fgenerated_2eproto_once,
      file_level_metadata_ssd_2dgit_2ejuniper_2enet_2fcontrail_2fcn2_2fcontrail_2fpkg_2fapis_2fcore_2fv1alpha1_2fgenerated_2eproto[13]);
}

// ===================================================================

class AuthenticationData::_Internal {
 public:
  using HasBits = decltype(std::declval<AuthenticationData>()._has_bits_);
  static void set_has_keytype(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

AuthenticationData::AuthenticationData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  keyitems_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.AuthenticationData)
}
AuthenticationData::AuthenticationData(const AuthenticationData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      keyitems_(from.keyitems_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  keytype_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_keytype()) {
    keytype_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_keytype(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.AuthenticationData)
}

inline void AuthenticationData::SharedCtor() {
keytype_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

AuthenticationData::~AuthenticationData() {
  // @@protoc_insertion_point(destructor:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.AuthenticationData)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void AuthenticationData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  keytype_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void AuthenticationData::ArenaDtor(void* object) {
  AuthenticationData* _this = reinterpret_cast< AuthenticationData* >(object);
  (void)_this;
}
void AuthenticationData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AuthenticationData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AuthenticationData::Clear() {
// @@protoc_insertion_point(message_clear_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.AuthenticationData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  keyitems_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    keytype_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AuthenticationData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string keyType = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_keytype();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.AuthenticationData.keyType");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.AuthenticationKeyItem keyItems = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_keyitems(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AuthenticationData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.AuthenticationData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string keyType = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_keytype().data(), static_cast<int>(this->_internal_keytype().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.AuthenticationData.keyType");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_keytype(), target);
  }

  // repeated .ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.AuthenticationKeyItem keyItems = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_keyitems_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_keyitems(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.AuthenticationData)
  return target;
}

size_t AuthenticationData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.AuthenticationData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.AuthenticationKeyItem keyItems = 2;
  total_size += 1UL * this->_internal_keyitems_size();
  for (const auto& msg : this->keyitems_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional string keyType = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_keytype());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AuthenticationData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    AuthenticationData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AuthenticationData::GetClassData() const { return &_class_data_; }

void AuthenticationData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<AuthenticationData *>(to)->MergeFrom(
      static_cast<const AuthenticationData &>(from));
}


void AuthenticationData::MergeFrom(const AuthenticationData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.AuthenticationData)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  keyitems_.MergeFrom(from.keyitems_);
  if (from._internal_has_keytype()) {
    _internal_set_keytype(from._internal_keytype());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AuthenticationData::CopyFrom(const AuthenticationData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.AuthenticationData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AuthenticationData::IsInitialized() const {
  return true;
}

void AuthenticationData::InternalSwap(AuthenticationData* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  keyitems_.InternalSwap(&other->keyitems_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &keytype_, GetArenaForAllocation(),
      &other->keytype_, other->GetArenaForAllocation()
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata AuthenticationData::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_ssd_2dgit_2ejuniper_2enet_2fcontrail_2fcn2_2fcontrail_2fpkg_2fapis_2fcore_2fv1alpha1_2fgenerated_2eproto_getter, &descriptor_table_ssd_2dgit_2ejuniper_2enet_2fcontrail_2fcn2_2fcontrail_2fpkg_2fapis_2fcore_2fv1alpha1_2fgenerated_2eproto_once,
      file_level_metadata_ssd_2dgit_2ejuniper_2enet_2fcontrail_2fcn2_2fcontrail_2fpkg_2fapis_2fcore_2fv1alpha1_2fgenerated_2eproto[14]);
}

// ===================================================================

class AuthenticationKeyItem::_Internal {
 public:
  using HasBits = decltype(std::declval<AuthenticationKeyItem>()._has_bits_);
  static void set_has_keyid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_key(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

AuthenticationKeyItem::AuthenticationKeyItem(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.AuthenticationKeyItem)
}
AuthenticationKeyItem::AuthenticationKeyItem(const AuthenticationKeyItem& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_key()) {
    key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_key(), 
      GetArenaForAllocation());
  }
  keyid_ = from.keyid_;
  // @@protoc_insertion_point(copy_constructor:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.AuthenticationKeyItem)
}

inline void AuthenticationKeyItem::SharedCtor() {
key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
keyid_ = 0;
}

AuthenticationKeyItem::~AuthenticationKeyItem() {
  // @@protoc_insertion_point(destructor:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.AuthenticationKeyItem)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void AuthenticationKeyItem::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void AuthenticationKeyItem::ArenaDtor(void* object) {
  AuthenticationKeyItem* _this = reinterpret_cast< AuthenticationKeyItem* >(object);
  (void)_this;
}
void AuthenticationKeyItem::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AuthenticationKeyItem::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AuthenticationKeyItem::Clear() {
// @@protoc_insertion_point(message_clear_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.AuthenticationKeyItem)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    key_.ClearNonDefaultToEmpty();
  }
  keyid_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AuthenticationKeyItem::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 keyId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_keyid(&has_bits);
          keyid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string key = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_key();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.AuthenticationKeyItem.key");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AuthenticationKeyItem::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.AuthenticationKeyItem)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 keyId = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_keyid(), target);
  }

  // optional string key = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_key().data(), static_cast<int>(this->_internal_key().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.AuthenticationKeyItem.key");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_key(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.AuthenticationKeyItem)
  return target;
}

size_t AuthenticationKeyItem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.AuthenticationKeyItem)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string key = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_key());
    }

    // optional int32 keyId = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_keyid());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AuthenticationKeyItem::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    AuthenticationKeyItem::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AuthenticationKeyItem::GetClassData() const { return &_class_data_; }

void AuthenticationKeyItem::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<AuthenticationKeyItem *>(to)->MergeFrom(
      static_cast<const AuthenticationKeyItem &>(from));
}


void AuthenticationKeyItem::MergeFrom(const AuthenticationKeyItem& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.AuthenticationKeyItem)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_key(from._internal_key());
    }
    if (cached_has_bits & 0x00000002u) {
      keyid_ = from.keyid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AuthenticationKeyItem::CopyFrom(const AuthenticationKeyItem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.AuthenticationKeyItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AuthenticationKeyItem::IsInitialized() const {
  return true;
}

void AuthenticationKeyItem::InternalSwap(AuthenticationKeyItem* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &key_, GetArenaForAllocation(),
      &other->key_, other->GetArenaForAllocation()
  );
  swap(keyid_, other->keyid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AuthenticationKeyItem::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_ssd_2dgit_2ejuniper_2enet_2fcontrail_2fcn2_2fcontrail_2fpkg_2fapis_2fcore_2fv1alpha1_2fgenerated_2eproto_getter, &descriptor_table_ssd_2dgit_2ejuniper_2enet_2fcontrail_2fcn2_2fcontrail_2fpkg_2fapis_2fcore_2fv1alpha1_2fgenerated_2eproto_once,
      file_level_metadata_ssd_2dgit_2ejuniper_2enet_2fcontrail_2fcn2_2fcontrail_2fpkg_2fapis_2fcore_2fv1alpha1_2fgenerated_2eproto[15]);
}

// ===================================================================

class BGPAsAService::_Internal {
 public:
  using HasBits = decltype(std::declval<BGPAsAService>()._has_bits_);
  static const ::k8s::io::apimachinery::pkg::apis::meta::v1::ObjectMeta& metadata(const BGPAsAService* msg);
  static void set_has_metadata(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::BGPAsAServiceSpec& spec(const BGPAsAService* msg);
  static void set_has_spec(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::BGPAsAServiceStatus& status(const BGPAsAService* msg);
  static void set_has_status(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::k8s::io::apimachinery::pkg::apis::meta::v1::ObjectMeta&
BGPAsAService::_Internal::metadata(const BGPAsAService* msg) {
  return *msg->metadata_;
}
const ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::BGPAsAServiceSpec&
BGPAsAService::_Internal::spec(const BGPAsAService* msg) {
  return *msg->spec_;
}
const ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::BGPAsAServiceStatus&
BGPAsAService::_Internal::status(const BGPAsAService* msg) {
  return *msg->status_;
}
void BGPAsAService::clear_metadata() {
  if (metadata_ != nullptr) metadata_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
BGPAsAService::BGPAsAService(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.BGPAsAService)
}
BGPAsAService::BGPAsAService(const BGPAsAService& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_metadata()) {
    metadata_ = new ::k8s::io::apimachinery::pkg::apis::meta::v1::ObjectMeta(*from.metadata_);
  } else {
    metadata_ = nullptr;
  }
  if (from._internal_has_spec()) {
    spec_ = new ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::BGPAsAServiceSpec(*from.spec_);
  } else {
    spec_ = nullptr;
  }
  if (from._internal_has_status()) {
    status_ = new ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::BGPAsAServiceStatus(*from.status_);
  } else {
    status_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.BGPAsAService)
}

inline void BGPAsAService::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&metadata_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&status_) -
    reinterpret_cast<char*>(&metadata_)) + sizeof(status_));
}

BGPAsAService::~BGPAsAService() {
  // @@protoc_insertion_point(destructor:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.BGPAsAService)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void BGPAsAService::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete metadata_;
  if (this != internal_default_instance()) delete spec_;
  if (this != internal_default_instance()) delete status_;
}

void BGPAsAService::ArenaDtor(void* object) {
  BGPAsAService* _this = reinterpret_cast< BGPAsAService* >(object);
  (void)_this;
}
void BGPAsAService::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BGPAsAService::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void BGPAsAService::Clear() {
// @@protoc_insertion_point(message_clear_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.BGPAsAService)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(metadata_ != nullptr);
      metadata_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(spec_ != nullptr);
      spec_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(status_ != nullptr);
      status_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BGPAsAService::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_metadata(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.BGPAsAServiceSpec spec = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_spec(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.BGPAsAServiceStatus status = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BGPAsAService::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.BGPAsAService)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::metadata(this), target, stream);
  }

  // optional .ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.BGPAsAServiceSpec spec = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::spec(this), target, stream);
  }

  // optional .ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.BGPAsAServiceStatus status = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::status(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.BGPAsAService)
  return target;
}

size_t BGPAsAService::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.BGPAsAService)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *metadata_);
    }

    // optional .ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.BGPAsAServiceSpec spec = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *spec_);
    }

    // optional .ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.BGPAsAServiceStatus status = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *status_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BGPAsAService::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    BGPAsAService::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*BGPAsAService::GetClassData() const { return &_class_data_; }

void BGPAsAService::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<BGPAsAService *>(to)->MergeFrom(
      static_cast<const BGPAsAService &>(from));
}


void BGPAsAService::MergeFrom(const BGPAsAService& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.BGPAsAService)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_metadata()->::k8s::io::apimachinery::pkg::apis::meta::v1::ObjectMeta::MergeFrom(from._internal_metadata());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_spec()->::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::BGPAsAServiceSpec::MergeFrom(from._internal_spec());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_status()->::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::BGPAsAServiceStatus::MergeFrom(from._internal_status());
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void BGPAsAService::CopyFrom(const BGPAsAService& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.BGPAsAService)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BGPAsAService::IsInitialized() const {
  return true;
}

void BGPAsAService::InternalSwap(BGPAsAService* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BGPAsAService, status_)
      + sizeof(BGPAsAService::status_)
      - PROTOBUF_FIELD_OFFSET(BGPAsAService, metadata_)>(
          reinterpret_cast<char*>(&metadata_),
          reinterpret_cast<char*>(&other->metadata_));
}

::PROTOBUF_NAMESPACE_ID::Metadata BGPAsAService::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_ssd_2dgit_2ejuniper_2enet_2fcontrail_2fcn2_2fcontrail_2fpkg_2fapis_2fcore_2fv1alpha1_2fgenerated_2eproto_getter, &descriptor_table_ssd_2dgit_2ejuniper_2enet_2fcontrail_2fcn2_2fcontrail_2fpkg_2fapis_2fcore_2fv1alpha1_2fgenerated_2eproto_once,
      file_level_metadata_ssd_2dgit_2ejuniper_2enet_2fcontrail_2fcn2_2fcontrail_2fpkg_2fapis_2fcore_2fv1alpha1_2fgenerated_2eproto[16]);
}

// ===================================================================

class BGPAsAServiceList::_Internal {
 public:
  using HasBits = decltype(std::declval<BGPAsAServiceList>()._has_bits_);
  static const ::k8s::io::apimachinery::pkg::apis::meta::v1::ListMeta& metadata(const BGPAsAServiceList* msg);
  static void set_has_metadata(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::k8s::io::apimachinery::pkg::apis::meta::v1::ListMeta&
BGPAsAServiceList::_Internal::metadata(const BGPAsAServiceList* msg) {
  return *msg->metadata_;
}
void BGPAsAServiceList::clear_metadata() {
  if (metadata_ != nullptr) metadata_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
BGPAsAServiceList::BGPAsAServiceList(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  items_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.BGPAsAServiceList)
}
BGPAsAServiceList::BGPAsAServiceList(const BGPAsAServiceList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      items_(from.items_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_metadata()) {
    metadata_ = new ::k8s::io::apimachinery::pkg::apis::meta::v1::ListMeta(*from.metadata_);
  } else {
    metadata_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.BGPAsAServiceList)
}

inline void BGPAsAServiceList::SharedCtor() {
metadata_ = nullptr;
}

BGPAsAServiceList::~BGPAsAServiceList() {
  // @@protoc_insertion_point(destructor:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.BGPAsAServiceList)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void BGPAsAServiceList::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete metadata_;
}

void BGPAsAServiceList::ArenaDtor(void* object) {
  BGPAsAServiceList* _this = reinterpret_cast< BGPAsAServiceList* >(object);
  (void)_this;
}
void BGPAsAServiceList::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BGPAsAServiceList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void BGPAsAServiceList::Clear() {
// @@protoc_insertion_point(message_clear_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.BGPAsAServiceList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  items_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(metadata_ != nullptr);
    metadata_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BGPAsAServiceList::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_metadata(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.BGPAsAService items = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_items(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BGPAsAServiceList::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.BGPAsAServiceList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::metadata(this), target, stream);
  }

  // repeated .ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.BGPAsAService items = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_items_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_items(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.BGPAsAServiceList)
  return target;
}

size_t BGPAsAServiceList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.BGPAsAServiceList)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.BGPAsAService items = 2;
  total_size += 1UL * this->_internal_items_size();
  for (const auto& msg : this->items_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional .k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *metadata_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BGPAsAServiceList::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    BGPAsAServiceList::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*BGPAsAServiceList::GetClassData() const { return &_class_data_; }

void BGPAsAServiceList::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<BGPAsAServiceList *>(to)->MergeFrom(
      static_cast<const BGPAsAServiceList &>(from));
}


void BGPAsAServiceList::MergeFrom(const BGPAsAServiceList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.BGPAsAServiceList)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  items_.MergeFrom(from.items_);
  if (from._internal_has_metadata()) {
    _internal_mutable_metadata()->::k8s::io::apimachinery::pkg::apis::meta::v1::ListMeta::MergeFrom(from._internal_metadata());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void BGPAsAServiceList::CopyFrom(const BGPAsAServiceList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.BGPAsAServiceList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BGPAsAServiceList::IsInitialized() const {
  return true;
}

void BGPAsAServiceList::InternalSwap(BGPAsAServiceList* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  items_.InternalSwap(&other->items_);
  swap(metadata_, other->metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BGPAsAServiceList::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_ssd_2dgit_2ejuniper_2enet_2fcontrail_2fcn2_2fcontrail_2fpkg_2fapis_2fcore_2fv1alpha1_2fgenerated_2eproto_getter, &descriptor_table_ssd_2dgit_2ejuniper_2enet_2fcontrail_2fcn2_2fcontrail_2fpkg_2fapis_2fcore_2fv1alpha1_2fgenerated_2eproto_once,
      file_level_metadata_ssd_2dgit_2ejuniper_2enet_2fcontrail_2fcn2_2fcontrail_2fpkg_2fapis_2fcore_2fv1alpha1_2fgenerated_2eproto[17]);
}

// ===================================================================

class BGPAsAServiceSpec::_Internal {
 public:
  using HasBits = decltype(std::declval<BGPAsAServiceSpec>()._has_bits_);
  static const ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::CommonSpec& commonspec(const BGPAsAServiceSpec* msg);
  static void set_has_commonspec(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_shared(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_ipaddress(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_autonomoussystem(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_suppressrouteadvertisement(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_ipv4mappedipv6nexthop(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static const ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::BGPSessionAttributes& bgpasaservicesessionattributes(const BGPAsAServiceSpec* msg);
  static void set_has_bgpasaservicesessionattributes(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::CommonSpec&
BGPAsAServiceSpec::_Internal::commonspec(const BGPAsAServiceSpec* msg) {
  return *msg->commonspec_;
}
const ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::BGPSessionAttributes&
BGPAsAServiceSpec::_Internal::bgpasaservicesessionattributes(const BGPAsAServiceSpec* msg) {
  return *msg->bgpasaservicesessionattributes_;
}
void BGPAsAServiceSpec::clear_virtualmachineinterfacesselector() {
  virtualmachineinterfacesselector_.Clear();
}
BGPAsAServiceSpec::BGPAsAServiceSpec(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  virtualmachineinterfacereferences_(arena),
  virtualmachineinterfacesselector_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.BGPAsAServiceSpec)
}
BGPAsAServiceSpec::BGPAsAServiceSpec(const BGPAsAServiceSpec& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      virtualmachineinterfacereferences_(from.virtualmachineinterfacereferences_),
      virtualmachineinterfacesselector_(from.virtualmachineinterfacesselector_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ipaddress_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_ipaddress()) {
    ipaddress_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_ipaddress(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_commonspec()) {
    commonspec_ = new ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::CommonSpec(*from.commonspec_);
  } else {
    commonspec_ = nullptr;
  }
  if (from._internal_has_bgpasaservicesessionattributes()) {
    bgpasaservicesessionattributes_ = new ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::BGPSessionAttributes(*from.bgpasaservicesessionattributes_);
  } else {
    bgpasaservicesessionattributes_ = nullptr;
  }
  ::memcpy(&autonomoussystem_, &from.autonomoussystem_,
    static_cast<size_t>(reinterpret_cast<char*>(&ipv4mappedipv6nexthop_) -
    reinterpret_cast<char*>(&autonomoussystem_)) + sizeof(ipv4mappedipv6nexthop_));
  // @@protoc_insertion_point(copy_constructor:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.BGPAsAServiceSpec)
}

inline void BGPAsAServiceSpec::SharedCtor() {
ipaddress_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&commonspec_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&ipv4mappedipv6nexthop_) -
    reinterpret_cast<char*>(&commonspec_)) + sizeof(ipv4mappedipv6nexthop_));
}

BGPAsAServiceSpec::~BGPAsAServiceSpec() {
  // @@protoc_insertion_point(destructor:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.BGPAsAServiceSpec)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void BGPAsAServiceSpec::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  ipaddress_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete commonspec_;
  if (this != internal_default_instance()) delete bgpasaservicesessionattributes_;
}

void BGPAsAServiceSpec::ArenaDtor(void* object) {
  BGPAsAServiceSpec* _this = reinterpret_cast< BGPAsAServiceSpec* >(object);
  (void)_this;
}
void BGPAsAServiceSpec::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BGPAsAServiceSpec::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void BGPAsAServiceSpec::Clear() {
// @@protoc_insertion_point(message_clear_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.BGPAsAServiceSpec)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  virtualmachineinterfacereferences_.Clear();
  virtualmachineinterfacesselector_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      ipaddress_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(commonspec_ != nullptr);
      commonspec_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(bgpasaservicesessionattributes_ != nullptr);
      bgpasaservicesessionattributes_->Clear();
    }
  }
  if (cached_has_bits & 0x00000078u) {
    ::memset(&autonomoussystem_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&ipv4mappedipv6nexthop_) -
        reinterpret_cast<char*>(&autonomoussystem_)) + sizeof(ipv4mappedipv6nexthop_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BGPAsAServiceSpec::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.CommonSpec commonSpec = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_commonspec(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool shared = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_shared(&has_bits);
          shared_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string ipAddress = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_ipaddress();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.BGPAsAServiceSpec.ipAddress");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 autonomousSystem = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_autonomoussystem(&has_bits);
          autonomoussystem_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool suppressRouteAdvertisement = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_suppressrouteadvertisement(&has_bits);
          suppressrouteadvertisement_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool ipv4MappedIPv6NextHop = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_ipv4mappedipv6nexthop(&has_bits);
          ipv4mappedipv6nexthop_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.BGPSessionAttributes bgpAsAServiceSessionAttributes = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_bgpasaservicesessionattributes(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.ResourceReference virtualMachineInterfaceReferences = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_virtualmachineinterfacereferences(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<66>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .k8s.io.apimachinery.pkg.apis.meta.v1.LabelSelector virtualMachineInterfacesSelector = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_virtualmachineinterfacesselector(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<74>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BGPAsAServiceSpec::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.BGPAsAServiceSpec)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.CommonSpec commonSpec = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::commonspec(this), target, stream);
  }

  // optional bool shared = 2;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_shared(), target);
  }

  // optional string ipAddress = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_ipaddress().data(), static_cast<int>(this->_internal_ipaddress().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.BGPAsAServiceSpec.ipAddress");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_ipaddress(), target);
  }

  // optional int32 autonomousSystem = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_autonomoussystem(), target);
  }

  // optional bool suppressRouteAdvertisement = 5;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_suppressrouteadvertisement(), target);
  }

  // optional bool ipv4MappedIPv6NextHop = 6;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_ipv4mappedipv6nexthop(), target);
  }

  // optional .ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.BGPSessionAttributes bgpAsAServiceSessionAttributes = 7;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::bgpasaservicesessionattributes(this), target, stream);
  }

  // repeated .ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.ResourceReference virtualMachineInterfaceReferences = 8;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_virtualmachineinterfacereferences_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, this->_internal_virtualmachineinterfacereferences(i), target, stream);
  }

  // repeated .k8s.io.apimachinery.pkg.apis.meta.v1.LabelSelector virtualMachineInterfacesSelector = 9;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_virtualmachineinterfacesselector_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, this->_internal_virtualmachineinterfacesselector(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.BGPAsAServiceSpec)
  return target;
}

size_t BGPAsAServiceSpec::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.BGPAsAServiceSpec)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.ResourceReference virtualMachineInterfaceReferences = 8;
  total_size += 1UL * this->_internal_virtualmachineinterfacereferences_size();
  for (const auto& msg : this->virtualmachineinterfacereferences_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .k8s.io.apimachinery.pkg.apis.meta.v1.LabelSelector virtualMachineInterfacesSelector = 9;
  total_size += 1UL * this->_internal_virtualmachineinterfacesselector_size();
  for (const auto& msg : this->virtualmachineinterfacesselector_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    // optional string ipAddress = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_ipaddress());
    }

    // optional .ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.CommonSpec commonSpec = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *commonspec_);
    }

    // optional .ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.BGPSessionAttributes bgpAsAServiceSessionAttributes = 7;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *bgpasaservicesessionattributes_);
    }

    // optional int32 autonomousSystem = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_autonomoussystem());
    }

    // optional bool shared = 2;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

    // optional bool suppressRouteAdvertisement = 5;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 1;
    }

    // optional bool ipv4MappedIPv6NextHop = 6;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BGPAsAServiceSpec::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    BGPAsAServiceSpec::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*BGPAsAServiceSpec::GetClassData() const { return &_class_data_; }

void BGPAsAServiceSpec::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<BGPAsAServiceSpec *>(to)->MergeFrom(
      static_cast<const BGPAsAServiceSpec &>(from));
}


void BGPAsAServiceSpec::MergeFrom(const BGPAsAServiceSpec& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.BGPAsAServiceSpec)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  virtualmachineinterfacereferences_.MergeFrom(from.virtualmachineinterfacereferences_);
  virtualmachineinterfacesselector_.MergeFrom(from.virtualmachineinterfacesselector_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_ipaddress(from._internal_ipaddress());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_commonspec()->::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::CommonSpec::MergeFrom(from._internal_commonspec());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_bgpasaservicesessionattributes()->::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::BGPSessionAttributes::MergeFrom(from._internal_bgpasaservicesessionattributes());
    }
    if (cached_has_bits & 0x00000008u) {
      autonomoussystem_ = from.autonomoussystem_;
    }
    if (cached_has_bits & 0x00000010u) {
      shared_ = from.shared_;
    }
    if (cached_has_bits & 0x00000020u) {
      suppressrouteadvertisement_ = from.suppressrouteadvertisement_;
    }
    if (cached_has_bits & 0x00000040u) {
      ipv4mappedipv6nexthop_ = from.ipv4mappedipv6nexthop_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void BGPAsAServiceSpec::CopyFrom(const BGPAsAServiceSpec& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.BGPAsAServiceSpec)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BGPAsAServiceSpec::IsInitialized() const {
  return true;
}

void BGPAsAServiceSpec::InternalSwap(BGPAsAServiceSpec* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  virtualmachineinterfacereferences_.InternalSwap(&other->virtualmachineinterfacereferences_);
  virtualmachineinterfacesselector_.InternalSwap(&other->virtualmachineinterfacesselector_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &ipaddress_, GetArenaForAllocation(),
      &other->ipaddress_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BGPAsAServiceSpec, ipv4mappedipv6nexthop_)
      + sizeof(BGPAsAServiceSpec::ipv4mappedipv6nexthop_)
      - PROTOBUF_FIELD_OFFSET(BGPAsAServiceSpec, commonspec_)>(
          reinterpret_cast<char*>(&commonspec_),
          reinterpret_cast<char*>(&other->commonspec_));
}

::PROTOBUF_NAMESPACE_ID::Metadata BGPAsAServiceSpec::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_ssd_2dgit_2ejuniper_2enet_2fcontrail_2fcn2_2fcontrail_2fpkg_2fapis_2fcore_2fv1alpha1_2fgenerated_2eproto_getter, &descriptor_table_ssd_2dgit_2ejuniper_2enet_2fcontrail_2fcn2_2fcontrail_2fpkg_2fapis_2fcore_2fv1alpha1_2fgenerated_2eproto_once,
      file_level_metadata_ssd_2dgit_2ejuniper_2enet_2fcontrail_2fcn2_2fcontrail_2fpkg_2fapis_2fcore_2fv1alpha1_2fgenerated_2eproto[18]);
}

// ===================================================================

class BGPAsAServiceStatus::_Internal {
 public:
  using HasBits = decltype(std::declval<BGPAsAServiceStatus>()._has_bits_);
  static const ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::CommonStatus& commonstatus(const BGPAsAServiceStatus* msg);
  static void set_has_commonstatus(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::CommonStatus&
BGPAsAServiceStatus::_Internal::commonstatus(const BGPAsAServiceStatus* msg) {
  return *msg->commonstatus_;
}
BGPAsAServiceStatus::BGPAsAServiceStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  bgprouterreferences_(arena),
  subnetreferences_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.BGPAsAServiceStatus)
}
BGPAsAServiceStatus::BGPAsAServiceStatus(const BGPAsAServiceStatus& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      bgprouterreferences_(from.bgprouterreferences_),
      subnetreferences_(from.subnetreferences_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_commonstatus()) {
    commonstatus_ = new ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::CommonStatus(*from.commonstatus_);
  } else {
    commonstatus_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.BGPAsAServiceStatus)
}

inline void BGPAsAServiceStatus::SharedCtor() {
commonstatus_ = nullptr;
}

BGPAsAServiceStatus::~BGPAsAServiceStatus() {
  // @@protoc_insertion_point(destructor:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.BGPAsAServiceStatus)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void BGPAsAServiceStatus::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete commonstatus_;
}

void BGPAsAServiceStatus::ArenaDtor(void* object) {
  BGPAsAServiceStatus* _this = reinterpret_cast< BGPAsAServiceStatus* >(object);
  (void)_this;
}
void BGPAsAServiceStatus::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BGPAsAServiceStatus::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void BGPAsAServiceStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.BGPAsAServiceStatus)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  bgprouterreferences_.Clear();
  subnetreferences_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(commonstatus_ != nullptr);
    commonstatus_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BGPAsAServiceStatus::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.CommonStatus commonStatus = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_commonstatus(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.BGPRouterReference bgpRouterReferences = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_bgprouterreferences(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.SubnetReference subnetReferences = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_subnetreferences(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BGPAsAServiceStatus::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.BGPAsAServiceStatus)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.CommonStatus commonStatus = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::commonstatus(this), target, stream);
  }

  // repeated .ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.BGPRouterReference bgpRouterReferences = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_bgprouterreferences_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_bgprouterreferences(i), target, stream);
  }

  // repeated .ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.SubnetReference subnetReferences = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_subnetreferences_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_subnetreferences(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.BGPAsAServiceStatus)
  return target;
}

size_t BGPAsAServiceStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.BGPAsAServiceStatus)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.BGPRouterReference bgpRouterReferences = 2;
  total_size += 1UL * this->_internal_bgprouterreferences_size();
  for (const auto& msg : this->bgprouterreferences_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.SubnetReference subnetReferences = 3;
  total_size += 1UL * this->_internal_subnetreferences_size();
  for (const auto& msg : this->subnetreferences_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional .ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.CommonStatus commonStatus = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *commonstatus_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BGPAsAServiceStatus::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    BGPAsAServiceStatus::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*BGPAsAServiceStatus::GetClassData() const { return &_class_data_; }

void BGPAsAServiceStatus::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<BGPAsAServiceStatus *>(to)->MergeFrom(
      static_cast<const BGPAsAServiceStatus &>(from));
}


void BGPAsAServiceStatus::MergeFrom(const BGPAsAServiceStatus& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.BGPAsAServiceStatus)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  bgprouterreferences_.MergeFrom(from.bgprouterreferences_);
  subnetreferences_.MergeFrom(from.subnetreferences_);
  if (from._internal_has_commonstatus()) {
    _internal_mutable_commonstatus()->::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::CommonStatus::MergeFrom(from._internal_commonstatus());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void BGPAsAServiceStatus::CopyFrom(const BGPAsAServiceStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.BGPAsAServiceStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BGPAsAServiceStatus::IsInitialized() const {
  return true;
}

void BGPAsAServiceStatus::InternalSwap(BGPAsAServiceStatus* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  bgprouterreferences_.InternalSwap(&other->bgprouterreferences_);
  subnetreferences_.InternalSwap(&other->subnetreferences_);
  swap(commonstatus_, other->commonstatus_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BGPAsAServiceStatus::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_ssd_2dgit_2ejuniper_2enet_2fcontrail_2fcn2_2fcontrail_2fpkg_2fapis_2fcore_2fv1alpha1_2fgenerated_2eproto_getter, &descriptor_table_ssd_2dgit_2ejuniper_2enet_2fcontrail_2fcn2_2fcontrail_2fpkg_2fapis_2fcore_2fv1alpha1_2fgenerated_2eproto_once,
      file_level_metadata_ssd_2dgit_2ejuniper_2enet_2fcontrail_2fcn2_2fcontrail_2fpkg_2fapis_2fcore_2fv1alpha1_2fgenerated_2eproto[19]);
}

// ===================================================================

class BGPFamilyAttributes::_Internal {
 public:
  using HasBits = decltype(std::declval<BGPFamilyAttributes>()._has_bits_);
  static void set_has_addressfamily(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_loopcount(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::BGPPrefixLimit& prefixlimit(const BGPFamilyAttributes* msg);
  static void set_has_prefixlimit(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::BGPPrefixLimit&
BGPFamilyAttributes::_Internal::prefixlimit(const BGPFamilyAttributes* msg) {
  return *msg->prefixlimit_;
}
BGPFamilyAttributes::BGPFamilyAttributes(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  defaulttunnelencap_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.BGPFamilyAttributes)
}
BGPFamilyAttributes::BGPFamilyAttributes(const BGPFamilyAttributes& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      defaulttunnelencap_(from.defaulttunnelencap_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  addressfamily_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_addressfamily()) {
    addressfamily_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_addressfamily(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_prefixlimit()) {
    prefixlimit_ = new ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::BGPPrefixLimit(*from.prefixlimit_);
  } else {
    prefixlimit_ = nullptr;
  }
  loopcount_ = from.loopcount_;
  // @@protoc_insertion_point(copy_constructor:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.BGPFamilyAttributes)
}

inline void BGPFamilyAttributes::SharedCtor() {
addressfamily_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&prefixlimit_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&loopcount_) -
    reinterpret_cast<char*>(&prefixlimit_)) + sizeof(loopcount_));
}

BGPFamilyAttributes::~BGPFamilyAttributes() {
  // @@protoc_insertion_point(destructor:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.BGPFamilyAttributes)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void BGPFamilyAttributes::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  addressfamily_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete prefixlimit_;
}

void BGPFamilyAttributes::ArenaDtor(void* object) {
  BGPFamilyAttributes* _this = reinterpret_cast< BGPFamilyAttributes* >(object);
  (void)_this;
}
void BGPFamilyAttributes::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BGPFamilyAttributes::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void BGPFamilyAttributes::Clear() {
// @@protoc_insertion_point(message_clear_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.BGPFamilyAttributes)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  defaulttunnelencap_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      addressfamily_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(prefixlimit_ != nullptr);
      prefixlimit_->Clear();
    }
  }
  loopcount_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BGPFamilyAttributes::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string addressFamily = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_addressfamily();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.BGPFamilyAttributes.addressFamily");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 loopCount = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_loopcount(&has_bits);
          loopcount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.BGPPrefixLimit prefixLimit = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_prefixlimit(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string defaultTunnelEncap = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_defaulttunnelencap();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            #ifndef NDEBUG
            ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.BGPFamilyAttributes.defaultTunnelEncap");
            #endif  // !NDEBUG
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BGPFamilyAttributes::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.BGPFamilyAttributes)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string addressFamily = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_addressfamily().data(), static_cast<int>(this->_internal_addressfamily().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.BGPFamilyAttributes.addressFamily");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_addressfamily(), target);
  }

  // optional int32 loopCount = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_loopcount(), target);
  }

  // optional .ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.BGPPrefixLimit prefixLimit = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::prefixlimit(this), target, stream);
  }

  // repeated string defaultTunnelEncap = 4;
  for (int i = 0, n = this->_internal_defaulttunnelencap_size(); i < n; i++) {
    const auto& s = this->_internal_defaulttunnelencap(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.BGPFamilyAttributes.defaultTunnelEncap");
    target = stream->WriteString(4, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.BGPFamilyAttributes)
  return target;
}

size_t BGPFamilyAttributes::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.BGPFamilyAttributes)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string defaultTunnelEncap = 4;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(defaulttunnelencap_.size());
  for (int i = 0, n = defaulttunnelencap_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      defaulttunnelencap_.Get(i));
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string addressFamily = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_addressfamily());
    }

    // optional .ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.BGPPrefixLimit prefixLimit = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *prefixlimit_);
    }

    // optional int32 loopCount = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_loopcount());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BGPFamilyAttributes::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    BGPFamilyAttributes::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*BGPFamilyAttributes::GetClassData() const { return &_class_data_; }

void BGPFamilyAttributes::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<BGPFamilyAttributes *>(to)->MergeFrom(
      static_cast<const BGPFamilyAttributes &>(from));
}


void BGPFamilyAttributes::MergeFrom(const BGPFamilyAttributes& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.BGPFamilyAttributes)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  defaulttunnelencap_.MergeFrom(from.defaulttunnelencap_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_addressfamily(from._internal_addressfamily());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_prefixlimit()->::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::BGPPrefixLimit::MergeFrom(from._internal_prefixlimit());
    }
    if (cached_has_bits & 0x00000004u) {
      loopcount_ = from.loopcount_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void BGPFamilyAttributes::CopyFrom(const BGPFamilyAttributes& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.BGPFamilyAttributes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BGPFamilyAttributes::IsInitialized() const {
  return true;
}

void BGPFamilyAttributes::InternalSwap(BGPFamilyAttributes* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  defaulttunnelencap_.InternalSwap(&other->defaulttunnelencap_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &addressfamily_, GetArenaForAllocation(),
      &other->addressfamily_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BGPFamilyAttributes, loopcount_)
      + sizeof(BGPFamilyAttributes::loopcount_)
      - PROTOBUF_FIELD_OFFSET(BGPFamilyAttributes, prefixlimit_)>(
          reinterpret_cast<char*>(&prefixlimit_),
          reinterpret_cast<char*>(&other->prefixlimit_));
}

::PROTOBUF_NAMESPACE_ID::Metadata BGPFamilyAttributes::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_ssd_2dgit_2ejuniper_2enet_2fcontrail_2fcn2_2fcontrail_2fpkg_2fapis_2fcore_2fv1alpha1_2fgenerated_2eproto_getter, &descriptor_table_ssd_2dgit_2ejuniper_2enet_2fcontrail_2fcn2_2fcontrail_2fpkg_2fapis_2fcore_2fv1alpha1_2fgenerated_2eproto_once,
      file_level_metadata_ssd_2dgit_2ejuniper_2enet_2fcontrail_2fcn2_2fcontrail_2fpkg_2fapis_2fcore_2fv1alpha1_2fgenerated_2eproto[20]);
}

// ===================================================================

class BGPPrefixLimit::_Internal {
 public:
  using HasBits = decltype(std::declval<BGPPrefixLimit>()._has_bits_);
  static void set_has_idletimeout(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_maximum(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

BGPPrefixLimit::BGPPrefixLimit(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.BGPPrefixLimit)
}
BGPPrefixLimit::BGPPrefixLimit(const BGPPrefixLimit& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&idletimeout_, &from.idletimeout_,
    static_cast<size_t>(reinterpret_cast<char*>(&maximum_) -
    reinterpret_cast<char*>(&idletimeout_)) + sizeof(maximum_));
  // @@protoc_insertion_point(copy_constructor:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.BGPPrefixLimit)
}

inline void BGPPrefixLimit::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&idletimeout_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&maximum_) -
    reinterpret_cast<char*>(&idletimeout_)) + sizeof(maximum_));
}

BGPPrefixLimit::~BGPPrefixLimit() {
  // @@protoc_insertion_point(destructor:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.BGPPrefixLimit)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void BGPPrefixLimit::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void BGPPrefixLimit::ArenaDtor(void* object) {
  BGPPrefixLimit* _this = reinterpret_cast< BGPPrefixLimit* >(object);
  (void)_this;
}
void BGPPrefixLimit::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BGPPrefixLimit::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void BGPPrefixLimit::Clear() {
// @@protoc_insertion_point(message_clear_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.BGPPrefixLimit)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&idletimeout_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&maximum_) -
        reinterpret_cast<char*>(&idletimeout_)) + sizeof(maximum_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BGPPrefixLimit::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 idleTimeout = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_idletimeout(&has_bits);
          idletimeout_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 maximum = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_maximum(&has_bits);
          maximum_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BGPPrefixLimit::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.BGPPrefixLimit)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 idleTimeout = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_idletimeout(), target);
  }

  // optional int32 maximum = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_maximum(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.BGPPrefixLimit)
  return target;
}

size_t BGPPrefixLimit::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.BGPPrefixLimit)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional int32 idleTimeout = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_idletimeout());
    }

    // optional int32 maximum = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_maximum());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BGPPrefixLimit::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    BGPPrefixLimit::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*BGPPrefixLimit::GetClassData() const { return &_class_data_; }

void BGPPrefixLimit::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<BGPPrefixLimit *>(to)->MergeFrom(
      static_cast<const BGPPrefixLimit &>(from));
}


void BGPPrefixLimit::MergeFrom(const BGPPrefixLimit& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.BGPPrefixLimit)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      idletimeout_ = from.idletimeout_;
    }
    if (cached_has_bits & 0x00000002u) {
      maximum_ = from.maximum_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void BGPPrefixLimit::CopyFrom(const BGPPrefixLimit& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.BGPPrefixLimit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BGPPrefixLimit::IsInitialized() const {
  return true;
}

void BGPPrefixLimit::InternalSwap(BGPPrefixLimit* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BGPPrefixLimit, maximum_)
      + sizeof(BGPPrefixLimit::maximum_)
      - PROTOBUF_FIELD_OFFSET(BGPPrefixLimit, idletimeout_)>(
          reinterpret_cast<char*>(&idletimeout_),
          reinterpret_cast<char*>(&other->idletimeout_));
}

::PROTOBUF_NAMESPACE_ID::Metadata BGPPrefixLimit::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_ssd_2dgit_2ejuniper_2enet_2fcontrail_2fcn2_2fcontrail_2fpkg_2fapis_2fcore_2fv1alpha1_2fgenerated_2eproto_getter, &descriptor_table_ssd_2dgit_2ejuniper_2enet_2fcontrail_2fcn2_2fcontrail_2fpkg_2fapis_2fcore_2fv1alpha1_2fgenerated_2eproto_once,
      file_level_metadata_ssd_2dgit_2ejuniper_2enet_2fcontrail_2fcn2_2fcontrail_2fpkg_2fapis_2fcore_2fv1alpha1_2fgenerated_2eproto[21]);
}

// ===================================================================

class BGPRouter::_Internal {
 public:
  using HasBits = decltype(std::declval<BGPRouter>()._has_bits_);
  static const ::k8s::io::apimachinery::pkg::apis::meta::v1::ObjectMeta& metadata(const BGPRouter* msg);
  static void set_has_metadata(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::BGPRouterSpec& spec(const BGPRouter* msg);
  static void set_has_spec(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::BGPRouterStatus& status(const BGPRouter* msg);
  static void set_has_status(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::k8s::io::apimachinery::pkg::apis::meta::v1::ObjectMeta&
BGPRouter::_Internal::metadata(const BGPRouter* msg) {
  return *msg->metadata_;
}
const ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::BGPRouterSpec&
BGPRouter::_Internal::spec(const BGPRouter* msg) {
  return *msg->spec_;
}
const ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::BGPRouterStatus&
BGPRouter::_Internal::status(const BGPRouter* msg) {
  return *msg->status_;
}
void BGPRouter::clear_metadata() {
  if (metadata_ != nullptr) metadata_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
BGPRouter::BGPRouter(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.BGPRouter)
}
BGPRouter::BGPRouter(const BGPRouter& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_metadata()) {
    metadata_ = new ::k8s::io::apimachinery::pkg::apis::meta::v1::ObjectMeta(*from.metadata_);
  } else {
    metadata_ = nullptr;
  }
  if (from._internal_has_spec()) {
    spec_ = new ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::BGPRouterSpec(*from.spec_);
  } else {
    spec_ = nullptr;
  }
  if (from._internal_has_status()) {
    status_ = new ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::BGPRouterStatus(*from.status_);
  } else {
    status_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.BGPRouter)
}

inline void BGPRouter::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&metadata_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&status_) -
    reinterpret_cast<char*>(&metadata_)) + sizeof(status_));
}

BGPRouter::~BGPRouter() {
  // @@protoc_insertion_point(destructor:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.BGPRouter)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void BGPRouter::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete metadata_;
  if (this != internal_default_instance()) delete spec_;
  if (this != internal_default_instance()) delete status_;
}

void BGPRouter::ArenaDtor(void* object) {
  BGPRouter* _this = reinterpret_cast< BGPRouter* >(object);
  (void)_this;
}
void BGPRouter::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BGPRouter::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void BGPRouter::Clear() {
// @@protoc_insertion_point(message_clear_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.BGPRouter)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(metadata_ != nullptr);
      metadata_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(spec_ != nullptr);
      spec_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(status_ != nullptr);
      status_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BGPRouter::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_metadata(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.BGPRouterSpec spec = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_spec(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.BGPRouterStatus status = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BGPRouter::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.BGPRouter)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::metadata(this), target, stream);
  }

  // optional .ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.BGPRouterSpec spec = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::spec(this), target, stream);
  }

  // optional .ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.BGPRouterStatus status = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::status(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.BGPRouter)
  return target;
}

size_t BGPRouter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.BGPRouter)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *metadata_);
    }

    // optional .ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.BGPRouterSpec spec = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *spec_);
    }

    // optional .ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.BGPRouterStatus status = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *status_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BGPRouter::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    BGPRouter::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*BGPRouter::GetClassData() const { return &_class_data_; }

void BGPRouter::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<BGPRouter *>(to)->MergeFrom(
      static_cast<const BGPRouter &>(from));
}


void BGPRouter::MergeFrom(const BGPRouter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.BGPRouter)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_metadata()->::k8s::io::apimachinery::pkg::apis::meta::v1::ObjectMeta::MergeFrom(from._internal_metadata());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_spec()->::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::BGPRouterSpec::MergeFrom(from._internal_spec());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_status()->::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::BGPRouterStatus::MergeFrom(from._internal_status());
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void BGPRouter::CopyFrom(const BGPRouter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.BGPRouter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BGPRouter::IsInitialized() const {
  return true;
}

void BGPRouter::InternalSwap(BGPRouter* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BGPRouter, status_)
      + sizeof(BGPRouter::status_)
      - PROTOBUF_FIELD_OFFSET(BGPRouter, metadata_)>(
          reinterpret_cast<char*>(&metadata_),
          reinterpret_cast<char*>(&other->metadata_));
}

::PROTOBUF_NAMESPACE_ID::Metadata BGPRouter::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_ssd_2dgit_2ejuniper_2enet_2fcontrail_2fcn2_2fcontrail_2fpkg_2fapis_2fcore_2fv1alpha1_2fgenerated_2eproto_getter, &descriptor_table_ssd_2dgit_2ejuniper_2enet_2fcontrail_2fcn2_2fcontrail_2fpkg_2fapis_2fcore_2fv1alpha1_2fgenerated_2eproto_once,
      file_level_metadata_ssd_2dgit_2ejuniper_2enet_2fcontrail_2fcn2_2fcontrail_2fpkg_2fapis_2fcore_2fv1alpha1_2fgenerated_2eproto[22]);
}

// ===================================================================

class BGPRouterList::_Internal {
 public:
  using HasBits = decltype(std::declval<BGPRouterList>()._has_bits_);
  static const ::k8s::io::apimachinery::pkg::apis::meta::v1::ListMeta& metadata(const BGPRouterList* msg);
  static void set_has_metadata(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::k8s::io::apimachinery::pkg::apis::meta::v1::ListMeta&
BGPRouterList::_Internal::metadata(const BGPRouterList* msg) {
  return *msg->metadata_;
}
void BGPRouterList::clear_metadata() {
  if (metadata_ != nullptr) metadata_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
BGPRouterList::BGPRouterList(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  items_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.BGPRouterList)
}
BGPRouterList::BGPRouterList(const BGPRouterList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      items_(from.items_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_metadata()) {
    metadata_ = new ::k8s::io::apimachinery::pkg::apis::meta::v1::ListMeta(*from.metadata_);
  } else {
    metadata_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.BGPRouterList)
}

inline void BGPRouterList::SharedCtor() {
metadata_ = nullptr;
}

BGPRouterList::~BGPRouterList() {
  // @@protoc_insertion_point(destructor:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.BGPRouterList)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void BGPRouterList::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete metadata_;
}

void BGPRouterList::ArenaDtor(void* object) {
  BGPRouterList* _this = reinterpret_cast< BGPRouterList* >(object);
  (void)_this;
}
void BGPRouterList::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BGPRouterList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void BGPRouterList::Clear() {
// @@protoc_insertion_point(message_clear_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.BGPRouterList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  items_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(metadata_ != nullptr);
    metadata_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BGPRouterList::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_metadata(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.BGPRouter items = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_items(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BGPRouterList::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.BGPRouterList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::metadata(this), target, stream);
  }

  // repeated .ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.BGPRouter items = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_items_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_items(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.BGPRouterList)
  return target;
}

size_t BGPRouterList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.BGPRouterList)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.BGPRouter items = 2;
  total_size += 1UL * this->_internal_items_size();
  for (const auto& msg : this->items_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional .k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *metadata_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BGPRouterList::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    BGPRouterList::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*BGPRouterList::GetClassData() const { return &_class_data_; }

void BGPRouterList::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<BGPRouterList *>(to)->MergeFrom(
      static_cast<const BGPRouterList &>(from));
}


void BGPRouterList::MergeFrom(const BGPRouterList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.BGPRouterList)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  items_.MergeFrom(from.items_);
  if (from._internal_has_metadata()) {
    _internal_mutable_metadata()->::k8s::io::apimachinery::pkg::apis::meta::v1::ListMeta::MergeFrom(from._internal_metadata());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void BGPRouterList::CopyFrom(const BGPRouterList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.BGPRouterList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BGPRouterList::IsInitialized() const {
  return true;
}

void BGPRouterList::InternalSwap(BGPRouterList* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  items_.InternalSwap(&other->items_);
  swap(metadata_, other->metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BGPRouterList::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_ssd_2dgit_2ejuniper_2enet_2fcontrail_2fcn2_2fcontrail_2fpkg_2fapis_2fcore_2fv1alpha1_2fgenerated_2eproto_getter, &descriptor_table_ssd_2dgit_2ejuniper_2enet_2fcontrail_2fcn2_2fcontrail_2fpkg_2fapis_2fcore_2fv1alpha1_2fgenerated_2eproto_once,
      file_level_metadata_ssd_2dgit_2ejuniper_2enet_2fcontrail_2fcn2_2fcontrail_2fpkg_2fapis_2fcore_2fv1alpha1_2fgenerated_2eproto[23]);
}

// ===================================================================

class BGPRouterParameters::_Internal {
 public:
  using HasBits = decltype(std::declval<BGPRouterParameters>()._has_bits_);
  static void set_has_admindown(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_vendor(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_clusterid(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_autonomoussystem(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_identifier(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_address(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_port(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_sourceport(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_holdtime(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static const ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::AddressFamilies& addressfamilies(const BGPRouterParameters* msg);
  static void set_has_addressfamilies(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static const ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::AuthenticationData& authdata(const BGPRouterParameters* msg);
  static void set_has_authdata(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_localautonomoussystem(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_routertype(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_gatewayaddress(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_ipv6gatewayaddress(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
};

const ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::AddressFamilies&
BGPRouterParameters::_Internal::addressfamilies(const BGPRouterParameters* msg) {
  return *msg->addressfamilies_;
}
const ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::AuthenticationData&
BGPRouterParameters::_Internal::authdata(const BGPRouterParameters* msg) {
  return *msg->authdata_;
}
BGPRouterParameters::BGPRouterParameters(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.BGPRouterParameters)
}
BGPRouterParameters::BGPRouterParameters(const BGPRouterParameters& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  vendor_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_vendor()) {
    vendor_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_vendor(), 
      GetArenaForAllocation());
  }
  identifier_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_identifier()) {
    identifier_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_identifier(), 
      GetArenaForAllocation());
  }
  address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_address()) {
    address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_address(), 
      GetArenaForAllocation());
  }
  routertype_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_routertype()) {
    routertype_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_routertype(), 
      GetArenaForAllocation());
  }
  gatewayaddress_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_gatewayaddress()) {
    gatewayaddress_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_gatewayaddress(), 
      GetArenaForAllocation());
  }
  ipv6gatewayaddress_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_ipv6gatewayaddress()) {
    ipv6gatewayaddress_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_ipv6gatewayaddress(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_addressfamilies()) {
    addressfamilies_ = new ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::AddressFamilies(*from.addressfamilies_);
  } else {
    addressfamilies_ = nullptr;
  }
  if (from._internal_has_authdata()) {
    authdata_ = new ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::AuthenticationData(*from.authdata_);
  } else {
    authdata_ = nullptr;
  }
  ::memcpy(&admindown_, &from.admindown_,
    static_cast<size_t>(reinterpret_cast<char*>(&localautonomoussystem_) -
    reinterpret_cast<char*>(&admindown_)) + sizeof(localautonomoussystem_));
  // @@protoc_insertion_point(copy_constructor:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.BGPRouterParameters)
}

inline void BGPRouterParameters::SharedCtor() {
vendor_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
identifier_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
routertype_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
gatewayaddress_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
ipv6gatewayaddress_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&addressfamilies_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&localautonomoussystem_) -
    reinterpret_cast<char*>(&addressfamilies_)) + sizeof(localautonomoussystem_));
}

BGPRouterParameters::~BGPRouterParameters() {
  // @@protoc_insertion_point(destructor:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.BGPRouterParameters)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void BGPRouterParameters::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  vendor_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  identifier_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  address_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  routertype_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  gatewayaddress_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ipv6gatewayaddress_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete addressfamilies_;
  if (this != internal_default_instance()) delete authdata_;
}

void BGPRouterParameters::ArenaDtor(void* object) {
  BGPRouterParameters* _this = reinterpret_cast< BGPRouterParameters* >(object);
  (void)_this;
}
void BGPRouterParameters::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BGPRouterParameters::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void BGPRouterParameters::Clear() {
// @@protoc_insertion_point(message_clear_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.BGPRouterParameters)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      vendor_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      identifier_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      address_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      routertype_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000010u) {
      gatewayaddress_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000020u) {
      ipv6gatewayaddress_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(addressfamilies_ != nullptr);
      addressfamilies_->Clear();
    }
    if (cached_has_bits & 0x00000080u) {
      GOOGLE_DCHECK(authdata_ != nullptr);
      authdata_->Clear();
    }
  }
  if (cached_has_bits & 0x00007f00u) {
    ::memset(&admindown_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&localautonomoussystem_) -
        reinterpret_cast<char*>(&admindown_)) + sizeof(localautonomoussystem_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BGPRouterParameters::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bool adminDown = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_admindown(&has_bits);
          admindown_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string vendor = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_vendor();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.BGPRouterParameters.vendor");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 clusterID = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_clusterid(&has_bits);
          clusterid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 autonomousSystem = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_autonomoussystem(&has_bits);
          autonomoussystem_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string identifier = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_identifier();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.BGPRouterParameters.identifier");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string address = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_address();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.BGPRouterParameters.address");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 port = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_port(&has_bits);
          port_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 sourcePort = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_sourceport(&has_bits);
          sourceport_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 holdTime = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_holdtime(&has_bits);
          holdtime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.AddressFamilies addressFamilies = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_addressfamilies(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.AuthenticationData authData = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_authdata(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 localAutonomousSystem = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          _Internal::set_has_localautonomoussystem(&has_bits);
          localautonomoussystem_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string routerType = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          auto str = _internal_mutable_routertype();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.BGPRouterParameters.routerType");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string gatewayAddress = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          auto str = _internal_mutable_gatewayaddress();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.BGPRouterParameters.gatewayAddress");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string ipv6GatewayAddress = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          auto str = _internal_mutable_ipv6gatewayaddress();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.BGPRouterParameters.ipv6GatewayAddress");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BGPRouterParameters::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.BGPRouterParameters)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool adminDown = 1;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_admindown(), target);
  }

  // optional string vendor = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_vendor().data(), static_cast<int>(this->_internal_vendor().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.BGPRouterParameters.vendor");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_vendor(), target);
  }

  // optional int64 clusterID = 3;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_clusterid(), target);
  }

  // optional int32 autonomousSystem = 4;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_autonomoussystem(), target);
  }

  // optional string identifier = 5;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_identifier().data(), static_cast<int>(this->_internal_identifier().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.BGPRouterParameters.identifier");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_identifier(), target);
  }

  // optional string address = 6;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_address().data(), static_cast<int>(this->_internal_address().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.BGPRouterParameters.address");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_address(), target);
  }

  // optional int32 port = 7;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->_internal_port(), target);
  }

  // optional int32 sourcePort = 8;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(8, this->_internal_sourceport(), target);
  }

  // optional int32 holdTime = 9;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(9, this->_internal_holdtime(), target);
  }

  // optional .ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.AddressFamilies addressFamilies = 10;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::addressfamilies(this), target, stream);
  }

  // optional .ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.AuthenticationData authData = 11;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        11, _Internal::authdata(this), target, stream);
  }

  // optional int32 localAutonomousSystem = 12;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(12, this->_internal_localautonomoussystem(), target);
  }

  // optional string routerType = 13;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_routertype().data(), static_cast<int>(this->_internal_routertype().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.BGPRouterParameters.routerType");
    target = stream->WriteStringMaybeAliased(
        13, this->_internal_routertype(), target);
  }

  // optional string gatewayAddress = 14;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_gatewayaddress().data(), static_cast<int>(this->_internal_gatewayaddress().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.BGPRouterParameters.gatewayAddress");
    target = stream->WriteStringMaybeAliased(
        14, this->_internal_gatewayaddress(), target);
  }

  // optional string ipv6GatewayAddress = 15;
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_ipv6gatewayaddress().data(), static_cast<int>(this->_internal_ipv6gatewayaddress().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.BGPRouterParameters.ipv6GatewayAddress");
    target = stream->WriteStringMaybeAliased(
        15, this->_internal_ipv6gatewayaddress(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.BGPRouterParameters)
  return target;
}

size_t BGPRouterParameters::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.BGPRouterParameters)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string vendor = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_vendor());
    }

    // optional string identifier = 5;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_identifier());
    }

    // optional string address = 6;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_address());
    }

    // optional string routerType = 13;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_routertype());
    }

    // optional string gatewayAddress = 14;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_gatewayaddress());
    }

    // optional string ipv6GatewayAddress = 15;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_ipv6gatewayaddress());
    }

    // optional .ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.AddressFamilies addressFamilies = 10;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *addressfamilies_);
    }

    // optional .ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.AuthenticationData authData = 11;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *authdata_);
    }

  }
  if (cached_has_bits & 0x00007f00u) {
    // optional bool adminDown = 1;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 + 1;
    }

    // optional int32 autonomousSystem = 4;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_autonomoussystem());
    }

    // optional int64 clusterID = 3;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->_internal_clusterid());
    }

    // optional int32 port = 7;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_port());
    }

    // optional int32 sourcePort = 8;
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_sourceport());
    }

    // optional int32 holdTime = 9;
    if (cached_has_bits & 0x00002000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_holdtime());
    }

    // optional int32 localAutonomousSystem = 12;
    if (cached_has_bits & 0x00004000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_localautonomoussystem());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BGPRouterParameters::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    BGPRouterParameters::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*BGPRouterParameters::GetClassData() const { return &_class_data_; }

void BGPRouterParameters::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<BGPRouterParameters *>(to)->MergeFrom(
      static_cast<const BGPRouterParameters &>(from));
}


void BGPRouterParameters::MergeFrom(const BGPRouterParameters& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.BGPRouterParameters)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_vendor(from._internal_vendor());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_identifier(from._internal_identifier());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_address(from._internal_address());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_set_routertype(from._internal_routertype());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_set_gatewayaddress(from._internal_gatewayaddress());
    }
    if (cached_has_bits & 0x00000020u) {
      _internal_set_ipv6gatewayaddress(from._internal_ipv6gatewayaddress());
    }
    if (cached_has_bits & 0x00000040u) {
      _internal_mutable_addressfamilies()->::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::AddressFamilies::MergeFrom(from._internal_addressfamilies());
    }
    if (cached_has_bits & 0x00000080u) {
      _internal_mutable_authdata()->::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::AuthenticationData::MergeFrom(from._internal_authdata());
    }
  }
  if (cached_has_bits & 0x00007f00u) {
    if (cached_has_bits & 0x00000100u) {
      admindown_ = from.admindown_;
    }
    if (cached_has_bits & 0x00000200u) {
      autonomoussystem_ = from.autonomoussystem_;
    }
    if (cached_has_bits & 0x00000400u) {
      clusterid_ = from.clusterid_;
    }
    if (cached_has_bits & 0x00000800u) {
      port_ = from.port_;
    }
    if (cached_has_bits & 0x00001000u) {
      sourceport_ = from.sourceport_;
    }
    if (cached_has_bits & 0x00002000u) {
      holdtime_ = from.holdtime_;
    }
    if (cached_has_bits & 0x00004000u) {
      localautonomoussystem_ = from.localautonomoussystem_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void BGPRouterParameters::CopyFrom(const BGPRouterParameters& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.BGPRouterParameters)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BGPRouterParameters::IsInitialized() const {
  return true;
}

void BGPRouterParameters::InternalSwap(BGPRouterParameters* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &vendor_, GetArenaForAllocation(),
      &other->vendor_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &identifier_, GetArenaForAllocation(),
      &other->identifier_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &address_, GetArenaForAllocation(),
      &other->address_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &routertype_, GetArenaForAllocation(),
      &other->routertype_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &gatewayaddress_, GetArenaForAllocation(),
      &other->gatewayaddress_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &ipv6gatewayaddress_, GetArenaForAllocation(),
      &other->ipv6gatewayaddress_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BGPRouterParameters, localautonomoussystem_)
      + sizeof(BGPRouterParameters::localautonomoussystem_)
      - PROTOBUF_FIELD_OFFSET(BGPRouterParameters, addressfamilies_)>(
          reinterpret_cast<char*>(&addressfamilies_),
          reinterpret_cast<char*>(&other->addressfamilies_));
}

::PROTOBUF_NAMESPACE_ID::Metadata BGPRouterParameters::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_ssd_2dgit_2ejuniper_2enet_2fcontrail_2fcn2_2fcontrail_2fpkg_2fapis_2fcore_2fv1alpha1_2fgenerated_2eproto_getter, &descriptor_table_ssd_2dgit_2ejuniper_2enet_2fcontrail_2fcn2_2fcontrail_2fpkg_2fapis_2fcore_2fv1alpha1_2fgenerated_2eproto_once,
      file_level_metadata_ssd_2dgit_2ejuniper_2enet_2fcontrail_2fcn2_2fcontrail_2fpkg_2fapis_2fcore_2fv1alpha1_2fgenerated_2eproto[24]);
}

// ===================================================================

class BGPRouterReference::_Internal {
 public:
  using HasBits = decltype(std::declval<BGPRouterReference>()._has_bits_);
  static const ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::ResourceReference& resourcereference(const BGPRouterReference* msg);
  static void set_has_resourcereference(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::BGPRouterReferenceAttributes& attributes(const BGPRouterReference* msg);
  static void set_has_attributes(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::ResourceReference&
BGPRouterReference::_Internal::resourcereference(const BGPRouterReference* msg) {
  return *msg->resourcereference_;
}
const ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::BGPRouterReferenceAttributes&
BGPRouterReference::_Internal::attributes(const BGPRouterReference* msg) {
  return *msg->attributes_;
}
BGPRouterReference::BGPRouterReference(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.BGPRouterReference)
}
BGPRouterReference::BGPRouterReference(const BGPRouterReference& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_resourcereference()) {
    resourcereference_ = new ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::ResourceReference(*from.resourcereference_);
  } else {
    resourcereference_ = nullptr;
  }
  if (from._internal_has_attributes()) {
    attributes_ = new ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::BGPRouterReferenceAttributes(*from.attributes_);
  } else {
    attributes_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.BGPRouterReference)
}

inline void BGPRouterReference::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&resourcereference_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&attributes_) -
    reinterpret_cast<char*>(&resourcereference_)) + sizeof(attributes_));
}

BGPRouterReference::~BGPRouterReference() {
  // @@protoc_insertion_point(destructor:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.BGPRouterReference)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void BGPRouterReference::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete resourcereference_;
  if (this != internal_default_instance()) delete attributes_;
}

void BGPRouterReference::ArenaDtor(void* object) {
  BGPRouterReference* _this = reinterpret_cast< BGPRouterReference* >(object);
  (void)_this;
}
void BGPRouterReference::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BGPRouterReference::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void BGPRouterReference::Clear() {
// @@protoc_insertion_point(message_clear_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.BGPRouterReference)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(resourcereference_ != nullptr);
      resourcereference_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(attributes_ != nullptr);
      attributes_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BGPRouterReference::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.ResourceReference resourceReference = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_resourcereference(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.BGPRouterReferenceAttributes attributes = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_attributes(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BGPRouterReference::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.BGPRouterReference)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.ResourceReference resourceReference = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::resourcereference(this), target, stream);
  }

  // optional .ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.BGPRouterReferenceAttributes attributes = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::attributes(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.BGPRouterReference)
  return target;
}

size_t BGPRouterReference::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.BGPRouterReference)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.ResourceReference resourceReference = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *resourcereference_);
    }

    // optional .ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.BGPRouterReferenceAttributes attributes = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *attributes_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BGPRouterReference::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    BGPRouterReference::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*BGPRouterReference::GetClassData() const { return &_class_data_; }

void BGPRouterReference::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<BGPRouterReference *>(to)->MergeFrom(
      static_cast<const BGPRouterReference &>(from));
}


void BGPRouterReference::MergeFrom(const BGPRouterReference& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.BGPRouterReference)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_resourcereference()->::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::ResourceReference::MergeFrom(from._internal_resourcereference());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_attributes()->::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::BGPRouterReferenceAttributes::MergeFrom(from._internal_attributes());
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void BGPRouterReference::CopyFrom(const BGPRouterReference& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.BGPRouterReference)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BGPRouterReference::IsInitialized() const {
  return true;
}

void BGPRouterReference::InternalSwap(BGPRouterReference* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BGPRouterReference, attributes_)
      + sizeof(BGPRouterReference::attributes_)
      - PROTOBUF_FIELD_OFFSET(BGPRouterReference, resourcereference_)>(
          reinterpret_cast<char*>(&resourcereference_),
          reinterpret_cast<char*>(&other->resourcereference_));
}

::PROTOBUF_NAMESPACE_ID::Metadata BGPRouterReference::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_ssd_2dgit_2ejuniper_2enet_2fcontrail_2fcn2_2fcontrail_2fpkg_2fapis_2fcore_2fv1alpha1_2fgenerated_2eproto_getter, &descriptor_table_ssd_2dgit_2ejuniper_2enet_2fcontrail_2fcn2_2fcontrail_2fpkg_2fapis_2fcore_2fv1alpha1_2fgenerated_2eproto_once,
      file_level_metadata_ssd_2dgit_2ejuniper_2enet_2fcontrail_2fcn2_2fcontrail_2fpkg_2fapis_2fcore_2fv1alpha1_2fgenerated_2eproto[25]);
}

// ===================================================================

class BGPRouterReferenceAttributes::_Internal {
 public:
};

BGPRouterReferenceAttributes::BGPRouterReferenceAttributes(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  session_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.BGPRouterReferenceAttributes)
}
BGPRouterReferenceAttributes::BGPRouterReferenceAttributes(const BGPRouterReferenceAttributes& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      session_(from.session_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.BGPRouterReferenceAttributes)
}

inline void BGPRouterReferenceAttributes::SharedCtor() {
}

BGPRouterReferenceAttributes::~BGPRouterReferenceAttributes() {
  // @@protoc_insertion_point(destructor:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.BGPRouterReferenceAttributes)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void BGPRouterReferenceAttributes::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void BGPRouterReferenceAttributes::ArenaDtor(void* object) {
  BGPRouterReferenceAttributes* _this = reinterpret_cast< BGPRouterReferenceAttributes* >(object);
  (void)_this;
}
void BGPRouterReferenceAttributes::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BGPRouterReferenceAttributes::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void BGPRouterReferenceAttributes::Clear() {
// @@protoc_insertion_point(message_clear_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.BGPRouterReferenceAttributes)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  session_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BGPRouterReferenceAttributes::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.BGPSession session = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_session(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BGPRouterReferenceAttributes::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.BGPRouterReferenceAttributes)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.BGPSession session = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_session_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_session(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.BGPRouterReferenceAttributes)
  return target;
}

size_t BGPRouterReferenceAttributes::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.BGPRouterReferenceAttributes)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.BGPSession session = 1;
  total_size += 1UL * this->_internal_session_size();
  for (const auto& msg : this->session_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BGPRouterReferenceAttributes::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    BGPRouterReferenceAttributes::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*BGPRouterReferenceAttributes::GetClassData() const { return &_class_data_; }

void BGPRouterReferenceAttributes::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<BGPRouterReferenceAttributes *>(to)->MergeFrom(
      static_cast<const BGPRouterReferenceAttributes &>(from));
}


void BGPRouterReferenceAttributes::MergeFrom(const BGPRouterReferenceAttributes& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.BGPRouterReferenceAttributes)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  session_.MergeFrom(from.session_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void BGPRouterReferenceAttributes::CopyFrom(const BGPRouterReferenceAttributes& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.BGPRouterReferenceAttributes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BGPRouterReferenceAttributes::IsInitialized() const {
  return true;
}

void BGPRouterReferenceAttributes::InternalSwap(BGPRouterReferenceAttributes* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  session_.InternalSwap(&other->session_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BGPRouterReferenceAttributes::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_ssd_2dgit_2ejuniper_2enet_2fcontrail_2fcn2_2fcontrail_2fpkg_2fapis_2fcore_2fv1alpha1_2fgenerated_2eproto_getter, &descriptor_table_ssd_2dgit_2ejuniper_2enet_2fcontrail_2fcn2_2fcontrail_2fpkg_2fapis_2fcore_2fv1alpha1_2fgenerated_2eproto_once,
      file_level_metadata_ssd_2dgit_2ejuniper_2enet_2fcontrail_2fcn2_2fcontrail_2fpkg_2fapis_2fcore_2fv1alpha1_2fgenerated_2eproto[26]);
}

// ===================================================================

class BGPRouterSpec::_Internal {
 public:
  using HasBits = decltype(std::declval<BGPRouterSpec>()._has_bits_);
  static const ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::CommonSpec& commonspec(const BGPRouterSpec* msg);
  static void set_has_commonspec(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::k8s::io::api::core::v1::ObjectReference& parent(const BGPRouterSpec* msg);
  static void set_has_parent(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::BGPRouterParameters& bgprouterparameters(const BGPRouterSpec* msg);
  static void set_has_bgprouterparameters(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::CommonSpec&
BGPRouterSpec::_Internal::commonspec(const BGPRouterSpec* msg) {
  return *msg->commonspec_;
}
const ::k8s::io::api::core::v1::ObjectReference&
BGPRouterSpec::_Internal::parent(const BGPRouterSpec* msg) {
  return *msg->parent_;
}
const ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::BGPRouterParameters&
BGPRouterSpec::_Internal::bgprouterparameters(const BGPRouterSpec* msg) {
  return *msg->bgprouterparameters_;
}
void BGPRouterSpec::clear_parent() {
  if (parent_ != nullptr) parent_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
BGPRouterSpec::BGPRouterSpec(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  bgprouterreferences_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.BGPRouterSpec)
}
BGPRouterSpec::BGPRouterSpec(const BGPRouterSpec& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      bgprouterreferences_(from.bgprouterreferences_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_commonspec()) {
    commonspec_ = new ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::CommonSpec(*from.commonspec_);
  } else {
    commonspec_ = nullptr;
  }
  if (from._internal_has_parent()) {
    parent_ = new ::k8s::io::api::core::v1::ObjectReference(*from.parent_);
  } else {
    parent_ = nullptr;
  }
  if (from._internal_has_bgprouterparameters()) {
    bgprouterparameters_ = new ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::BGPRouterParameters(*from.bgprouterparameters_);
  } else {
    bgprouterparameters_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.BGPRouterSpec)
}

inline void BGPRouterSpec::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&commonspec_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&bgprouterparameters_) -
    reinterpret_cast<char*>(&commonspec_)) + sizeof(bgprouterparameters_));
}

BGPRouterSpec::~BGPRouterSpec() {
  // @@protoc_insertion_point(destructor:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.BGPRouterSpec)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void BGPRouterSpec::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete commonspec_;
  if (this != internal_default_instance()) delete parent_;
  if (this != internal_default_instance()) delete bgprouterparameters_;
}

void BGPRouterSpec::ArenaDtor(void* object) {
  BGPRouterSpec* _this = reinterpret_cast< BGPRouterSpec* >(object);
  (void)_this;
}
void BGPRouterSpec::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BGPRouterSpec::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void BGPRouterSpec::Clear() {
// @@protoc_insertion_point(message_clear_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.BGPRouterSpec)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  bgprouterreferences_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(commonspec_ != nullptr);
      commonspec_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(parent_ != nullptr);
      parent_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(bgprouterparameters_ != nullptr);
      bgprouterparameters_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BGPRouterSpec::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.CommonSpec commonSpec = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_commonspec(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .k8s.io.api.core.v1.ObjectReference parent = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_parent(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.BGPRouterParameters bgpRouterParameters = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_bgprouterparameters(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.BGPRouterReference bgpRouterReferences = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_bgprouterreferences(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BGPRouterSpec::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.BGPRouterSpec)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.CommonSpec commonSpec = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::commonspec(this), target, stream);
  }

  // optional .k8s.io.api.core.v1.ObjectReference parent = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::parent(this), target, stream);
  }

  // optional .ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.BGPRouterParameters bgpRouterParameters = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::bgprouterparameters(this), target, stream);
  }

  // repeated .ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.BGPRouterReference bgpRouterReferences = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_bgprouterreferences_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_bgprouterreferences(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.BGPRouterSpec)
  return target;
}

size_t BGPRouterSpec::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.BGPRouterSpec)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.BGPRouterReference bgpRouterReferences = 4;
  total_size += 1UL * this->_internal_bgprouterreferences_size();
  for (const auto& msg : this->bgprouterreferences_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.CommonSpec commonSpec = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *commonspec_);
    }

    // optional .k8s.io.api.core.v1.ObjectReference parent = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *parent_);
    }

    // optional .ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.BGPRouterParameters bgpRouterParameters = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *bgprouterparameters_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BGPRouterSpec::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    BGPRouterSpec::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*BGPRouterSpec::GetClassData() const { return &_class_data_; }

void BGPRouterSpec::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<BGPRouterSpec *>(to)->MergeFrom(
      static_cast<const BGPRouterSpec &>(from));
}


void BGPRouterSpec::MergeFrom(const BGPRouterSpec& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.BGPRouterSpec)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  bgprouterreferences_.MergeFrom(from.bgprouterreferences_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_commonspec()->::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::CommonSpec::MergeFrom(from._internal_commonspec());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_parent()->::k8s::io::api::core::v1::ObjectReference::MergeFrom(from._internal_parent());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_bgprouterparameters()->::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::BGPRouterParameters::MergeFrom(from._internal_bgprouterparameters());
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void BGPRouterSpec::CopyFrom(const BGPRouterSpec& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.BGPRouterSpec)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BGPRouterSpec::IsInitialized() const {
  return true;
}

void BGPRouterSpec::InternalSwap(BGPRouterSpec* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  bgprouterreferences_.InternalSwap(&other->bgprouterreferences_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BGPRouterSpec, bgprouterparameters_)
      + sizeof(BGPRouterSpec::bgprouterparameters_)
      - PROTOBUF_FIELD_OFFSET(BGPRouterSpec, commonspec_)>(
          reinterpret_cast<char*>(&commonspec_),
          reinterpret_cast<char*>(&other->commonspec_));
}

::PROTOBUF_NAMESPACE_ID::Metadata BGPRouterSpec::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_ssd_2dgit_2ejuniper_2enet_2fcontrail_2fcn2_2fcontrail_2fpkg_2fapis_2fcore_2fv1alpha1_2fgenerated_2eproto_getter, &descriptor_table_ssd_2dgit_2ejuniper_2enet_2fcontrail_2fcn2_2fcontrail_2fpkg_2fapis_2fcore_2fv1alpha1_2fgenerated_2eproto_once,
      file_level_metadata_ssd_2dgit_2ejuniper_2enet_2fcontrail_2fcn2_2fcontrail_2fpkg_2fapis_2fcore_2fv1alpha1_2fgenerated_2eproto[27]);
}

// ===================================================================

class BGPRouterStatus::_Internal {
 public:
  using HasBits = decltype(std::declval<BGPRouterStatus>()._has_bits_);
  static const ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::CommonStatus& commonstatus(const BGPRouterStatus* msg);
  static void set_has_commonstatus(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::CommonStatus&
BGPRouterStatus::_Internal::commonstatus(const BGPRouterStatus* msg) {
  return *msg->commonstatus_;
}
BGPRouterStatus::BGPRouterStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.BGPRouterStatus)
}
BGPRouterStatus::BGPRouterStatus(const BGPRouterStatus& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_commonstatus()) {
    commonstatus_ = new ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::CommonStatus(*from.commonstatus_);
  } else {
    commonstatus_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.BGPRouterStatus)
}

inline void BGPRouterStatus::SharedCtor() {
commonstatus_ = nullptr;
}

BGPRouterStatus::~BGPRouterStatus() {
  // @@protoc_insertion_point(destructor:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.BGPRouterStatus)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void BGPRouterStatus::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete commonstatus_;
}

void BGPRouterStatus::ArenaDtor(void* object) {
  BGPRouterStatus* _this = reinterpret_cast< BGPRouterStatus* >(object);
  (void)_this;
}
void BGPRouterStatus::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BGPRouterStatus::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void BGPRouterStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.BGPRouterStatus)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(commonstatus_ != nullptr);
    commonstatus_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BGPRouterStatus::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.CommonStatus commonStatus = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_commonstatus(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BGPRouterStatus::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.BGPRouterStatus)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.CommonStatus commonStatus = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::commonstatus(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.BGPRouterStatus)
  return target;
}

size_t BGPRouterStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.BGPRouterStatus)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.CommonStatus commonStatus = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *commonstatus_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BGPRouterStatus::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    BGPRouterStatus::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*BGPRouterStatus::GetClassData() const { return &_class_data_; }

void BGPRouterStatus::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<BGPRouterStatus *>(to)->MergeFrom(
      static_cast<const BGPRouterStatus &>(from));
}


void BGPRouterStatus::MergeFrom(const BGPRouterStatus& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.BGPRouterStatus)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_commonstatus()) {
    _internal_mutable_commonstatus()->::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::CommonStatus::MergeFrom(from._internal_commonstatus());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void BGPRouterStatus::CopyFrom(const BGPRouterStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.BGPRouterStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BGPRouterStatus::IsInitialized() const {
  return true;
}

void BGPRouterStatus::InternalSwap(BGPRouterStatus* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(commonstatus_, other->commonstatus_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BGPRouterStatus::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_ssd_2dgit_2ejuniper_2enet_2fcontrail_2fcn2_2fcontrail_2fpkg_2fapis_2fcore_2fv1alpha1_2fgenerated_2eproto_getter, &descriptor_table_ssd_2dgit_2ejuniper_2enet_2fcontrail_2fcn2_2fcontrail_2fpkg_2fapis_2fcore_2fv1alpha1_2fgenerated_2eproto_once,
      file_level_metadata_ssd_2dgit_2ejuniper_2enet_2fcontrail_2fcn2_2fcontrail_2fpkg_2fapis_2fcore_2fv1alpha1_2fgenerated_2eproto[28]);
}

// ===================================================================

class BGPSession::_Internal {
 public:
};

BGPSession::BGPSession(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  sessionattributes_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.BGPSession)
}
BGPSession::BGPSession(const BGPSession& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      sessionattributes_(from.sessionattributes_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.BGPSession)
}

inline void BGPSession::SharedCtor() {
}

BGPSession::~BGPSession() {
  // @@protoc_insertion_point(destructor:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.BGPSession)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void BGPSession::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void BGPSession::ArenaDtor(void* object) {
  BGPSession* _this = reinterpret_cast< BGPSession* >(object);
  (void)_this;
}
void BGPSession::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BGPSession::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void BGPSession::Clear() {
// @@protoc_insertion_point(message_clear_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.BGPSession)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  sessionattributes_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BGPSession::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.BGPSessionAttributes sessionAttributes = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_sessionattributes(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BGPSession::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.BGPSession)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.BGPSessionAttributes sessionAttributes = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_sessionattributes_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_sessionattributes(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.BGPSession)
  return target;
}

size_t BGPSession::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.BGPSession)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.BGPSessionAttributes sessionAttributes = 1;
  total_size += 1UL * this->_internal_sessionattributes_size();
  for (const auto& msg : this->sessionattributes_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BGPSession::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    BGPSession::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*BGPSession::GetClassData() const { return &_class_data_; }

void BGPSession::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<BGPSession *>(to)->MergeFrom(
      static_cast<const BGPSession &>(from));
}


void BGPSession::MergeFrom(const BGPSession& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.BGPSession)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  sessionattributes_.MergeFrom(from.sessionattributes_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void BGPSession::CopyFrom(const BGPSession& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.BGPSession)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BGPSession::IsInitialized() const {
  return true;
}

void BGPSession::InternalSwap(BGPSession* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  sessionattributes_.InternalSwap(&other->sessionattributes_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BGPSession::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_ssd_2dgit_2ejuniper_2enet_2fcontrail_2fcn2_2fcontrail_2fpkg_2fapis_2fcore_2fv1alpha1_2fgenerated_2eproto_getter, &descriptor_table_ssd_2dgit_2ejuniper_2enet_2fcontrail_2fcn2_2fcontrail_2fpkg_2fapis_2fcore_2fv1alpha1_2fgenerated_2eproto_once,
      file_level_metadata_ssd_2dgit_2ejuniper_2enet_2fcontrail_2fcn2_2fcontrail_2fpkg_2fapis_2fcore_2fv1alpha1_2fgenerated_2eproto[29]);
}

// ===================================================================

class BGPSessionAttributes::_Internal {
 public:
  using HasBits = decltype(std::declval<BGPSessionAttributes>()._has_bits_);
  static void set_has_bgprouter(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_admindown(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_passive(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_asoverride(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_holdtime(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_loopcount(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_localautonomoussystem(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static const ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::AddressFamilies& addressfamilies(const BGPSessionAttributes* msg);
  static void set_has_addressfamilies(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::AuthenticationData& authdata(const BGPSessionAttributes* msg);
  static void set_has_authdata(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_privateasaction(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::RouteOriginOverride& routeoriginoverride(const BGPSessionAttributes* msg);
  static void set_has_routeoriginoverride(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

const ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::AddressFamilies&
BGPSessionAttributes::_Internal::addressfamilies(const BGPSessionAttributes* msg) {
  return *msg->addressfamilies_;
}
const ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::AuthenticationData&
BGPSessionAttributes::_Internal::authdata(const BGPSessionAttributes* msg) {
  return *msg->authdata_;
}
const ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::RouteOriginOverride&
BGPSessionAttributes::_Internal::routeoriginoverride(const BGPSessionAttributes* msg) {
  return *msg->routeoriginoverride_;
}
BGPSessionAttributes::BGPSessionAttributes(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  familyattributes_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.BGPSessionAttributes)
}
BGPSessionAttributes::BGPSessionAttributes(const BGPSessionAttributes& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      familyattributes_(from.familyattributes_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  bgprouter_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_bgprouter()) {
    bgprouter_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_bgprouter(), 
      GetArenaForAllocation());
  }
  privateasaction_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_privateasaction()) {
    privateasaction_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_privateasaction(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_addressfamilies()) {
    addressfamilies_ = new ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::AddressFamilies(*from.addressfamilies_);
  } else {
    addressfamilies_ = nullptr;
  }
  if (from._internal_has_authdata()) {
    authdata_ = new ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::AuthenticationData(*from.authdata_);
  } else {
    authdata_ = nullptr;
  }
  if (from._internal_has_routeoriginoverride()) {
    routeoriginoverride_ = new ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::RouteOriginOverride(*from.routeoriginoverride_);
  } else {
    routeoriginoverride_ = nullptr;
  }
  ::memcpy(&admindown_, &from.admindown_,
    static_cast<size_t>(reinterpret_cast<char*>(&localautonomoussystem_) -
    reinterpret_cast<char*>(&admindown_)) + sizeof(localautonomoussystem_));
  // @@protoc_insertion_point(copy_constructor:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.BGPSessionAttributes)
}

inline void BGPSessionAttributes::SharedCtor() {
bgprouter_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
privateasaction_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&addressfamilies_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&localautonomoussystem_) -
    reinterpret_cast<char*>(&addressfamilies_)) + sizeof(localautonomoussystem_));
}

BGPSessionAttributes::~BGPSessionAttributes() {
  // @@protoc_insertion_point(destructor:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.BGPSessionAttributes)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void BGPSessionAttributes::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  bgprouter_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  privateasaction_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete addressfamilies_;
  if (this != internal_default_instance()) delete authdata_;
  if (this != internal_default_instance()) delete routeoriginoverride_;
}

void BGPSessionAttributes::ArenaDtor(void* object) {
  BGPSessionAttributes* _this = reinterpret_cast< BGPSessionAttributes* >(object);
  (void)_this;
}
void BGPSessionAttributes::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BGPSessionAttributes::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void BGPSessionAttributes::Clear() {
// @@protoc_insertion_point(message_clear_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.BGPSessionAttributes)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  familyattributes_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      bgprouter_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      privateasaction_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(addressfamilies_ != nullptr);
      addressfamilies_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(authdata_ != nullptr);
      authdata_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(routeoriginoverride_ != nullptr);
      routeoriginoverride_->Clear();
    }
  }
  if (cached_has_bits & 0x000000e0u) {
    ::memset(&admindown_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&asoverride_) -
        reinterpret_cast<char*>(&admindown_)) + sizeof(asoverride_));
  }
  if (cached_has_bits & 0x00000700u) {
    ::memset(&holdtime_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&localautonomoussystem_) -
        reinterpret_cast<char*>(&holdtime_)) + sizeof(localautonomoussystem_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BGPSessionAttributes::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string bgpRouter = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_bgprouter();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.BGPSessionAttributes.bgpRouter");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool adminDown = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_admindown(&has_bits);
          admindown_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool passive = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_passive(&has_bits);
          passive_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool asOverride = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_asoverride(&has_bits);
          asoverride_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 holdTime = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_holdtime(&has_bits);
          holdtime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 loopCount = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_loopcount(&has_bits);
          loopcount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 localAutonomousSystem = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_localautonomoussystem(&has_bits);
          localautonomoussystem_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.AddressFamilies addressFamilies = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_addressfamilies(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.AuthenticationData authData = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_authdata(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.BGPFamilyAttributes familyAttributes = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_familyattributes(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<82>(ptr));
        } else goto handle_unusual;
        continue;
      // optional string privateAsAction = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          auto str = _internal_mutable_privateasaction();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.BGPSessionAttributes.privateAsAction");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.RouteOriginOverride routeOriginOverride = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_routeoriginoverride(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BGPSessionAttributes::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.BGPSessionAttributes)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string bgpRouter = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_bgprouter().data(), static_cast<int>(this->_internal_bgprouter().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.BGPSessionAttributes.bgpRouter");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_bgprouter(), target);
  }

  // optional bool adminDown = 2;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_admindown(), target);
  }

  // optional bool passive = 3;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_passive(), target);
  }

  // optional bool asOverride = 4;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_asoverride(), target);
  }

  // optional int32 holdTime = 5;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_holdtime(), target);
  }

  // optional int32 loopCount = 6;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_loopcount(), target);
  }

  // optional int32 localAutonomousSystem = 7;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->_internal_localautonomoussystem(), target);
  }

  // optional .ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.AddressFamilies addressFamilies = 8;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::addressfamilies(this), target, stream);
  }

  // optional .ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.AuthenticationData authData = 9;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        9, _Internal::authdata(this), target, stream);
  }

  // repeated .ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.BGPFamilyAttributes familyAttributes = 10;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_familyattributes_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(10, this->_internal_familyattributes(i), target, stream);
  }

  // optional string privateAsAction = 11;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_privateasaction().data(), static_cast<int>(this->_internal_privateasaction().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.BGPSessionAttributes.privateAsAction");
    target = stream->WriteStringMaybeAliased(
        11, this->_internal_privateasaction(), target);
  }

  // optional .ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.RouteOriginOverride routeOriginOverride = 12;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        12, _Internal::routeoriginoverride(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.BGPSessionAttributes)
  return target;
}

size_t BGPSessionAttributes::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.BGPSessionAttributes)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.BGPFamilyAttributes familyAttributes = 10;
  total_size += 1UL * this->_internal_familyattributes_size();
  for (const auto& msg : this->familyattributes_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string bgpRouter = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_bgprouter());
    }

    // optional string privateAsAction = 11;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_privateasaction());
    }

    // optional .ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.AddressFamilies addressFamilies = 8;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *addressfamilies_);
    }

    // optional .ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.AuthenticationData authData = 9;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *authdata_);
    }

    // optional .ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.RouteOriginOverride routeOriginOverride = 12;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *routeoriginoverride_);
    }

    // optional bool adminDown = 2;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 1;
    }

    // optional bool passive = 3;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 1;
    }

    // optional bool asOverride = 4;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 1;
    }

  }
  if (cached_has_bits & 0x00000700u) {
    // optional int32 holdTime = 5;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_holdtime());
    }

    // optional int32 loopCount = 6;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_loopcount());
    }

    // optional int32 localAutonomousSystem = 7;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_localautonomoussystem());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BGPSessionAttributes::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    BGPSessionAttributes::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*BGPSessionAttributes::GetClassData() const { return &_class_data_; }

void BGPSessionAttributes::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<BGPSessionAttributes *>(to)->MergeFrom(
      static_cast<const BGPSessionAttributes &>(from));
}


void BGPSessionAttributes::MergeFrom(const BGPSessionAttributes& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.BGPSessionAttributes)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  familyattributes_.MergeFrom(from.familyattributes_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_bgprouter(from._internal_bgprouter());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_privateasaction(from._internal_privateasaction());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_addressfamilies()->::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::AddressFamilies::MergeFrom(from._internal_addressfamilies());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_authdata()->::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::AuthenticationData::MergeFrom(from._internal_authdata());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_mutable_routeoriginoverride()->::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::RouteOriginOverride::MergeFrom(from._internal_routeoriginoverride());
    }
    if (cached_has_bits & 0x00000020u) {
      admindown_ = from.admindown_;
    }
    if (cached_has_bits & 0x00000040u) {
      passive_ = from.passive_;
    }
    if (cached_has_bits & 0x00000080u) {
      asoverride_ = from.asoverride_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000700u) {
    if (cached_has_bits & 0x00000100u) {
      holdtime_ = from.holdtime_;
    }
    if (cached_has_bits & 0x00000200u) {
      loopcount_ = from.loopcount_;
    }
    if (cached_has_bits & 0x00000400u) {
      localautonomoussystem_ = from.localautonomoussystem_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void BGPSessionAttributes::CopyFrom(const BGPSessionAttributes& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.BGPSessionAttributes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BGPSessionAttributes::IsInitialized() const {
  return true;
}

void BGPSessionAttributes::InternalSwap(BGPSessionAttributes* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  familyattributes_.InternalSwap(&other->familyattributes_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &bgprouter_, GetArenaForAllocation(),
      &other->bgprouter_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &privateasaction_, GetArenaForAllocation(),
      &other->privateasaction_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BGPSessionAttributes, localautonomoussystem_)
      + sizeof(BGPSessionAttributes::localautonomoussystem_)
      - PROTOBUF_FIELD_OFFSET(BGPSessionAttributes, addressfamilies_)>(
          reinterpret_cast<char*>(&addressfamilies_),
          reinterpret_cast<char*>(&other->addressfamilies_));
}

::PROTOBUF_NAMESPACE_ID::Metadata BGPSessionAttributes::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_ssd_2dgit_2ejuniper_2enet_2fcontrail_2fcn2_2fcontrail_2fpkg_2fapis_2fcore_2fv1alpha1_2fgenerated_2eproto_getter, &descriptor_table_ssd_2dgit_2ejuniper_2enet_2fcontrail_2fcn2_2fcontrail_2fpkg_2fapis_2fcore_2fv1alpha1_2fgenerated_2eproto_once,
      file_level_metadata_ssd_2dgit_2ejuniper_2enet_2fcontrail_2fcn2_2fcontrail_2fpkg_2fapis_2fcore_2fv1alpha1_2fgenerated_2eproto[30]);
}

// ===================================================================

class BGPSessionIPAttributes::_Internal {
 public:
  using HasBits = decltype(std::declval<BGPSessionIPAttributes>()._has_bits_);
  static void set_has_bgpaasprimaryip(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_bgpaassecondaryip(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

BGPSessionIPAttributes::BGPSessionIPAttributes(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.BGPSessionIPAttributes)
}
BGPSessionIPAttributes::BGPSessionIPAttributes(const BGPSessionIPAttributes& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  bgpaasprimaryip_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_bgpaasprimaryip()) {
    bgpaasprimaryip_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_bgpaasprimaryip(), 
      GetArenaForAllocation());
  }
  bgpaassecondaryip_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_bgpaassecondaryip()) {
    bgpaassecondaryip_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_bgpaassecondaryip(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.BGPSessionIPAttributes)
}

inline void BGPSessionIPAttributes::SharedCtor() {
bgpaasprimaryip_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
bgpaassecondaryip_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

BGPSessionIPAttributes::~BGPSessionIPAttributes() {
  // @@protoc_insertion_point(destructor:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.BGPSessionIPAttributes)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void BGPSessionIPAttributes::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  bgpaasprimaryip_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  bgpaassecondaryip_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void BGPSessionIPAttributes::ArenaDtor(void* object) {
  BGPSessionIPAttributes* _this = reinterpret_cast< BGPSessionIPAttributes* >(object);
  (void)_this;
}
void BGPSessionIPAttributes::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BGPSessionIPAttributes::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void BGPSessionIPAttributes::Clear() {
// @@protoc_insertion_point(message_clear_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.BGPSessionIPAttributes)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      bgpaasprimaryip_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      bgpaassecondaryip_.ClearNonDefaultToEmpty();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BGPSessionIPAttributes::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string bgpaasPrimaryIP = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_bgpaasprimaryip();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.BGPSessionIPAttributes.bgpaasPrimaryIP");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string bgpaasSecondaryIP = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_bgpaassecondaryip();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.BGPSessionIPAttributes.bgpaasSecondaryIP");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BGPSessionIPAttributes::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.BGPSessionIPAttributes)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string bgpaasPrimaryIP = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_bgpaasprimaryip().data(), static_cast<int>(this->_internal_bgpaasprimaryip().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.BGPSessionIPAttributes.bgpaasPrimaryIP");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_bgpaasprimaryip(), target);
  }

  // optional string bgpaasSecondaryIP = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_bgpaassecondaryip().data(), static_cast<int>(this->_internal_bgpaassecondaryip().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.BGPSessionIPAttributes.bgpaasSecondaryIP");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_bgpaassecondaryip(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.BGPSessionIPAttributes)
  return target;
}

size_t BGPSessionIPAttributes::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.BGPSessionIPAttributes)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string bgpaasPrimaryIP = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_bgpaasprimaryip());
    }

    // optional string bgpaasSecondaryIP = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_bgpaassecondaryip());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BGPSessionIPAttributes::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    BGPSessionIPAttributes::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*BGPSessionIPAttributes::GetClassData() const { return &_class_data_; }

void BGPSessionIPAttributes::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<BGPSessionIPAttributes *>(to)->MergeFrom(
      static_cast<const BGPSessionIPAttributes &>(from));
}


void BGPSessionIPAttributes::MergeFrom(const BGPSessionIPAttributes& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.BGPSessionIPAttributes)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_bgpaasprimaryip(from._internal_bgpaasprimaryip());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_bgpaassecondaryip(from._internal_bgpaassecondaryip());
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void BGPSessionIPAttributes::CopyFrom(const BGPSessionIPAttributes& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.BGPSessionIPAttributes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BGPSessionIPAttributes::IsInitialized() const {
  return true;
}

void BGPSessionIPAttributes::InternalSwap(BGPSessionIPAttributes* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &bgpaasprimaryip_, GetArenaForAllocation(),
      &other->bgpaasprimaryip_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &bgpaassecondaryip_, GetArenaForAllocation(),
      &other->bgpaassecondaryip_, other->GetArenaForAllocation()
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata BGPSessionIPAttributes::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_ssd_2dgit_2ejuniper_2enet_2fcontrail_2fcn2_2fcontrail_2fpkg_2fapis_2fcore_2fv1alpha1_2fgenerated_2eproto_getter, &descriptor_table_ssd_2dgit_2ejuniper_2enet_2fcontrail_2fcn2_2fcontrail_2fpkg_2fapis_2fcore_2fv1alpha1_2fgenerated_2eproto_once,
      file_level_metadata_ssd_2dgit_2ejuniper_2enet_2fcontrail_2fcn2_2fcontrail_2fpkg_2fapis_2fcore_2fv1alpha1_2fgenerated_2eproto[31]);
}

// ===================================================================

class CommonSpec::_Internal {
 public:
  using HasBits = decltype(std::declval<CommonSpec>()._has_bits_);
  static const ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::ContrailFqName& contrailfqname(const CommonSpec* msg);
  static void set_has_contrailfqname(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::ContrailFqName&
CommonSpec::_Internal::contrailfqname(const CommonSpec* msg) {
  return *msg->contrailfqname_;
}
CommonSpec::CommonSpec(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.CommonSpec)
}
CommonSpec::CommonSpec(const CommonSpec& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_contrailfqname()) {
    contrailfqname_ = new ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::ContrailFqName(*from.contrailfqname_);
  } else {
    contrailfqname_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.CommonSpec)
}

inline void CommonSpec::SharedCtor() {
contrailfqname_ = nullptr;
}

CommonSpec::~CommonSpec() {
  // @@protoc_insertion_point(destructor:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.CommonSpec)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CommonSpec::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete contrailfqname_;
}

void CommonSpec::ArenaDtor(void* object) {
  CommonSpec* _this = reinterpret_cast< CommonSpec* >(object);
  (void)_this;
}
void CommonSpec::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CommonSpec::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CommonSpec::Clear() {
// @@protoc_insertion_point(message_clear_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.CommonSpec)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(contrailfqname_ != nullptr);
    contrailfqname_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CommonSpec::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.ContrailFqName contrailFqName = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_contrailfqname(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CommonSpec::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.CommonSpec)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.ContrailFqName contrailFqName = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::contrailfqname(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.CommonSpec)
  return target;
}

size_t CommonSpec::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.CommonSpec)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.ContrailFqName contrailFqName = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *contrailfqname_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CommonSpec::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CommonSpec::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CommonSpec::GetClassData() const { return &_class_data_; }

void CommonSpec::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<CommonSpec *>(to)->MergeFrom(
      static_cast<const CommonSpec &>(from));
}


void CommonSpec::MergeFrom(const CommonSpec& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.CommonSpec)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_contrailfqname()) {
    _internal_mutable_contrailfqname()->::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::ContrailFqName::MergeFrom(from._internal_contrailfqname());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CommonSpec::CopyFrom(const CommonSpec& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.CommonSpec)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommonSpec::IsInitialized() const {
  return true;
}

void CommonSpec::InternalSwap(CommonSpec* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(contrailfqname_, other->contrailfqname_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CommonSpec::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_ssd_2dgit_2ejuniper_2enet_2fcontrail_2fcn2_2fcontrail_2fpkg_2fapis_2fcore_2fv1alpha1_2fgenerated_2eproto_getter, &descriptor_table_ssd_2dgit_2ejuniper_2enet_2fcontrail_2fcn2_2fcontrail_2fpkg_2fapis_2fcore_2fv1alpha1_2fgenerated_2eproto_once,
      file_level_metadata_ssd_2dgit_2ejuniper_2enet_2fcontrail_2fcn2_2fcontrail_2fpkg_2fapis_2fcore_2fv1alpha1_2fgenerated_2eproto[32]);
}

// ===================================================================

class CommonStatus::_Internal {
 public:
  using HasBits = decltype(std::declval<CommonStatus>()._has_bits_);
  static const ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::ReconcilerState& reconcilerstate(const CommonStatus* msg);
  static void set_has_reconcilerstate(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::ReconcilerState&
CommonStatus::_Internal::reconcilerstate(const CommonStatus* msg) {
  return *msg->reconcilerstate_;
}
CommonStatus::CommonStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.CommonStatus)
}
CommonStatus::CommonStatus(const CommonStatus& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_reconcilerstate()) {
    reconcilerstate_ = new ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::ReconcilerState(*from.reconcilerstate_);
  } else {
    reconcilerstate_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.CommonStatus)
}

inline void CommonStatus::SharedCtor() {
reconcilerstate_ = nullptr;
}

CommonStatus::~CommonStatus() {
  // @@protoc_insertion_point(destructor:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.CommonStatus)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CommonStatus::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete reconcilerstate_;
}

void CommonStatus::ArenaDtor(void* object) {
  CommonStatus* _this = reinterpret_cast< CommonStatus* >(object);
  (void)_this;
}
void CommonStatus::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CommonStatus::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CommonStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.CommonStatus)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(reconcilerstate_ != nullptr);
    reconcilerstate_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CommonStatus::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.ReconcilerState reconcilerState = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_reconcilerstate(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CommonStatus::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.CommonStatus)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.ReconcilerState reconcilerState = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::reconcilerstate(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.CommonStatus)
  return target;
}

size_t CommonStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.CommonStatus)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.ReconcilerState reconcilerState = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *reconcilerstate_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CommonStatus::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CommonStatus::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CommonStatus::GetClassData() const { return &_class_data_; }

void CommonStatus::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<CommonStatus *>(to)->MergeFrom(
      static_cast<const CommonStatus &>(from));
}


void CommonStatus::MergeFrom(const CommonStatus& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.CommonStatus)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_reconcilerstate()) {
    _internal_mutable_reconcilerstate()->::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::ReconcilerState::MergeFrom(from._internal_reconcilerstate());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CommonStatus::CopyFrom(const CommonStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.CommonStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommonStatus::IsInitialized() const {
  return true;
}

void CommonStatus::InternalSwap(CommonStatus* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(reconcilerstate_, other->reconcilerstate_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CommonStatus::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_ssd_2dgit_2ejuniper_2enet_2fcontrail_2fcn2_2fcontrail_2fpkg_2fapis_2fcore_2fv1alpha1_2fgenerated_2eproto_getter, &descriptor_table_ssd_2dgit_2ejuniper_2enet_2fcontrail_2fcn2_2fcontrail_2fpkg_2fapis_2fcore_2fv1alpha1_2fgenerated_2eproto_once,
      file_level_metadata_ssd_2dgit_2ejuniper_2enet_2fcontrail_2fcn2_2fcontrail_2fpkg_2fapis_2fcore_2fv1alpha1_2fgenerated_2eproto[33]);
}

// ===================================================================

class ContrailFqName::_Internal {
 public:
};

ContrailFqName::ContrailFqName(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  fqname_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.ContrailFqName)
}
ContrailFqName::ContrailFqName(const ContrailFqName& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      fqname_(from.fqname_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.ContrailFqName)
}

inline void ContrailFqName::SharedCtor() {
}

ContrailFqName::~ContrailFqName() {
  // @@protoc_insertion_point(destructor:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.ContrailFqName)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ContrailFqName::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ContrailFqName::ArenaDtor(void* object) {
  ContrailFqName* _this = reinterpret_cast< ContrailFqName* >(object);
  (void)_this;
}
void ContrailFqName::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ContrailFqName::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ContrailFqName::Clear() {
// @@protoc_insertion_point(message_clear_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.ContrailFqName)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  fqname_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ContrailFqName::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated string fqName = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_fqname();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            #ifndef NDEBUG
            ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.ContrailFqName.fqName");
            #endif  // !NDEBUG
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ContrailFqName::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.ContrailFqName)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string fqName = 1;
  for (int i = 0, n = this->_internal_fqname_size(); i < n; i++) {
    const auto& s = this->_internal_fqname(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.ContrailFqName.fqName");
    target = stream->WriteString(1, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.ContrailFqName)
  return target;
}

size_t ContrailFqName::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.ContrailFqName)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string fqName = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(fqname_.size());
  for (int i = 0, n = fqname_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      fqname_.Get(i));
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ContrailFqName::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ContrailFqName::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ContrailFqName::GetClassData() const { return &_class_data_; }

void ContrailFqName::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<ContrailFqName *>(to)->MergeFrom(
      static_cast<const ContrailFqName &>(from));
}


void ContrailFqName::MergeFrom(const ContrailFqName& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.ContrailFqName)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  fqname_.MergeFrom(from.fqname_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ContrailFqName::CopyFrom(const ContrailFqName& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.ContrailFqName)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ContrailFqName::IsInitialized() const {
  return true;
}

void ContrailFqName::InternalSwap(ContrailFqName* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  fqname_.InternalSwap(&other->fqname_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ContrailFqName::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_ssd_2dgit_2ejuniper_2enet_2fcontrail_2fcn2_2fcontrail_2fpkg_2fapis_2fcore_2fv1alpha1_2fgenerated_2eproto_getter, &descriptor_table_ssd_2dgit_2ejuniper_2enet_2fcontrail_2fcn2_2fcontrail_2fpkg_2fapis_2fcore_2fv1alpha1_2fgenerated_2eproto_once,
      file_level_metadata_ssd_2dgit_2ejuniper_2enet_2fcontrail_2fcn2_2fcontrail_2fpkg_2fapis_2fcore_2fv1alpha1_2fgenerated_2eproto[34]);
}

// ===================================================================

class EncapsulationPriorities::_Internal {
 public:
};

EncapsulationPriorities::EncapsulationPriorities(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  encapsulation_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.EncapsulationPriorities)
}
EncapsulationPriorities::EncapsulationPriorities(const EncapsulationPriorities& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      encapsulation_(from.encapsulation_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.EncapsulationPriorities)
}

inline void EncapsulationPriorities::SharedCtor() {
}

EncapsulationPriorities::~EncapsulationPriorities() {
  // @@protoc_insertion_point(destructor:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.EncapsulationPriorities)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void EncapsulationPriorities::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void EncapsulationPriorities::ArenaDtor(void* object) {
  EncapsulationPriorities* _this = reinterpret_cast< EncapsulationPriorities* >(object);
  (void)_this;
}
void EncapsulationPriorities::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void EncapsulationPriorities::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void EncapsulationPriorities::Clear() {
// @@protoc_insertion_point(message_clear_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.EncapsulationPriorities)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  encapsulation_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* EncapsulationPriorities::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated string encapsulation = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_encapsulation();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            #ifndef NDEBUG
            ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.EncapsulationPriorities.encapsulation");
            #endif  // !NDEBUG
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* EncapsulationPriorities::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.EncapsulationPriorities)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string encapsulation = 1;
  for (int i = 0, n = this->_internal_encapsulation_size(); i < n; i++) {
    const auto& s = this->_internal_encapsulation(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.EncapsulationPriorities.encapsulation");
    target = stream->WriteString(1, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.EncapsulationPriorities)
  return target;
}

size_t EncapsulationPriorities::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.EncapsulationPriorities)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string encapsulation = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(encapsulation_.size());
  for (int i = 0, n = encapsulation_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      encapsulation_.Get(i));
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData EncapsulationPriorities::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    EncapsulationPriorities::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*EncapsulationPriorities::GetClassData() const { return &_class_data_; }

void EncapsulationPriorities::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<EncapsulationPriorities *>(to)->MergeFrom(
      static_cast<const EncapsulationPriorities &>(from));
}


void EncapsulationPriorities::MergeFrom(const EncapsulationPriorities& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.EncapsulationPriorities)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  encapsulation_.MergeFrom(from.encapsulation_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void EncapsulationPriorities::CopyFrom(const EncapsulationPriorities& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.EncapsulationPriorities)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EncapsulationPriorities::IsInitialized() const {
  return true;
}

void EncapsulationPriorities::InternalSwap(EncapsulationPriorities* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  encapsulation_.InternalSwap(&other->encapsulation_);
}

::PROTOBUF_NAMESPACE_ID::Metadata EncapsulationPriorities::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_ssd_2dgit_2ejuniper_2enet_2fcontrail_2fcn2_2fcontrail_2fpkg_2fapis_2fcore_2fv1alpha1_2fgenerated_2eproto_getter, &descriptor_table_ssd_2dgit_2ejuniper_2enet_2fcontrail_2fcn2_2fcontrail_2fpkg_2fapis_2fcore_2fv1alpha1_2fgenerated_2eproto_once,
      file_level_metadata_ssd_2dgit_2ejuniper_2enet_2fcontrail_2fcn2_2fcontrail_2fpkg_2fapis_2fcore_2fv1alpha1_2fgenerated_2eproto[35]);
}

// ===================================================================

class FirewallActionListType::_Internal {
 public:
  using HasBits = decltype(std::declval<FirewallActionListType>()._has_bits_);
  static void set_has_simpleaction(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

FirewallActionListType::FirewallActionListType(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.FirewallActionListType)
}
FirewallActionListType::FirewallActionListType(const FirewallActionListType& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  simpleaction_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_simpleaction()) {
    simpleaction_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_simpleaction(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.FirewallActionListType)
}

inline void FirewallActionListType::SharedCtor() {
simpleaction_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

FirewallActionListType::~FirewallActionListType() {
  // @@protoc_insertion_point(destructor:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.FirewallActionListType)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void FirewallActionListType::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  simpleaction_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void FirewallActionListType::ArenaDtor(void* object) {
  FirewallActionListType* _this = reinterpret_cast< FirewallActionListType* >(object);
  (void)_this;
}
void FirewallActionListType::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FirewallActionListType::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void FirewallActionListType::Clear() {
// @@protoc_insertion_point(message_clear_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.FirewallActionListType)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    simpleaction_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FirewallActionListType::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string simpleAction = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_simpleaction();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.FirewallActionListType.simpleAction");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FirewallActionListType::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.FirewallActionListType)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string simpleAction = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_simpleaction().data(), static_cast<int>(this->_internal_simpleaction().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.FirewallActionListType.simpleAction");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_simpleaction(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.FirewallActionListType)
  return target;
}

size_t FirewallActionListType::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.FirewallActionListType)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string simpleAction = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_simpleaction());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FirewallActionListType::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    FirewallActionListType::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FirewallActionListType::GetClassData() const { return &_class_data_; }

void FirewallActionListType::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<FirewallActionListType *>(to)->MergeFrom(
      static_cast<const FirewallActionListType &>(from));
}


void FirewallActionListType::MergeFrom(const FirewallActionListType& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.FirewallActionListType)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_simpleaction()) {
    _internal_set_simpleaction(from._internal_simpleaction());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FirewallActionListType::CopyFrom(const FirewallActionListType& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.FirewallActionListType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FirewallActionListType::IsInitialized() const {
  return true;
}

void FirewallActionListType::InternalSwap(FirewallActionListType* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &simpleaction_, GetArenaForAllocation(),
      &other->simpleaction_, other->GetArenaForAllocation()
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata FirewallActionListType::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_ssd_2dgit_2ejuniper_2enet_2fcontrail_2fcn2_2fcontrail_2fpkg_2fapis_2fcore_2fv1alpha1_2fgenerated_2eproto_getter, &descriptor_table_ssd_2dgit_2ejuniper_2enet_2fcontrail_2fcn2_2fcontrail_2fpkg_2fapis_2fcore_2fv1alpha1_2fgenerated_2eproto_once,
      file_level_metadata_ssd_2dgit_2ejuniper_2enet_2fcontrail_2fcn2_2fcontrail_2fpkg_2fapis_2fcore_2fv1alpha1_2fgenerated_2eproto[36]);
}

// ===================================================================

class FirewallPolicy::_Internal {
 public:
  using HasBits = decltype(std::declval<FirewallPolicy>()._has_bits_);
  static const ::k8s::io::apimachinery::pkg::apis::meta::v1::ObjectMeta& metadata(const FirewallPolicy* msg);
  static void set_has_metadata(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::FirewallPolicySpec& spec(const FirewallPolicy* msg);
  static void set_has_spec(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::FirewallPolicyStatus& status(const FirewallPolicy* msg);
  static void set_has_status(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::k8s::io::apimachinery::pkg::apis::meta::v1::ObjectMeta&
FirewallPolicy::_Internal::metadata(const FirewallPolicy* msg) {
  return *msg->metadata_;
}
const ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::FirewallPolicySpec&
FirewallPolicy::_Internal::spec(const FirewallPolicy* msg) {
  return *msg->spec_;
}
const ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::FirewallPolicyStatus&
FirewallPolicy::_Internal::status(const FirewallPolicy* msg) {
  return *msg->status_;
}
void FirewallPolicy::clear_metadata() {
  if (metadata_ != nullptr) metadata_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
FirewallPolicy::FirewallPolicy(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.FirewallPolicy)
}
FirewallPolicy::FirewallPolicy(const FirewallPolicy& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_metadata()) {
    metadata_ = new ::k8s::io::apimachinery::pkg::apis::meta::v1::ObjectMeta(*from.metadata_);
  } else {
    metadata_ = nullptr;
  }
  if (from._internal_has_spec()) {
    spec_ = new ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::FirewallPolicySpec(*from.spec_);
  } else {
    spec_ = nullptr;
  }
  if (from._internal_has_status()) {
    status_ = new ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::FirewallPolicyStatus(*from.status_);
  } else {
    status_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.FirewallPolicy)
}

inline void FirewallPolicy::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&metadata_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&status_) -
    reinterpret_cast<char*>(&metadata_)) + sizeof(status_));
}

FirewallPolicy::~FirewallPolicy() {
  // @@protoc_insertion_point(destructor:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.FirewallPolicy)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void FirewallPolicy::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete metadata_;
  if (this != internal_default_instance()) delete spec_;
  if (this != internal_default_instance()) delete status_;
}

void FirewallPolicy::ArenaDtor(void* object) {
  FirewallPolicy* _this = reinterpret_cast< FirewallPolicy* >(object);
  (void)_this;
}
void FirewallPolicy::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FirewallPolicy::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void FirewallPolicy::Clear() {
// @@protoc_insertion_point(message_clear_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.FirewallPolicy)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(metadata_ != nullptr);
      metadata_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(spec_ != nullptr);
      spec_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(status_ != nullptr);
      status_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FirewallPolicy::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_metadata(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.FirewallPolicySpec spec = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_spec(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.FirewallPolicyStatus status = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FirewallPolicy::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.FirewallPolicy)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::metadata(this), target, stream);
  }

  // optional .ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.FirewallPolicySpec spec = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::spec(this), target, stream);
  }

  // optional .ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.FirewallPolicyStatus status = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::status(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.FirewallPolicy)
  return target;
}

size_t FirewallPolicy::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.FirewallPolicy)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *metadata_);
    }

    // optional .ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.FirewallPolicySpec spec = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *spec_);
    }

    // optional .ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.FirewallPolicyStatus status = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *status_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FirewallPolicy::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    FirewallPolicy::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FirewallPolicy::GetClassData() const { return &_class_data_; }

void FirewallPolicy::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<FirewallPolicy *>(to)->MergeFrom(
      static_cast<const FirewallPolicy &>(from));
}


void FirewallPolicy::MergeFrom(const FirewallPolicy& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.FirewallPolicy)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_metadata()->::k8s::io::apimachinery::pkg::apis::meta::v1::ObjectMeta::MergeFrom(from._internal_metadata());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_spec()->::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::FirewallPolicySpec::MergeFrom(from._internal_spec());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_status()->::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::FirewallPolicyStatus::MergeFrom(from._internal_status());
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FirewallPolicy::CopyFrom(const FirewallPolicy& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.FirewallPolicy)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FirewallPolicy::IsInitialized() const {
  return true;
}

void FirewallPolicy::InternalSwap(FirewallPolicy* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FirewallPolicy, status_)
      + sizeof(FirewallPolicy::status_)
      - PROTOBUF_FIELD_OFFSET(FirewallPolicy, metadata_)>(
          reinterpret_cast<char*>(&metadata_),
          reinterpret_cast<char*>(&other->metadata_));
}

::PROTOBUF_NAMESPACE_ID::Metadata FirewallPolicy::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_ssd_2dgit_2ejuniper_2enet_2fcontrail_2fcn2_2fcontrail_2fpkg_2fapis_2fcore_2fv1alpha1_2fgenerated_2eproto_getter, &descriptor_table_ssd_2dgit_2ejuniper_2enet_2fcontrail_2fcn2_2fcontrail_2fpkg_2fapis_2fcore_2fv1alpha1_2fgenerated_2eproto_once,
      file_level_metadata_ssd_2dgit_2ejuniper_2enet_2fcontrail_2fcn2_2fcontrail_2fpkg_2fapis_2fcore_2fv1alpha1_2fgenerated_2eproto[37]);
}

// ===================================================================

class FirewallPolicyAttribute::_Internal {
 public:
  using HasBits = decltype(std::declval<FirewallPolicyAttribute>()._has_bits_);
  static void set_has_sequence(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

FirewallPolicyAttribute::FirewallPolicyAttribute(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.FirewallPolicyAttribute)
}
FirewallPolicyAttribute::FirewallPolicyAttribute(const FirewallPolicyAttribute& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  sequence_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_sequence()) {
    sequence_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_sequence(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.FirewallPolicyAttribute)
}

inline void FirewallPolicyAttribute::SharedCtor() {
sequence_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

FirewallPolicyAttribute::~FirewallPolicyAttribute() {
  // @@protoc_insertion_point(destructor:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.FirewallPolicyAttribute)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void FirewallPolicyAttribute::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  sequence_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void FirewallPolicyAttribute::ArenaDtor(void* object) {
  FirewallPolicyAttribute* _this = reinterpret_cast< FirewallPolicyAttribute* >(object);
  (void)_this;
}
void FirewallPolicyAttribute::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FirewallPolicyAttribute::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void FirewallPolicyAttribute::Clear() {
// @@protoc_insertion_point(message_clear_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.FirewallPolicyAttribute)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    sequence_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FirewallPolicyAttribute::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string sequence = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_sequence();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.FirewallPolicyAttribute.sequence");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FirewallPolicyAttribute::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.FirewallPolicyAttribute)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string sequence = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_sequence().data(), static_cast<int>(this->_internal_sequence().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.FirewallPolicyAttribute.sequence");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_sequence(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.FirewallPolicyAttribute)
  return target;
}

size_t FirewallPolicyAttribute::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.FirewallPolicyAttribute)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string sequence = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_sequence());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FirewallPolicyAttribute::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    FirewallPolicyAttribute::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FirewallPolicyAttribute::GetClassData() const { return &_class_data_; }

void FirewallPolicyAttribute::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<FirewallPolicyAttribute *>(to)->MergeFrom(
      static_cast<const FirewallPolicyAttribute &>(from));
}


void FirewallPolicyAttribute::MergeFrom(const FirewallPolicyAttribute& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.FirewallPolicyAttribute)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_sequence()) {
    _internal_set_sequence(from._internal_sequence());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FirewallPolicyAttribute::CopyFrom(const FirewallPolicyAttribute& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.FirewallPolicyAttribute)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FirewallPolicyAttribute::IsInitialized() const {
  return true;
}

void FirewallPolicyAttribute::InternalSwap(FirewallPolicyAttribute* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &sequence_, GetArenaForAllocation(),
      &other->sequence_, other->GetArenaForAllocation()
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata FirewallPolicyAttribute::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_ssd_2dgit_2ejuniper_2enet_2fcontrail_2fcn2_2fcontrail_2fpkg_2fapis_2fcore_2fv1alpha1_2fgenerated_2eproto_getter, &descriptor_table_ssd_2dgit_2ejuniper_2enet_2fcontrail_2fcn2_2fcontrail_2fpkg_2fapis_2fcore_2fv1alpha1_2fgenerated_2eproto_once,
      file_level_metadata_ssd_2dgit_2ejuniper_2enet_2fcontrail_2fcn2_2fcontrail_2fpkg_2fapis_2fcore_2fv1alpha1_2fgenerated_2eproto[38]);
}

// ===================================================================

class FirewallPolicyList::_Internal {
 public:
  using HasBits = decltype(std::declval<FirewallPolicyList>()._has_bits_);
  static const ::k8s::io::apimachinery::pkg::apis::meta::v1::ListMeta& metadata(const FirewallPolicyList* msg);
  static void set_has_metadata(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::k8s::io::apimachinery::pkg::apis::meta::v1::ListMeta&
FirewallPolicyList::_Internal::metadata(const FirewallPolicyList* msg) {
  return *msg->metadata_;
}
void FirewallPolicyList::clear_metadata() {
  if (metadata_ != nullptr) metadata_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
FirewallPolicyList::FirewallPolicyList(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  items_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.FirewallPolicyList)
}
FirewallPolicyList::FirewallPolicyList(const FirewallPolicyList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      items_(from.items_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_metadata()) {
    metadata_ = new ::k8s::io::apimachinery::pkg::apis::meta::v1::ListMeta(*from.metadata_);
  } else {
    metadata_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.FirewallPolicyList)
}

inline void FirewallPolicyList::SharedCtor() {
metadata_ = nullptr;
}

FirewallPolicyList::~FirewallPolicyList() {
  // @@protoc_insertion_point(destructor:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.FirewallPolicyList)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void FirewallPolicyList::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete metadata_;
}

void FirewallPolicyList::ArenaDtor(void* object) {
  FirewallPolicyList* _this = reinterpret_cast< FirewallPolicyList* >(object);
  (void)_this;
}
void FirewallPolicyList::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FirewallPolicyList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void FirewallPolicyList::Clear() {
// @@protoc_insertion_point(message_clear_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.FirewallPolicyList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  items_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(metadata_ != nullptr);
    metadata_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FirewallPolicyList::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_metadata(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.FirewallPolicy items = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_items(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FirewallPolicyList::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.FirewallPolicyList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::metadata(this), target, stream);
  }

  // repeated .ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.FirewallPolicy items = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_items_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_items(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.FirewallPolicyList)
  return target;
}

size_t FirewallPolicyList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.FirewallPolicyList)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.FirewallPolicy items = 2;
  total_size += 1UL * this->_internal_items_size();
  for (const auto& msg : this->items_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional .k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *metadata_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FirewallPolicyList::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    FirewallPolicyList::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FirewallPolicyList::GetClassData() const { return &_class_data_; }

void FirewallPolicyList::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<FirewallPolicyList *>(to)->MergeFrom(
      static_cast<const FirewallPolicyList &>(from));
}


void FirewallPolicyList::MergeFrom(const FirewallPolicyList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.FirewallPolicyList)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  items_.MergeFrom(from.items_);
  if (from._internal_has_metadata()) {
    _internal_mutable_metadata()->::k8s::io::apimachinery::pkg::apis::meta::v1::ListMeta::MergeFrom(from._internal_metadata());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FirewallPolicyList::CopyFrom(const FirewallPolicyList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.FirewallPolicyList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FirewallPolicyList::IsInitialized() const {
  return true;
}

void FirewallPolicyList::InternalSwap(FirewallPolicyList* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  items_.InternalSwap(&other->items_);
  swap(metadata_, other->metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FirewallPolicyList::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_ssd_2dgit_2ejuniper_2enet_2fcontrail_2fcn2_2fcontrail_2fpkg_2fapis_2fcore_2fv1alpha1_2fgenerated_2eproto_getter, &descriptor_table_ssd_2dgit_2ejuniper_2enet_2fcontrail_2fcn2_2fcontrail_2fpkg_2fapis_2fcore_2fv1alpha1_2fgenerated_2eproto_once,
      file_level_metadata_ssd_2dgit_2ejuniper_2enet_2fcontrail_2fcn2_2fcontrail_2fpkg_2fapis_2fcore_2fv1alpha1_2fgenerated_2eproto[39]);
}

// ===================================================================

class FirewallPolicyReference::_Internal {
 public:
  using HasBits = decltype(std::declval<FirewallPolicyReference>()._has_bits_);
  static const ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::ResourceReference& resourcereference(const FirewallPolicyReference* msg);
  static void set_has_resourcereference(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::APSAttribute& attributes(const FirewallPolicyReference* msg);
  static void set_has_attributes(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::ResourceReference&
FirewallPolicyReference::_Internal::resourcereference(const FirewallPolicyReference* msg) {
  return *msg->resourcereference_;
}
const ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::APSAttribute&
FirewallPolicyReference::_Internal::attributes(const FirewallPolicyReference* msg) {
  return *msg->attributes_;
}
FirewallPolicyReference::FirewallPolicyReference(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.FirewallPolicyReference)
}
FirewallPolicyReference::FirewallPolicyReference(const FirewallPolicyReference& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_resourcereference()) {
    resourcereference_ = new ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::ResourceReference(*from.resourcereference_);
  } else {
    resourcereference_ = nullptr;
  }
  if (from._internal_has_attributes()) {
    attributes_ = new ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::APSAttribute(*from.attributes_);
  } else {
    attributes_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.FirewallPolicyReference)
}

inline void FirewallPolicyReference::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&resourcereference_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&attributes_) -
    reinterpret_cast<char*>(&resourcereference_)) + sizeof(attributes_));
}

FirewallPolicyReference::~FirewallPolicyReference() {
  // @@protoc_insertion_point(destructor:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.FirewallPolicyReference)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void FirewallPolicyReference::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete resourcereference_;
  if (this != internal_default_instance()) delete attributes_;
}

void FirewallPolicyReference::ArenaDtor(void* object) {
  FirewallPolicyReference* _this = reinterpret_cast< FirewallPolicyReference* >(object);
  (void)_this;
}
void FirewallPolicyReference::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FirewallPolicyReference::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void FirewallPolicyReference::Clear() {
// @@protoc_insertion_point(message_clear_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.FirewallPolicyReference)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(resourcereference_ != nullptr);
      resourcereference_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(attributes_ != nullptr);
      attributes_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FirewallPolicyReference::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.ResourceReference resourceReference = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_resourcereference(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.APSAttribute attributes = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_attributes(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FirewallPolicyReference::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.FirewallPolicyReference)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.ResourceReference resourceReference = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::resourcereference(this), target, stream);
  }

  // optional .ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.APSAttribute attributes = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::attributes(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.FirewallPolicyReference)
  return target;
}

size_t FirewallPolicyReference::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.FirewallPolicyReference)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.ResourceReference resourceReference = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *resourcereference_);
    }

    // optional .ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.APSAttribute attributes = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *attributes_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FirewallPolicyReference::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    FirewallPolicyReference::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FirewallPolicyReference::GetClassData() const { return &_class_data_; }

void FirewallPolicyReference::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<FirewallPolicyReference *>(to)->MergeFrom(
      static_cast<const FirewallPolicyReference &>(from));
}


void FirewallPolicyReference::MergeFrom(const FirewallPolicyReference& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.FirewallPolicyReference)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_resourcereference()->::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::ResourceReference::MergeFrom(from._internal_resourcereference());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_attributes()->::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::APSAttribute::MergeFrom(from._internal_attributes());
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FirewallPolicyReference::CopyFrom(const FirewallPolicyReference& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.FirewallPolicyReference)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FirewallPolicyReference::IsInitialized() const {
  return true;
}

void FirewallPolicyReference::InternalSwap(FirewallPolicyReference* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FirewallPolicyReference, attributes_)
      + sizeof(FirewallPolicyReference::attributes_)
      - PROTOBUF_FIELD_OFFSET(FirewallPolicyReference, resourcereference_)>(
          reinterpret_cast<char*>(&resourcereference_),
          reinterpret_cast<char*>(&other->resourcereference_));
}

::PROTOBUF_NAMESPACE_ID::Metadata FirewallPolicyReference::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_ssd_2dgit_2ejuniper_2enet_2fcontrail_2fcn2_2fcontrail_2fpkg_2fapis_2fcore_2fv1alpha1_2fgenerated_2eproto_getter, &descriptor_table_ssd_2dgit_2ejuniper_2enet_2fcontrail_2fcn2_2fcontrail_2fpkg_2fapis_2fcore_2fv1alpha1_2fgenerated_2eproto_once,
      file_level_metadata_ssd_2dgit_2ejuniper_2enet_2fcontrail_2fcn2_2fcontrail_2fpkg_2fapis_2fcore_2fv1alpha1_2fgenerated_2eproto[40]);
}

// ===================================================================

class FirewallPolicySpec::_Internal {
 public:
  using HasBits = decltype(std::declval<FirewallPolicySpec>()._has_bits_);
  static const ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::CommonSpec& commonspec(const FirewallPolicySpec* msg);
  static void set_has_commonspec(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::CommonSpec&
FirewallPolicySpec::_Internal::commonspec(const FirewallPolicySpec* msg) {
  return *msg->commonspec_;
}
FirewallPolicySpec::FirewallPolicySpec(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  firewallrule_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.FirewallPolicySpec)
}
FirewallPolicySpec::FirewallPolicySpec(const FirewallPolicySpec& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      firewallrule_(from.firewallrule_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_commonspec()) {
    commonspec_ = new ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::CommonSpec(*from.commonspec_);
  } else {
    commonspec_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.FirewallPolicySpec)
}

inline void FirewallPolicySpec::SharedCtor() {
commonspec_ = nullptr;
}

FirewallPolicySpec::~FirewallPolicySpec() {
  // @@protoc_insertion_point(destructor:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.FirewallPolicySpec)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void FirewallPolicySpec::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete commonspec_;
}

void FirewallPolicySpec::ArenaDtor(void* object) {
  FirewallPolicySpec* _this = reinterpret_cast< FirewallPolicySpec* >(object);
  (void)_this;
}
void FirewallPolicySpec::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FirewallPolicySpec::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void FirewallPolicySpec::Clear() {
// @@protoc_insertion_point(message_clear_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.FirewallPolicySpec)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  firewallrule_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(commonspec_ != nullptr);
    commonspec_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FirewallPolicySpec::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.CommonSpec commonSpec = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_commonspec(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.FirewallRuleReference firewallRule = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_firewallrule(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FirewallPolicySpec::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.FirewallPolicySpec)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.CommonSpec commonSpec = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::commonspec(this), target, stream);
  }

  // repeated .ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.FirewallRuleReference firewallRule = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_firewallrule_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_firewallrule(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.FirewallPolicySpec)
  return target;
}

size_t FirewallPolicySpec::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.FirewallPolicySpec)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.FirewallRuleReference firewallRule = 3;
  total_size += 1UL * this->_internal_firewallrule_size();
  for (const auto& msg : this->firewallrule_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional .ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.CommonSpec commonSpec = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *commonspec_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FirewallPolicySpec::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    FirewallPolicySpec::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FirewallPolicySpec::GetClassData() const { return &_class_data_; }

void FirewallPolicySpec::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<FirewallPolicySpec *>(to)->MergeFrom(
      static_cast<const FirewallPolicySpec &>(from));
}


void FirewallPolicySpec::MergeFrom(const FirewallPolicySpec& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.FirewallPolicySpec)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  firewallrule_.MergeFrom(from.firewallrule_);
  if (from._internal_has_commonspec()) {
    _internal_mutable_commonspec()->::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::CommonSpec::MergeFrom(from._internal_commonspec());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FirewallPolicySpec::CopyFrom(const FirewallPolicySpec& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.FirewallPolicySpec)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FirewallPolicySpec::IsInitialized() const {
  return true;
}

void FirewallPolicySpec::InternalSwap(FirewallPolicySpec* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  firewallrule_.InternalSwap(&other->firewallrule_);
  swap(commonspec_, other->commonspec_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FirewallPolicySpec::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_ssd_2dgit_2ejuniper_2enet_2fcontrail_2fcn2_2fcontrail_2fpkg_2fapis_2fcore_2fv1alpha1_2fgenerated_2eproto_getter, &descriptor_table_ssd_2dgit_2ejuniper_2enet_2fcontrail_2fcn2_2fcontrail_2fpkg_2fapis_2fcore_2fv1alpha1_2fgenerated_2eproto_once,
      file_level_metadata_ssd_2dgit_2ejuniper_2enet_2fcontrail_2fcn2_2fcontrail_2fpkg_2fapis_2fcore_2fv1alpha1_2fgenerated_2eproto[41]);
}

// ===================================================================

class FirewallPolicyStatus::_Internal {
 public:
  using HasBits = decltype(std::declval<FirewallPolicyStatus>()._has_bits_);
  static const ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::CommonStatus& commonstatus(const FirewallPolicyStatus* msg);
  static void set_has_commonstatus(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::CommonStatus&
FirewallPolicyStatus::_Internal::commonstatus(const FirewallPolicyStatus* msg) {
  return *msg->commonstatus_;
}
FirewallPolicyStatus::FirewallPolicyStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.FirewallPolicyStatus)
}
FirewallPolicyStatus::FirewallPolicyStatus(const FirewallPolicyStatus& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_commonstatus()) {
    commonstatus_ = new ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::CommonStatus(*from.commonstatus_);
  } else {
    commonstatus_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.FirewallPolicyStatus)
}

inline void FirewallPolicyStatus::SharedCtor() {
commonstatus_ = nullptr;
}

FirewallPolicyStatus::~FirewallPolicyStatus() {
  // @@protoc_insertion_point(destructor:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.FirewallPolicyStatus)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void FirewallPolicyStatus::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete commonstatus_;
}

void FirewallPolicyStatus::ArenaDtor(void* object) {
  FirewallPolicyStatus* _this = reinterpret_cast< FirewallPolicyStatus* >(object);
  (void)_this;
}
void FirewallPolicyStatus::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FirewallPolicyStatus::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void FirewallPolicyStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.FirewallPolicyStatus)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(commonstatus_ != nullptr);
    commonstatus_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FirewallPolicyStatus::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.CommonStatus commonStatus = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_commonstatus(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FirewallPolicyStatus::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.FirewallPolicyStatus)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.CommonStatus commonStatus = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::commonstatus(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.FirewallPolicyStatus)
  return target;
}

size_t FirewallPolicyStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.FirewallPolicyStatus)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.CommonStatus commonStatus = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *commonstatus_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FirewallPolicyStatus::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    FirewallPolicyStatus::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FirewallPolicyStatus::GetClassData() const { return &_class_data_; }

void FirewallPolicyStatus::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<FirewallPolicyStatus *>(to)->MergeFrom(
      static_cast<const FirewallPolicyStatus &>(from));
}


void FirewallPolicyStatus::MergeFrom(const FirewallPolicyStatus& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.FirewallPolicyStatus)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_commonstatus()) {
    _internal_mutable_commonstatus()->::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::CommonStatus::MergeFrom(from._internal_commonstatus());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FirewallPolicyStatus::CopyFrom(const FirewallPolicyStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.FirewallPolicyStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FirewallPolicyStatus::IsInitialized() const {
  return true;
}

void FirewallPolicyStatus::InternalSwap(FirewallPolicyStatus* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(commonstatus_, other->commonstatus_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FirewallPolicyStatus::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_ssd_2dgit_2ejuniper_2enet_2fcontrail_2fcn2_2fcontrail_2fpkg_2fapis_2fcore_2fv1alpha1_2fgenerated_2eproto_getter, &descriptor_table_ssd_2dgit_2ejuniper_2enet_2fcontrail_2fcn2_2fcontrail_2fpkg_2fapis_2fcore_2fv1alpha1_2fgenerated_2eproto_once,
      file_level_metadata_ssd_2dgit_2ejuniper_2enet_2fcontrail_2fcn2_2fcontrail_2fpkg_2fapis_2fcore_2fv1alpha1_2fgenerated_2eproto[42]);
}

// ===================================================================

class FirewallRule::_Internal {
 public:
  using HasBits = decltype(std::declval<FirewallRule>()._has_bits_);
  static const ::k8s::io::apimachinery::pkg::apis::meta::v1::ObjectMeta& metadata(const FirewallRule* msg);
  static void set_has_metadata(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::FirewallRuleSpec& spec(const FirewallRule* msg);
  static void set_has_spec(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::FirewallRuleStatus& status(const FirewallRule* msg);
  static void set_has_status(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::k8s::io::apimachinery::pkg::apis::meta::v1::ObjectMeta&
FirewallRule::_Internal::metadata(const FirewallRule* msg) {
  return *msg->metadata_;
}
const ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::FirewallRuleSpec&
FirewallRule::_Internal::spec(const FirewallRule* msg) {
  return *msg->spec_;
}
const ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::FirewallRuleStatus&
FirewallRule::_Internal::status(const FirewallRule* msg) {
  return *msg->status_;
}
void FirewallRule::clear_metadata() {
  if (metadata_ != nullptr) metadata_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
FirewallRule::FirewallRule(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.FirewallRule)
}
FirewallRule::FirewallRule(const FirewallRule& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_metadata()) {
    metadata_ = new ::k8s::io::apimachinery::pkg::apis::meta::v1::ObjectMeta(*from.metadata_);
  } else {
    metadata_ = nullptr;
  }
  if (from._internal_has_spec()) {
    spec_ = new ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::FirewallRuleSpec(*from.spec_);
  } else {
    spec_ = nullptr;
  }
  if (from._internal_has_status()) {
    status_ = new ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::FirewallRuleStatus(*from.status_);
  } else {
    status_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.FirewallRule)
}

inline void FirewallRule::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&metadata_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&status_) -
    reinterpret_cast<char*>(&metadata_)) + sizeof(status_));
}

FirewallRule::~FirewallRule() {
  // @@protoc_insertion_point(destructor:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.FirewallRule)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void FirewallRule::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete metadata_;
  if (this != internal_default_instance()) delete spec_;
  if (this != internal_default_instance()) delete status_;
}

void FirewallRule::ArenaDtor(void* object) {
  FirewallRule* _this = reinterpret_cast< FirewallRule* >(object);
  (void)_this;
}
void FirewallRule::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FirewallRule::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void FirewallRule::Clear() {
// @@protoc_insertion_point(message_clear_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.FirewallRule)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(metadata_ != nullptr);
      metadata_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(spec_ != nullptr);
      spec_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(status_ != nullptr);
      status_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FirewallRule::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_metadata(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.FirewallRuleSpec spec = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_spec(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.FirewallRuleStatus status = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FirewallRule::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.FirewallRule)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::metadata(this), target, stream);
  }

  // optional .ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.FirewallRuleSpec spec = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::spec(this), target, stream);
  }

  // optional .ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.FirewallRuleStatus status = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::status(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.FirewallRule)
  return target;
}

size_t FirewallRule::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.FirewallRule)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *metadata_);
    }

    // optional .ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.FirewallRuleSpec spec = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *spec_);
    }

    // optional .ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.FirewallRuleStatus status = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *status_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FirewallRule::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    FirewallRule::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FirewallRule::GetClassData() const { return &_class_data_; }

void FirewallRule::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<FirewallRule *>(to)->MergeFrom(
      static_cast<const FirewallRule &>(from));
}


void FirewallRule::MergeFrom(const FirewallRule& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.FirewallRule)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_metadata()->::k8s::io::apimachinery::pkg::apis::meta::v1::ObjectMeta::MergeFrom(from._internal_metadata());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_spec()->::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::FirewallRuleSpec::MergeFrom(from._internal_spec());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_status()->::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::FirewallRuleStatus::MergeFrom(from._internal_status());
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FirewallRule::CopyFrom(const FirewallRule& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.FirewallRule)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FirewallRule::IsInitialized() const {
  return true;
}

void FirewallRule::InternalSwap(FirewallRule* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FirewallRule, status_)
      + sizeof(FirewallRule::status_)
      - PROTOBUF_FIELD_OFFSET(FirewallRule, metadata_)>(
          reinterpret_cast<char*>(&metadata_),
          reinterpret_cast<char*>(&other->metadata_));
}

::PROTOBUF_NAMESPACE_ID::Metadata FirewallRule::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_ssd_2dgit_2ejuniper_2enet_2fcontrail_2fcn2_2fcontrail_2fpkg_2fapis_2fcore_2fv1alpha1_2fgenerated_2eproto_getter, &descriptor_table_ssd_2dgit_2ejuniper_2enet_2fcontrail_2fcn2_2fcontrail_2fpkg_2fapis_2fcore_2fv1alpha1_2fgenerated_2eproto_once,
      file_level_metadata_ssd_2dgit_2ejuniper_2enet_2fcontrail_2fcn2_2fcontrail_2fpkg_2fapis_2fcore_2fv1alpha1_2fgenerated_2eproto[43]);
}

// ===================================================================

class FirewallRuleEndpointType::_Internal {
 public:
  using HasBits = decltype(std::declval<FirewallRuleEndpointType>()._has_bits_);
  static const ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::FirewallSubnet& subnet(const FirewallRuleEndpointType* msg);
  static void set_has_subnet(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_addressgroup(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_any(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::FirewallSubnet&
FirewallRuleEndpointType::_Internal::subnet(const FirewallRuleEndpointType* msg) {
  return *msg->subnet_;
}
FirewallRuleEndpointType::FirewallRuleEndpointType(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  tags_(arena),
  tagids_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.FirewallRuleEndpointType)
}
FirewallRuleEndpointType::FirewallRuleEndpointType(const FirewallRuleEndpointType& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      tags_(from.tags_),
      tagids_(from.tagids_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  addressgroup_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_addressgroup()) {
    addressgroup_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_addressgroup(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_subnet()) {
    subnet_ = new ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::FirewallSubnet(*from.subnet_);
  } else {
    subnet_ = nullptr;
  }
  any_ = from.any_;
  // @@protoc_insertion_point(copy_constructor:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.FirewallRuleEndpointType)
}

inline void FirewallRuleEndpointType::SharedCtor() {
addressgroup_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&subnet_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&any_) -
    reinterpret_cast<char*>(&subnet_)) + sizeof(any_));
}

FirewallRuleEndpointType::~FirewallRuleEndpointType() {
  // @@protoc_insertion_point(destructor:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.FirewallRuleEndpointType)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void FirewallRuleEndpointType::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  addressgroup_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete subnet_;
}

void FirewallRuleEndpointType::ArenaDtor(void* object) {
  FirewallRuleEndpointType* _this = reinterpret_cast< FirewallRuleEndpointType* >(object);
  (void)_this;
}
void FirewallRuleEndpointType::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FirewallRuleEndpointType::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void FirewallRuleEndpointType::Clear() {
// @@protoc_insertion_point(message_clear_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.FirewallRuleEndpointType)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  tags_.Clear();
  tagids_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      addressgroup_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(subnet_ != nullptr);
      subnet_->Clear();
    }
  }
  any_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FirewallRuleEndpointType::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.FirewallSubnet subnet = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_subnet(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string addressGroup = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_addressgroup();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.FirewallRuleEndpointType.addressGroup");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string tags = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_tags();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            #ifndef NDEBUG
            ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.FirewallRuleEndpointType.tags");
            #endif  // !NDEBUG
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated int64 tagIds = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_tagids(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<40>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt64Parser(_internal_mutable_tagids(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool any = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_any(&has_bits);
          any_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FirewallRuleEndpointType::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.FirewallRuleEndpointType)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.FirewallSubnet subnet = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::subnet(this), target, stream);
  }

  // optional string addressGroup = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_addressgroup().data(), static_cast<int>(this->_internal_addressgroup().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.FirewallRuleEndpointType.addressGroup");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_addressgroup(), target);
  }

  // repeated string tags = 4;
  for (int i = 0, n = this->_internal_tags_size(); i < n; i++) {
    const auto& s = this->_internal_tags(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.FirewallRuleEndpointType.tags");
    target = stream->WriteString(4, s, target);
  }

  // repeated int64 tagIds = 5;
  for (int i = 0, n = this->_internal_tagids_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(5, this->_internal_tagids(i), target);
  }

  // optional bool any = 6;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_any(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.FirewallRuleEndpointType)
  return target;
}

size_t FirewallRuleEndpointType::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.FirewallRuleEndpointType)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string tags = 4;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(tags_.size());
  for (int i = 0, n = tags_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      tags_.Get(i));
  }

  // repeated int64 tagIds = 5;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int64Size(this->tagids_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_tagids_size());
    total_size += data_size;
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string addressGroup = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_addressgroup());
    }

    // optional .ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.FirewallSubnet subnet = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *subnet_);
    }

    // optional bool any = 6;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FirewallRuleEndpointType::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    FirewallRuleEndpointType::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FirewallRuleEndpointType::GetClassData() const { return &_class_data_; }

void FirewallRuleEndpointType::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<FirewallRuleEndpointType *>(to)->MergeFrom(
      static_cast<const FirewallRuleEndpointType &>(from));
}


void FirewallRuleEndpointType::MergeFrom(const FirewallRuleEndpointType& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.FirewallRuleEndpointType)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  tags_.MergeFrom(from.tags_);
  tagids_.MergeFrom(from.tagids_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_addressgroup(from._internal_addressgroup());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_subnet()->::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::FirewallSubnet::MergeFrom(from._internal_subnet());
    }
    if (cached_has_bits & 0x00000004u) {
      any_ = from.any_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FirewallRuleEndpointType::CopyFrom(const FirewallRuleEndpointType& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.FirewallRuleEndpointType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FirewallRuleEndpointType::IsInitialized() const {
  return true;
}

void FirewallRuleEndpointType::InternalSwap(FirewallRuleEndpointType* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  tags_.InternalSwap(&other->tags_);
  tagids_.InternalSwap(&other->tagids_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &addressgroup_, GetArenaForAllocation(),
      &other->addressgroup_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FirewallRuleEndpointType, any_)
      + sizeof(FirewallRuleEndpointType::any_)
      - PROTOBUF_FIELD_OFFSET(FirewallRuleEndpointType, subnet_)>(
          reinterpret_cast<char*>(&subnet_),
          reinterpret_cast<char*>(&other->subnet_));
}

::PROTOBUF_NAMESPACE_ID::Metadata FirewallRuleEndpointType::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_ssd_2dgit_2ejuniper_2enet_2fcontrail_2fcn2_2fcontrail_2fpkg_2fapis_2fcore_2fv1alpha1_2fgenerated_2eproto_getter, &descriptor_table_ssd_2dgit_2ejuniper_2enet_2fcontrail_2fcn2_2fcontrail_2fpkg_2fapis_2fcore_2fv1alpha1_2fgenerated_2eproto_once,
      file_level_metadata_ssd_2dgit_2ejuniper_2enet_2fcontrail_2fcn2_2fcontrail_2fpkg_2fapis_2fcore_2fv1alpha1_2fgenerated_2eproto[44]);
}

// ===================================================================

class FirewallRuleList::_Internal {
 public:
  using HasBits = decltype(std::declval<FirewallRuleList>()._has_bits_);
  static const ::k8s::io::apimachinery::pkg::apis::meta::v1::ListMeta& metadata(const FirewallRuleList* msg);
  static void set_has_metadata(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::k8s::io::apimachinery::pkg::apis::meta::v1::ListMeta&
FirewallRuleList::_Internal::metadata(const FirewallRuleList* msg) {
  return *msg->metadata_;
}
void FirewallRuleList::clear_metadata() {
  if (metadata_ != nullptr) metadata_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
FirewallRuleList::FirewallRuleList(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  items_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.FirewallRuleList)
}
FirewallRuleList::FirewallRuleList(const FirewallRuleList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      items_(from.items_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_metadata()) {
    metadata_ = new ::k8s::io::apimachinery::pkg::apis::meta::v1::ListMeta(*from.metadata_);
  } else {
    metadata_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.FirewallRuleList)
}

inline void FirewallRuleList::SharedCtor() {
metadata_ = nullptr;
}

FirewallRuleList::~FirewallRuleList() {
  // @@protoc_insertion_point(destructor:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.FirewallRuleList)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void FirewallRuleList::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete metadata_;
}

void FirewallRuleList::ArenaDtor(void* object) {
  FirewallRuleList* _this = reinterpret_cast< FirewallRuleList* >(object);
  (void)_this;
}
void FirewallRuleList::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FirewallRuleList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void FirewallRuleList::Clear() {
// @@protoc_insertion_point(message_clear_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.FirewallRuleList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  items_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(metadata_ != nullptr);
    metadata_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FirewallRuleList::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_metadata(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.FirewallRule items = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_items(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FirewallRuleList::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.FirewallRuleList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::metadata(this), target, stream);
  }

  // repeated .ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.FirewallRule items = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_items_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_items(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.FirewallRuleList)
  return target;
}

size_t FirewallRuleList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.FirewallRuleList)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.FirewallRule items = 2;
  total_size += 1UL * this->_internal_items_size();
  for (const auto& msg : this->items_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional .k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *metadata_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FirewallRuleList::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    FirewallRuleList::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FirewallRuleList::GetClassData() const { return &_class_data_; }

void FirewallRuleList::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<FirewallRuleList *>(to)->MergeFrom(
      static_cast<const FirewallRuleList &>(from));
}


void FirewallRuleList::MergeFrom(const FirewallRuleList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.FirewallRuleList)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  items_.MergeFrom(from.items_);
  if (from._internal_has_metadata()) {
    _internal_mutable_metadata()->::k8s::io::apimachinery::pkg::apis::meta::v1::ListMeta::MergeFrom(from._internal_metadata());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FirewallRuleList::CopyFrom(const FirewallRuleList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.FirewallRuleList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FirewallRuleList::IsInitialized() const {
  return true;
}

void FirewallRuleList::InternalSwap(FirewallRuleList* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  items_.InternalSwap(&other->items_);
  swap(metadata_, other->metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FirewallRuleList::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_ssd_2dgit_2ejuniper_2enet_2fcontrail_2fcn2_2fcontrail_2fpkg_2fapis_2fcore_2fv1alpha1_2fgenerated_2eproto_getter, &descriptor_table_ssd_2dgit_2ejuniper_2enet_2fcontrail_2fcn2_2fcontrail_2fpkg_2fapis_2fcore_2fv1alpha1_2fgenerated_2eproto_once,
      file_level_metadata_ssd_2dgit_2ejuniper_2enet_2fcontrail_2fcn2_2fcontrail_2fpkg_2fapis_2fcore_2fv1alpha1_2fgenerated_2eproto[45]);
}

// ===================================================================

class FirewallRuleReference::_Internal {
 public:
  using HasBits = decltype(std::declval<FirewallRuleReference>()._has_bits_);
  static const ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::ResourceReference& resourcereference(const FirewallRuleReference* msg);
  static void set_has_resourcereference(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::FirewallPolicyAttribute& attributes(const FirewallRuleReference* msg);
  static void set_has_attributes(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::ResourceReference&
FirewallRuleReference::_Internal::resourcereference(const FirewallRuleReference* msg) {
  return *msg->resourcereference_;
}
const ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::FirewallPolicyAttribute&
FirewallRuleReference::_Internal::attributes(const FirewallRuleReference* msg) {
  return *msg->attributes_;
}
FirewallRuleReference::FirewallRuleReference(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.FirewallRuleReference)
}
FirewallRuleReference::FirewallRuleReference(const FirewallRuleReference& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_resourcereference()) {
    resourcereference_ = new ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::ResourceReference(*from.resourcereference_);
  } else {
    resourcereference_ = nullptr;
  }
  if (from._internal_has_attributes()) {
    attributes_ = new ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::FirewallPolicyAttribute(*from.attributes_);
  } else {
    attributes_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.FirewallRuleReference)
}

inline void FirewallRuleReference::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&resourcereference_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&attributes_) -
    reinterpret_cast<char*>(&resourcereference_)) + sizeof(attributes_));
}

FirewallRuleReference::~FirewallRuleReference() {
  // @@protoc_insertion_point(destructor:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.FirewallRuleReference)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void FirewallRuleReference::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete resourcereference_;
  if (this != internal_default_instance()) delete attributes_;
}

void FirewallRuleReference::ArenaDtor(void* object) {
  FirewallRuleReference* _this = reinterpret_cast< FirewallRuleReference* >(object);
  (void)_this;
}
void FirewallRuleReference::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FirewallRuleReference::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void FirewallRuleReference::Clear() {
// @@protoc_insertion_point(message_clear_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.FirewallRuleReference)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(resourcereference_ != nullptr);
      resourcereference_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(attributes_ != nullptr);
      attributes_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FirewallRuleReference::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.ResourceReference resourceReference = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_resourcereference(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.FirewallPolicyAttribute attributes = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_attributes(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FirewallRuleReference::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.FirewallRuleReference)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.ResourceReference resourceReference = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::resourcereference(this), target, stream);
  }

  // optional .ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.FirewallPolicyAttribute attributes = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::attributes(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.FirewallRuleReference)
  return target;
}

size_t FirewallRuleReference::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.FirewallRuleReference)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.ResourceReference resourceReference = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *resourcereference_);
    }

    // optional .ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.FirewallPolicyAttribute attributes = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *attributes_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FirewallRuleReference::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    FirewallRuleReference::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FirewallRuleReference::GetClassData() const { return &_class_data_; }

void FirewallRuleReference::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<FirewallRuleReference *>(to)->MergeFrom(
      static_cast<const FirewallRuleReference &>(from));
}


void FirewallRuleReference::MergeFrom(const FirewallRuleReference& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.FirewallRuleReference)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_resourcereference()->::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::ResourceReference::MergeFrom(from._internal_resourcereference());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_attributes()->::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::FirewallPolicyAttribute::MergeFrom(from._internal_attributes());
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FirewallRuleReference::CopyFrom(const FirewallRuleReference& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.FirewallRuleReference)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FirewallRuleReference::IsInitialized() const {
  return true;
}

void FirewallRuleReference::InternalSwap(FirewallRuleReference* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FirewallRuleReference, attributes_)
      + sizeof(FirewallRuleReference::attributes_)
      - PROTOBUF_FIELD_OFFSET(FirewallRuleReference, resourcereference_)>(
          reinterpret_cast<char*>(&resourcereference_),
          reinterpret_cast<char*>(&other->resourcereference_));
}

::PROTOBUF_NAMESPACE_ID::Metadata FirewallRuleReference::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_ssd_2dgit_2ejuniper_2enet_2fcontrail_2fcn2_2fcontrail_2fpkg_2fapis_2fcore_2fv1alpha1_2fgenerated_2eproto_getter, &descriptor_table_ssd_2dgit_2ejuniper_2enet_2fcontrail_2fcn2_2fcontrail_2fpkg_2fapis_2fcore_2fv1alpha1_2fgenerated_2eproto_once,
      file_level_metadata_ssd_2dgit_2ejuniper_2enet_2fcontrail_2fcn2_2fcontrail_2fpkg_2fapis_2fcore_2fv1alpha1_2fgenerated_2eproto[46]);
}

// ===================================================================

class FirewallRuleSpec::_Internal {
 public:
  using HasBits = decltype(std::declval<FirewallRuleSpec>()._has_bits_);
  static const ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::CommonSpec& commonspec(const FirewallRuleSpec* msg);
  static void set_has_commonspec(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::ResourceReference& addressgroupreference(const FirewallRuleSpec* msg);
  static void set_has_addressgroupreference(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::FirewallActionListType& actionlist(const FirewallRuleSpec* msg);
  static void set_has_actionlist(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::FirewallServiceType& service(const FirewallRuleSpec* msg);
  static void set_has_service(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::FirewallRuleEndpointType& endpoint1(const FirewallRuleSpec* msg);
  static void set_has_endpoint1(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::FirewallRuleEndpointType& endpoint2(const FirewallRuleSpec* msg);
  static void set_has_endpoint2(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_direction(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::CommonSpec&
FirewallRuleSpec::_Internal::commonspec(const FirewallRuleSpec* msg) {
  return *msg->commonspec_;
}
const ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::ResourceReference&
FirewallRuleSpec::_Internal::addressgroupreference(const FirewallRuleSpec* msg) {
  return *msg->addressgroupreference_;
}
const ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::FirewallActionListType&
FirewallRuleSpec::_Internal::actionlist(const FirewallRuleSpec* msg) {
  return *msg->actionlist_;
}
const ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::FirewallServiceType&
FirewallRuleSpec::_Internal::service(const FirewallRuleSpec* msg) {
  return *msg->service_;
}
const ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::FirewallRuleEndpointType&
FirewallRuleSpec::_Internal::endpoint1(const FirewallRuleSpec* msg) {
  return *msg->endpoint1_;
}
const ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::FirewallRuleEndpointType&
FirewallRuleSpec::_Internal::endpoint2(const FirewallRuleSpec* msg) {
  return *msg->endpoint2_;
}
FirewallRuleSpec::FirewallRuleSpec(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  matchtags_(arena),
  matchtagstypes_(arena),
  tagreferences_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.FirewallRuleSpec)
}
FirewallRuleSpec::FirewallRuleSpec(const FirewallRuleSpec& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      matchtags_(from.matchtags_),
      matchtagstypes_(from.matchtagstypes_),
      tagreferences_(from.tagreferences_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  direction_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_direction()) {
    direction_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_direction(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_commonspec()) {
    commonspec_ = new ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::CommonSpec(*from.commonspec_);
  } else {
    commonspec_ = nullptr;
  }
  if (from._internal_has_addressgroupreference()) {
    addressgroupreference_ = new ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::ResourceReference(*from.addressgroupreference_);
  } else {
    addressgroupreference_ = nullptr;
  }
  if (from._internal_has_actionlist()) {
    actionlist_ = new ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::FirewallActionListType(*from.actionlist_);
  } else {
    actionlist_ = nullptr;
  }
  if (from._internal_has_service()) {
    service_ = new ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::FirewallServiceType(*from.service_);
  } else {
    service_ = nullptr;
  }
  if (from._internal_has_endpoint1()) {
    endpoint1_ = new ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::FirewallRuleEndpointType(*from.endpoint1_);
  } else {
    endpoint1_ = nullptr;
  }
  if (from._internal_has_endpoint2()) {
    endpoint2_ = new ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::FirewallRuleEndpointType(*from.endpoint2_);
  } else {
    endpoint2_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.FirewallRuleSpec)
}

inline void FirewallRuleSpec::SharedCtor() {
direction_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&commonspec_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&endpoint2_) -
    reinterpret_cast<char*>(&commonspec_)) + sizeof(endpoint2_));
}

FirewallRuleSpec::~FirewallRuleSpec() {
  // @@protoc_insertion_point(destructor:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.FirewallRuleSpec)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void FirewallRuleSpec::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  direction_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete commonspec_;
  if (this != internal_default_instance()) delete addressgroupreference_;
  if (this != internal_default_instance()) delete actionlist_;
  if (this != internal_default_instance()) delete service_;
  if (this != internal_default_instance()) delete endpoint1_;
  if (this != internal_default_instance()) delete endpoint2_;
}

void FirewallRuleSpec::ArenaDtor(void* object) {
  FirewallRuleSpec* _this = reinterpret_cast< FirewallRuleSpec* >(object);
  (void)_this;
}
void FirewallRuleSpec::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FirewallRuleSpec::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void FirewallRuleSpec::Clear() {
// @@protoc_insertion_point(message_clear_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.FirewallRuleSpec)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  matchtags_.Clear();
  matchtagstypes_.Clear();
  tagreferences_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      direction_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(commonspec_ != nullptr);
      commonspec_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(addressgroupreference_ != nullptr);
      addressgroupreference_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(actionlist_ != nullptr);
      actionlist_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(service_ != nullptr);
      service_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(endpoint1_ != nullptr);
      endpoint1_->Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(endpoint2_ != nullptr);
      endpoint2_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FirewallRuleSpec::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.CommonSpec commonSpec = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_commonspec(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.ResourceReference addressGroupReference = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_addressgroupreference(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.FirewallActionListType actionList = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_actionlist(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.FirewallServiceType service = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_service(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.FirewallRuleEndpointType Endpoint1 = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_endpoint1(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.FirewallRuleEndpointType Endpoint2 = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_endpoint2(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string matchTags = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_matchtags();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            #ifndef NDEBUG
            ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.FirewallRuleSpec.matchTags");
            #endif  // !NDEBUG
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated int64 matchTagsTypes = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_matchtagstypes(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<64>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt64Parser(_internal_mutable_matchtagstypes(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string direction = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          auto str = _internal_mutable_direction();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.FirewallRuleSpec.direction");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.ResourceReference tagReferences = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_tagreferences(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<82>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FirewallRuleSpec::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.FirewallRuleSpec)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.CommonSpec commonSpec = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::commonspec(this), target, stream);
  }

  // optional .ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.ResourceReference addressGroupReference = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::addressgroupreference(this), target, stream);
  }

  // optional .ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.FirewallActionListType actionList = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::actionlist(this), target, stream);
  }

  // optional .ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.FirewallServiceType service = 4;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::service(this), target, stream);
  }

  // optional .ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.FirewallRuleEndpointType Endpoint1 = 5;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::endpoint1(this), target, stream);
  }

  // optional .ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.FirewallRuleEndpointType Endpoint2 = 6;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::endpoint2(this), target, stream);
  }

  // repeated string matchTags = 7;
  for (int i = 0, n = this->_internal_matchtags_size(); i < n; i++) {
    const auto& s = this->_internal_matchtags(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.FirewallRuleSpec.matchTags");
    target = stream->WriteString(7, s, target);
  }

  // repeated int64 matchTagsTypes = 8;
  for (int i = 0, n = this->_internal_matchtagstypes_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(8, this->_internal_matchtagstypes(i), target);
  }

  // optional string direction = 9;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_direction().data(), static_cast<int>(this->_internal_direction().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.FirewallRuleSpec.direction");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_direction(), target);
  }

  // repeated .ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.ResourceReference tagReferences = 10;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_tagreferences_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(10, this->_internal_tagreferences(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.FirewallRuleSpec)
  return target;
}

size_t FirewallRuleSpec::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.FirewallRuleSpec)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string matchTags = 7;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(matchtags_.size());
  for (int i = 0, n = matchtags_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      matchtags_.Get(i));
  }

  // repeated int64 matchTagsTypes = 8;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int64Size(this->matchtagstypes_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_matchtagstypes_size());
    total_size += data_size;
  }

  // repeated .ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.ResourceReference tagReferences = 10;
  total_size += 1UL * this->_internal_tagreferences_size();
  for (const auto& msg : this->tagreferences_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    // optional string direction = 9;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_direction());
    }

    // optional .ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.CommonSpec commonSpec = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *commonspec_);
    }

    // optional .ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.ResourceReference addressGroupReference = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *addressgroupreference_);
    }

    // optional .ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.FirewallActionListType actionList = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *actionlist_);
    }

    // optional .ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.FirewallServiceType service = 4;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *service_);
    }

    // optional .ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.FirewallRuleEndpointType Endpoint1 = 5;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *endpoint1_);
    }

    // optional .ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.FirewallRuleEndpointType Endpoint2 = 6;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *endpoint2_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FirewallRuleSpec::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    FirewallRuleSpec::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FirewallRuleSpec::GetClassData() const { return &_class_data_; }

void FirewallRuleSpec::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<FirewallRuleSpec *>(to)->MergeFrom(
      static_cast<const FirewallRuleSpec &>(from));
}


void FirewallRuleSpec::MergeFrom(const FirewallRuleSpec& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.FirewallRuleSpec)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  matchtags_.MergeFrom(from.matchtags_);
  matchtagstypes_.MergeFrom(from.matchtagstypes_);
  tagreferences_.MergeFrom(from.tagreferences_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_direction(from._internal_direction());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_commonspec()->::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::CommonSpec::MergeFrom(from._internal_commonspec());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_addressgroupreference()->::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::ResourceReference::MergeFrom(from._internal_addressgroupreference());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_actionlist()->::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::FirewallActionListType::MergeFrom(from._internal_actionlist());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_mutable_service()->::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::FirewallServiceType::MergeFrom(from._internal_service());
    }
    if (cached_has_bits & 0x00000020u) {
      _internal_mutable_endpoint1()->::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::FirewallRuleEndpointType::MergeFrom(from._internal_endpoint1());
    }
    if (cached_has_bits & 0x00000040u) {
      _internal_mutable_endpoint2()->::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::FirewallRuleEndpointType::MergeFrom(from._internal_endpoint2());
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FirewallRuleSpec::CopyFrom(const FirewallRuleSpec& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.FirewallRuleSpec)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FirewallRuleSpec::IsInitialized() const {
  return true;
}

void FirewallRuleSpec::InternalSwap(FirewallRuleSpec* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  matchtags_.InternalSwap(&other->matchtags_);
  matchtagstypes_.InternalSwap(&other->matchtagstypes_);
  tagreferences_.InternalSwap(&other->tagreferences_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &direction_, GetArenaForAllocation(),
      &other->direction_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FirewallRuleSpec, endpoint2_)
      + sizeof(FirewallRuleSpec::endpoint2_)
      - PROTOBUF_FIELD_OFFSET(FirewallRuleSpec, commonspec_)>(
          reinterpret_cast<char*>(&commonspec_),
          reinterpret_cast<char*>(&other->commonspec_));
}

::PROTOBUF_NAMESPACE_ID::Metadata FirewallRuleSpec::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_ssd_2dgit_2ejuniper_2enet_2fcontrail_2fcn2_2fcontrail_2fpkg_2fapis_2fcore_2fv1alpha1_2fgenerated_2eproto_getter, &descriptor_table_ssd_2dgit_2ejuniper_2enet_2fcontrail_2fcn2_2fcontrail_2fpkg_2fapis_2fcore_2fv1alpha1_2fgenerated_2eproto_once,
      file_level_metadata_ssd_2dgit_2ejuniper_2enet_2fcontrail_2fcn2_2fcontrail_2fpkg_2fapis_2fcore_2fv1alpha1_2fgenerated_2eproto[47]);
}

// ===================================================================

class FirewallRuleStatus::_Internal {
 public:
  using HasBits = decltype(std::declval<FirewallRuleStatus>()._has_bits_);
  static const ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::CommonStatus& commonstatus(const FirewallRuleStatus* msg);
  static void set_has_commonstatus(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::CommonStatus&
FirewallRuleStatus::_Internal::commonstatus(const FirewallRuleStatus* msg) {
  return *msg->commonstatus_;
}
FirewallRuleStatus::FirewallRuleStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.FirewallRuleStatus)
}
FirewallRuleStatus::FirewallRuleStatus(const FirewallRuleStatus& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_commonstatus()) {
    commonstatus_ = new ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::CommonStatus(*from.commonstatus_);
  } else {
    commonstatus_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.FirewallRuleStatus)
}

inline void FirewallRuleStatus::SharedCtor() {
commonstatus_ = nullptr;
}

FirewallRuleStatus::~FirewallRuleStatus() {
  // @@protoc_insertion_point(destructor:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.FirewallRuleStatus)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void FirewallRuleStatus::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete commonstatus_;
}

void FirewallRuleStatus::ArenaDtor(void* object) {
  FirewallRuleStatus* _this = reinterpret_cast< FirewallRuleStatus* >(object);
  (void)_this;
}
void FirewallRuleStatus::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FirewallRuleStatus::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void FirewallRuleStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.FirewallRuleStatus)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(commonstatus_ != nullptr);
    commonstatus_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FirewallRuleStatus::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.CommonStatus commonStatus = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_commonstatus(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FirewallRuleStatus::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.FirewallRuleStatus)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.CommonStatus commonStatus = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::commonstatus(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.FirewallRuleStatus)
  return target;
}

size_t FirewallRuleStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.FirewallRuleStatus)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.CommonStatus commonStatus = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *commonstatus_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FirewallRuleStatus::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    FirewallRuleStatus::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FirewallRuleStatus::GetClassData() const { return &_class_data_; }

void FirewallRuleStatus::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<FirewallRuleStatus *>(to)->MergeFrom(
      static_cast<const FirewallRuleStatus &>(from));
}


void FirewallRuleStatus::MergeFrom(const FirewallRuleStatus& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.FirewallRuleStatus)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_commonstatus()) {
    _internal_mutable_commonstatus()->::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::CommonStatus::MergeFrom(from._internal_commonstatus());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FirewallRuleStatus::CopyFrom(const FirewallRuleStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.FirewallRuleStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FirewallRuleStatus::IsInitialized() const {
  return true;
}

void FirewallRuleStatus::InternalSwap(FirewallRuleStatus* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(commonstatus_, other->commonstatus_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FirewallRuleStatus::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_ssd_2dgit_2ejuniper_2enet_2fcontrail_2fcn2_2fcontrail_2fpkg_2fapis_2fcore_2fv1alpha1_2fgenerated_2eproto_getter, &descriptor_table_ssd_2dgit_2ejuniper_2enet_2fcontrail_2fcn2_2fcontrail_2fpkg_2fapis_2fcore_2fv1alpha1_2fgenerated_2eproto_once,
      file_level_metadata_ssd_2dgit_2ejuniper_2enet_2fcontrail_2fcn2_2fcontrail_2fpkg_2fapis_2fcore_2fv1alpha1_2fgenerated_2eproto[48]);
}

// ===================================================================

class FirewallServiceType::_Internal {
 public:
  using HasBits = decltype(std::declval<FirewallServiceType>()._has_bits_);
  static void set_has_protocol(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_protocolid(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::PortType& sourceports(const FirewallServiceType* msg);
  static void set_has_sourceports(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::PortType& destinationports(const FirewallServiceType* msg);
  static void set_has_destinationports(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::PortType&
FirewallServiceType::_Internal::sourceports(const FirewallServiceType* msg) {
  return *msg->sourceports_;
}
const ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::PortType&
FirewallServiceType::_Internal::destinationports(const FirewallServiceType* msg) {
  return *msg->destinationports_;
}
FirewallServiceType::FirewallServiceType(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.FirewallServiceType)
}
FirewallServiceType::FirewallServiceType(const FirewallServiceType& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  protocol_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_protocol()) {
    protocol_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_protocol(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_sourceports()) {
    sourceports_ = new ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::PortType(*from.sourceports_);
  } else {
    sourceports_ = nullptr;
  }
  if (from._internal_has_destinationports()) {
    destinationports_ = new ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::PortType(*from.destinationports_);
  } else {
    destinationports_ = nullptr;
  }
  protocolid_ = from.protocolid_;
  // @@protoc_insertion_point(copy_constructor:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.FirewallServiceType)
}

inline void FirewallServiceType::SharedCtor() {
protocol_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&sourceports_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&protocolid_) -
    reinterpret_cast<char*>(&sourceports_)) + sizeof(protocolid_));
}

FirewallServiceType::~FirewallServiceType() {
  // @@protoc_insertion_point(destructor:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.FirewallServiceType)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void FirewallServiceType::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  protocol_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete sourceports_;
  if (this != internal_default_instance()) delete destinationports_;
}

void FirewallServiceType::ArenaDtor(void* object) {
  FirewallServiceType* _this = reinterpret_cast< FirewallServiceType* >(object);
  (void)_this;
}
void FirewallServiceType::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FirewallServiceType::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void FirewallServiceType::Clear() {
// @@protoc_insertion_point(message_clear_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.FirewallServiceType)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      protocol_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(sourceports_ != nullptr);
      sourceports_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(destinationports_ != nullptr);
      destinationports_->Clear();
    }
  }
  protocolid_ = int64_t{0};
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FirewallServiceType::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string protocol = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_protocol();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.FirewallServiceType.protocol");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 protocolId = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_protocolid(&has_bits);
          protocolid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.PortType sourcePorts = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_sourceports(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.PortType destinationPorts = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_destinationports(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FirewallServiceType::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.FirewallServiceType)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string protocol = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_protocol().data(), static_cast<int>(this->_internal_protocol().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.FirewallServiceType.protocol");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_protocol(), target);
  }

  // optional int64 protocolId = 2;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_protocolid(), target);
  }

  // optional .ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.PortType sourcePorts = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::sourceports(this), target, stream);
  }

  // optional .ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.PortType destinationPorts = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::destinationports(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.FirewallServiceType)
  return target;
}

size_t FirewallServiceType::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.FirewallServiceType)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string protocol = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_protocol());
    }

    // optional .ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.PortType sourcePorts = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *sourceports_);
    }

    // optional .ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.PortType destinationPorts = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *destinationports_);
    }

    // optional int64 protocolId = 2;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->_internal_protocolid());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FirewallServiceType::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    FirewallServiceType::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FirewallServiceType::GetClassData() const { return &_class_data_; }

void FirewallServiceType::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<FirewallServiceType *>(to)->MergeFrom(
      static_cast<const FirewallServiceType &>(from));
}


void FirewallServiceType::MergeFrom(const FirewallServiceType& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.FirewallServiceType)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_protocol(from._internal_protocol());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_sourceports()->::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::PortType::MergeFrom(from._internal_sourceports());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_destinationports()->::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::PortType::MergeFrom(from._internal_destinationports());
    }
    if (cached_has_bits & 0x00000008u) {
      protocolid_ = from.protocolid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FirewallServiceType::CopyFrom(const FirewallServiceType& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.FirewallServiceType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FirewallServiceType::IsInitialized() const {
  return true;
}

void FirewallServiceType::InternalSwap(FirewallServiceType* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &protocol_, GetArenaForAllocation(),
      &other->protocol_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FirewallServiceType, protocolid_)
      + sizeof(FirewallServiceType::protocolid_)
      - PROTOBUF_FIELD_OFFSET(FirewallServiceType, sourceports_)>(
          reinterpret_cast<char*>(&sourceports_),
          reinterpret_cast<char*>(&other->sourceports_));
}

::PROTOBUF_NAMESPACE_ID::Metadata FirewallServiceType::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_ssd_2dgit_2ejuniper_2enet_2fcontrail_2fcn2_2fcontrail_2fpkg_2fapis_2fcore_2fv1alpha1_2fgenerated_2eproto_getter, &descriptor_table_ssd_2dgit_2ejuniper_2enet_2fcontrail_2fcn2_2fcontrail_2fpkg_2fapis_2fcore_2fv1alpha1_2fgenerated_2eproto_once,
      file_level_metadata_ssd_2dgit_2ejuniper_2enet_2fcontrail_2fcn2_2fcontrail_2fpkg_2fapis_2fcore_2fv1alpha1_2fgenerated_2eproto[49]);
}

// ===================================================================

class FirewallSubnet::_Internal {
 public:
  using HasBits = decltype(std::declval<FirewallSubnet>()._has_bits_);
  static void set_has_ipprefix(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::k8s::io::apimachinery::pkg::util::intstr::IntOrString& ipprefixlen(const FirewallSubnet* msg);
  static void set_has_ipprefixlen(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::k8s::io::apimachinery::pkg::util::intstr::IntOrString&
FirewallSubnet::_Internal::ipprefixlen(const FirewallSubnet* msg) {
  return *msg->ipprefixlen_;
}
void FirewallSubnet::clear_ipprefixlen() {
  if (ipprefixlen_ != nullptr) ipprefixlen_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
FirewallSubnet::FirewallSubnet(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.FirewallSubnet)
}
FirewallSubnet::FirewallSubnet(const FirewallSubnet& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ipprefix_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_ipprefix()) {
    ipprefix_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_ipprefix(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_ipprefixlen()) {
    ipprefixlen_ = new ::k8s::io::apimachinery::pkg::util::intstr::IntOrString(*from.ipprefixlen_);
  } else {
    ipprefixlen_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.FirewallSubnet)
}

inline void FirewallSubnet::SharedCtor() {
ipprefix_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
ipprefixlen_ = nullptr;
}

FirewallSubnet::~FirewallSubnet() {
  // @@protoc_insertion_point(destructor:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.FirewallSubnet)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void FirewallSubnet::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  ipprefix_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete ipprefixlen_;
}

void FirewallSubnet::ArenaDtor(void* object) {
  FirewallSubnet* _this = reinterpret_cast< FirewallSubnet* >(object);
  (void)_this;
}
void FirewallSubnet::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FirewallSubnet::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void FirewallSubnet::Clear() {
// @@protoc_insertion_point(message_clear_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.FirewallSubnet)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ipprefix_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(ipprefixlen_ != nullptr);
      ipprefixlen_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FirewallSubnet::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string ipPrefix = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_ipprefix();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.FirewallSubnet.ipPrefix");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .k8s.io.apimachinery.pkg.util.intstr.IntOrString ipPrefixLen = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_ipprefixlen(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FirewallSubnet::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.FirewallSubnet)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string ipPrefix = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_ipprefix().data(), static_cast<int>(this->_internal_ipprefix().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.FirewallSubnet.ipPrefix");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_ipprefix(), target);
  }

  // optional .k8s.io.apimachinery.pkg.util.intstr.IntOrString ipPrefixLen = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::ipprefixlen(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.FirewallSubnet)
  return target;
}

size_t FirewallSubnet::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.FirewallSubnet)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string ipPrefix = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_ipprefix());
    }

    // optional .k8s.io.apimachinery.pkg.util.intstr.IntOrString ipPrefixLen = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *ipprefixlen_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FirewallSubnet::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    FirewallSubnet::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FirewallSubnet::GetClassData() const { return &_class_data_; }

void FirewallSubnet::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<FirewallSubnet *>(to)->MergeFrom(
      static_cast<const FirewallSubnet &>(from));
}


void FirewallSubnet::MergeFrom(const FirewallSubnet& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.FirewallSubnet)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_ipprefix(from._internal_ipprefix());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_ipprefixlen()->::k8s::io::apimachinery::pkg::util::intstr::IntOrString::MergeFrom(from._internal_ipprefixlen());
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FirewallSubnet::CopyFrom(const FirewallSubnet& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.FirewallSubnet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FirewallSubnet::IsInitialized() const {
  return true;
}

void FirewallSubnet::InternalSwap(FirewallSubnet* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &ipprefix_, GetArenaForAllocation(),
      &other->ipprefix_, other->GetArenaForAllocation()
  );
  swap(ipprefixlen_, other->ipprefixlen_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FirewallSubnet::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_ssd_2dgit_2ejuniper_2enet_2fcontrail_2fcn2_2fcontrail_2fpkg_2fapis_2fcore_2fv1alpha1_2fgenerated_2eproto_getter, &descriptor_table_ssd_2dgit_2ejuniper_2enet_2fcontrail_2fcn2_2fcontrail_2fpkg_2fapis_2fcore_2fv1alpha1_2fgenerated_2eproto_once,
      file_level_metadata_ssd_2dgit_2ejuniper_2enet_2fcontrail_2fcn2_2fcontrail_2fpkg_2fapis_2fcore_2fv1alpha1_2fgenerated_2eproto[50]);
}

// ===================================================================

class FloatingIP::_Internal {
 public:
  using HasBits = decltype(std::declval<FloatingIP>()._has_bits_);
  static const ::k8s::io::apimachinery::pkg::apis::meta::v1::ObjectMeta& metadata(const FloatingIP* msg);
  static void set_has_metadata(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::FloatingIPSpec& spec(const FloatingIP* msg);
  static void set_has_spec(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::FloatingIPStatus& status(const FloatingIP* msg);
  static void set_has_status(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::k8s::io::apimachinery::pkg::apis::meta::v1::ObjectMeta&
FloatingIP::_Internal::metadata(const FloatingIP* msg) {
  return *msg->metadata_;
}
const ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::FloatingIPSpec&
FloatingIP::_Internal::spec(const FloatingIP* msg) {
  return *msg->spec_;
}
const ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::FloatingIPStatus&
FloatingIP::_Internal::status(const FloatingIP* msg) {
  return *msg->status_;
}
void FloatingIP::clear_metadata() {
  if (metadata_ != nullptr) metadata_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
FloatingIP::FloatingIP(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.FloatingIP)
}
FloatingIP::FloatingIP(const FloatingIP& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_metadata()) {
    metadata_ = new ::k8s::io::apimachinery::pkg::apis::meta::v1::ObjectMeta(*from.metadata_);
  } else {
    metadata_ = nullptr;
  }
  if (from._internal_has_spec()) {
    spec_ = new ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::FloatingIPSpec(*from.spec_);
  } else {
    spec_ = nullptr;
  }
  if (from._internal_has_status()) {
    status_ = new ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::FloatingIPStatus(*from.status_);
  } else {
    status_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.FloatingIP)
}

inline void FloatingIP::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&metadata_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&status_) -
    reinterpret_cast<char*>(&metadata_)) + sizeof(status_));
}

FloatingIP::~FloatingIP() {
  // @@protoc_insertion_point(destructor:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.FloatingIP)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void FloatingIP::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete metadata_;
  if (this != internal_default_instance()) delete spec_;
  if (this != internal_default_instance()) delete status_;
}

void FloatingIP::ArenaDtor(void* object) {
  FloatingIP* _this = reinterpret_cast< FloatingIP* >(object);
  (void)_this;
}
void FloatingIP::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FloatingIP::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void FloatingIP::Clear() {
// @@protoc_insertion_point(message_clear_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.FloatingIP)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(metadata_ != nullptr);
      metadata_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(spec_ != nullptr);
      spec_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(status_ != nullptr);
      status_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FloatingIP::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_metadata(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.FloatingIPSpec spec = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_spec(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.FloatingIPStatus status = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FloatingIP::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.FloatingIP)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::metadata(this), target, stream);
  }

  // optional .ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.FloatingIPSpec spec = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::spec(this), target, stream);
  }

  // optional .ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.FloatingIPStatus status = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::status(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.FloatingIP)
  return target;
}

size_t FloatingIP::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.FloatingIP)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *metadata_);
    }

    // optional .ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.FloatingIPSpec spec = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *spec_);
    }

    // optional .ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.FloatingIPStatus status = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *status_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FloatingIP::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    FloatingIP::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FloatingIP::GetClassData() const { return &_class_data_; }

void FloatingIP::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<FloatingIP *>(to)->MergeFrom(
      static_cast<const FloatingIP &>(from));
}


void FloatingIP::MergeFrom(const FloatingIP& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.FloatingIP)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_metadata()->::k8s::io::apimachinery::pkg::apis::meta::v1::ObjectMeta::MergeFrom(from._internal_metadata());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_spec()->::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::FloatingIPSpec::MergeFrom(from._internal_spec());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_status()->::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::FloatingIPStatus::MergeFrom(from._internal_status());
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FloatingIP::CopyFrom(const FloatingIP& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.FloatingIP)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FloatingIP::IsInitialized() const {
  return true;
}

void FloatingIP::InternalSwap(FloatingIP* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FloatingIP, status_)
      + sizeof(FloatingIP::status_)
      - PROTOBUF_FIELD_OFFSET(FloatingIP, metadata_)>(
          reinterpret_cast<char*>(&metadata_),
          reinterpret_cast<char*>(&other->metadata_));
}

::PROTOBUF_NAMESPACE_ID::Metadata FloatingIP::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_ssd_2dgit_2ejuniper_2enet_2fcontrail_2fcn2_2fcontrail_2fpkg_2fapis_2fcore_2fv1alpha1_2fgenerated_2eproto_getter, &descriptor_table_ssd_2dgit_2ejuniper_2enet_2fcontrail_2fcn2_2fcontrail_2fpkg_2fapis_2fcore_2fv1alpha1_2fgenerated_2eproto_once,
      file_level_metadata_ssd_2dgit_2ejuniper_2enet_2fcontrail_2fcn2_2fcontrail_2fpkg_2fapis_2fcore_2fv1alpha1_2fgenerated_2eproto[51]);
}

// ===================================================================

class FloatingIPList::_Internal {
 public:
  using HasBits = decltype(std::declval<FloatingIPList>()._has_bits_);
  static const ::k8s::io::apimachinery::pkg::apis::meta::v1::ListMeta& metadata(const FloatingIPList* msg);
  static void set_has_metadata(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::k8s::io::apimachinery::pkg::apis::meta::v1::ListMeta&
FloatingIPList::_Internal::metadata(const FloatingIPList* msg) {
  return *msg->metadata_;
}
void FloatingIPList::clear_metadata() {
  if (metadata_ != nullptr) metadata_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
FloatingIPList::FloatingIPList(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  items_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.FloatingIPList)
}
FloatingIPList::FloatingIPList(const FloatingIPList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      items_(from.items_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_metadata()) {
    metadata_ = new ::k8s::io::apimachinery::pkg::apis::meta::v1::ListMeta(*from.metadata_);
  } else {
    metadata_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.FloatingIPList)
}

inline void FloatingIPList::SharedCtor() {
metadata_ = nullptr;
}

FloatingIPList::~FloatingIPList() {
  // @@protoc_insertion_point(destructor:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.FloatingIPList)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void FloatingIPList::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete metadata_;
}

void FloatingIPList::ArenaDtor(void* object) {
  FloatingIPList* _this = reinterpret_cast< FloatingIPList* >(object);
  (void)_this;
}
void FloatingIPList::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FloatingIPList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void FloatingIPList::Clear() {
// @@protoc_insertion_point(message_clear_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.FloatingIPList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  items_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(metadata_ != nullptr);
    metadata_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FloatingIPList::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_metadata(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.FloatingIP items = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_items(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FloatingIPList::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.FloatingIPList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::metadata(this), target, stream);
  }

  // repeated .ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.FloatingIP items = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_items_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_items(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.FloatingIPList)
  return target;
}

size_t FloatingIPList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.FloatingIPList)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.FloatingIP items = 2;
  total_size += 1UL * this->_internal_items_size();
  for (const auto& msg : this->items_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional .k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *metadata_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FloatingIPList::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    FloatingIPList::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FloatingIPList::GetClassData() const { return &_class_data_; }

void FloatingIPList::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<FloatingIPList *>(to)->MergeFrom(
      static_cast<const FloatingIPList &>(from));
}


void FloatingIPList::MergeFrom(const FloatingIPList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.FloatingIPList)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  items_.MergeFrom(from.items_);
  if (from._internal_has_metadata()) {
    _internal_mutable_metadata()->::k8s::io::apimachinery::pkg::apis::meta::v1::ListMeta::MergeFrom(from._internal_metadata());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FloatingIPList::CopyFrom(const FloatingIPList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.FloatingIPList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FloatingIPList::IsInitialized() const {
  return true;
}

void FloatingIPList::InternalSwap(FloatingIPList* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  items_.InternalSwap(&other->items_);
  swap(metadata_, other->metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FloatingIPList::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_ssd_2dgit_2ejuniper_2enet_2fcontrail_2fcn2_2fcontrail_2fpkg_2fapis_2fcore_2fv1alpha1_2fgenerated_2eproto_getter, &descriptor_table_ssd_2dgit_2ejuniper_2enet_2fcontrail_2fcn2_2fcontrail_2fpkg_2fapis_2fcore_2fv1alpha1_2fgenerated_2eproto_once,
      file_level_metadata_ssd_2dgit_2ejuniper_2enet_2fcontrail_2fcn2_2fcontrail_2fpkg_2fapis_2fcore_2fv1alpha1_2fgenerated_2eproto[52]);
}

// ===================================================================

class FloatingIPPortMappings::_Internal {
 public:
};

FloatingIPPortMappings::FloatingIPPortMappings(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  portmappings_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.FloatingIPPortMappings)
}
FloatingIPPortMappings::FloatingIPPortMappings(const FloatingIPPortMappings& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      portmappings_(from.portmappings_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.FloatingIPPortMappings)
}

inline void FloatingIPPortMappings::SharedCtor() {
}

FloatingIPPortMappings::~FloatingIPPortMappings() {
  // @@protoc_insertion_point(destructor:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.FloatingIPPortMappings)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void FloatingIPPortMappings::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void FloatingIPPortMappings::ArenaDtor(void* object) {
  FloatingIPPortMappings* _this = reinterpret_cast< FloatingIPPortMappings* >(object);
  (void)_this;
}
void FloatingIPPortMappings::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FloatingIPPortMappings::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void FloatingIPPortMappings::Clear() {
// @@protoc_insertion_point(message_clear_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.FloatingIPPortMappings)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  portmappings_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FloatingIPPortMappings::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.FloatingIPPortPortMapping portMappings = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_portmappings(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FloatingIPPortMappings::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.FloatingIPPortMappings)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.FloatingIPPortPortMapping portMappings = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_portmappings_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_portmappings(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.FloatingIPPortMappings)
  return target;
}

size_t FloatingIPPortMappings::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.FloatingIPPortMappings)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.FloatingIPPortPortMapping portMappings = 1;
  total_size += 1UL * this->_internal_portmappings_size();
  for (const auto& msg : this->portmappings_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FloatingIPPortMappings::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    FloatingIPPortMappings::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FloatingIPPortMappings::GetClassData() const { return &_class_data_; }

void FloatingIPPortMappings::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<FloatingIPPortMappings *>(to)->MergeFrom(
      static_cast<const FloatingIPPortMappings &>(from));
}


void FloatingIPPortMappings::MergeFrom(const FloatingIPPortMappings& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.FloatingIPPortMappings)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  portmappings_.MergeFrom(from.portmappings_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FloatingIPPortMappings::CopyFrom(const FloatingIPPortMappings& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.FloatingIPPortMappings)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FloatingIPPortMappings::IsInitialized() const {
  return true;
}

void FloatingIPPortMappings::InternalSwap(FloatingIPPortMappings* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  portmappings_.InternalSwap(&other->portmappings_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FloatingIPPortMappings::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_ssd_2dgit_2ejuniper_2enet_2fcontrail_2fcn2_2fcontrail_2fpkg_2fapis_2fcore_2fv1alpha1_2fgenerated_2eproto_getter, &descriptor_table_ssd_2dgit_2ejuniper_2enet_2fcontrail_2fcn2_2fcontrail_2fpkg_2fapis_2fcore_2fv1alpha1_2fgenerated_2eproto_once,
      file_level_metadata_ssd_2dgit_2ejuniper_2enet_2fcontrail_2fcn2_2fcontrail_2fpkg_2fapis_2fcore_2fv1alpha1_2fgenerated_2eproto[53]);
}

// ===================================================================

class FloatingIPPortPortMapping::_Internal {
 public:
  using HasBits = decltype(std::declval<FloatingIPPortPortMapping>()._has_bits_);
  static void set_has_srcport(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_dstport(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_protocol(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

FloatingIPPortPortMapping::FloatingIPPortPortMapping(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.FloatingIPPortPortMapping)
}
FloatingIPPortPortMapping::FloatingIPPortPortMapping(const FloatingIPPortPortMapping& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  protocol_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_protocol()) {
    protocol_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_protocol(), 
      GetArenaForAllocation());
  }
  ::memcpy(&srcport_, &from.srcport_,
    static_cast<size_t>(reinterpret_cast<char*>(&dstport_) -
    reinterpret_cast<char*>(&srcport_)) + sizeof(dstport_));
  // @@protoc_insertion_point(copy_constructor:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.FloatingIPPortPortMapping)
}

inline void FloatingIPPortPortMapping::SharedCtor() {
protocol_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&srcport_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&dstport_) -
    reinterpret_cast<char*>(&srcport_)) + sizeof(dstport_));
}

FloatingIPPortPortMapping::~FloatingIPPortPortMapping() {
  // @@protoc_insertion_point(destructor:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.FloatingIPPortPortMapping)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void FloatingIPPortPortMapping::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  protocol_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void FloatingIPPortPortMapping::ArenaDtor(void* object) {
  FloatingIPPortPortMapping* _this = reinterpret_cast< FloatingIPPortPortMapping* >(object);
  (void)_this;
}
void FloatingIPPortPortMapping::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FloatingIPPortPortMapping::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void FloatingIPPortPortMapping::Clear() {
// @@protoc_insertion_point(message_clear_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.FloatingIPPortPortMapping)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    protocol_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&srcport_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&dstport_) -
        reinterpret_cast<char*>(&srcport_)) + sizeof(dstport_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FloatingIPPortPortMapping::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 srcPort = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_srcport(&has_bits);
          srcport_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 dstPort = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_dstport(&has_bits);
          dstport_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string protocol = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_protocol();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.FloatingIPPortPortMapping.protocol");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FloatingIPPortPortMapping::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.FloatingIPPortPortMapping)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 srcPort = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_srcport(), target);
  }

  // optional int32 dstPort = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_dstport(), target);
  }

  // optional string protocol = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_protocol().data(), static_cast<int>(this->_internal_protocol().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.FloatingIPPortPortMapping.protocol");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_protocol(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.FloatingIPPortPortMapping)
  return target;
}

size_t FloatingIPPortPortMapping::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.FloatingIPPortPortMapping)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string protocol = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_protocol());
    }

    // optional int32 srcPort = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_srcport());
    }

    // optional int32 dstPort = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_dstport());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FloatingIPPortPortMapping::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    FloatingIPPortPortMapping::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FloatingIPPortPortMapping::GetClassData() const { return &_class_data_; }

void FloatingIPPortPortMapping::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<FloatingIPPortPortMapping *>(to)->MergeFrom(
      static_cast<const FloatingIPPortPortMapping &>(from));
}


void FloatingIPPortPortMapping::MergeFrom(const FloatingIPPortPortMapping& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.FloatingIPPortPortMapping)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_protocol(from._internal_protocol());
    }
    if (cached_has_bits & 0x00000002u) {
      srcport_ = from.srcport_;
    }
    if (cached_has_bits & 0x00000004u) {
      dstport_ = from.dstport_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FloatingIPPortPortMapping::CopyFrom(const FloatingIPPortPortMapping& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.FloatingIPPortPortMapping)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FloatingIPPortPortMapping::IsInitialized() const {
  return true;
}

void FloatingIPPortPortMapping::InternalSwap(FloatingIPPortPortMapping* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &protocol_, GetArenaForAllocation(),
      &other->protocol_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FloatingIPPortPortMapping, dstport_)
      + sizeof(FloatingIPPortPortMapping::dstport_)
      - PROTOBUF_FIELD_OFFSET(FloatingIPPortPortMapping, srcport_)>(
          reinterpret_cast<char*>(&srcport_),
          reinterpret_cast<char*>(&other->srcport_));
}

::PROTOBUF_NAMESPACE_ID::Metadata FloatingIPPortPortMapping::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_ssd_2dgit_2ejuniper_2enet_2fcontrail_2fcn2_2fcontrail_2fpkg_2fapis_2fcore_2fv1alpha1_2fgenerated_2eproto_getter, &descriptor_table_ssd_2dgit_2ejuniper_2enet_2fcontrail_2fcn2_2fcontrail_2fpkg_2fapis_2fcore_2fv1alpha1_2fgenerated_2eproto_once,
      file_level_metadata_ssd_2dgit_2ejuniper_2enet_2fcontrail_2fcn2_2fcontrail_2fpkg_2fapis_2fcore_2fv1alpha1_2fgenerated_2eproto[54]);
}

// ===================================================================

class FloatingIPSpec::_Internal {
 public:
  using HasBits = decltype(std::declval<FloatingIPSpec>()._has_bits_);
  static const ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::CommonSpec& commonspec(const FloatingIPSpec* msg);
  static void set_has_commonspec(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_floatingipaddress(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::FloatingIPPortMappings& floatingipportmappings(const FloatingIPSpec* msg);
  static void set_has_floatingipportmappings(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_floatingiptrafficdirection(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::k8s::io::api::core::v1::ObjectReference& parent(const FloatingIPSpec* msg);
  static void set_has_parent(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_floatingipportmappingsenable(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
};

const ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::CommonSpec&
FloatingIPSpec::_Internal::commonspec(const FloatingIPSpec* msg) {
  return *msg->commonspec_;
}
const ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::FloatingIPPortMappings&
FloatingIPSpec::_Internal::floatingipportmappings(const FloatingIPSpec* msg) {
  return *msg->floatingipportmappings_;
}
const ::k8s::io::api::core::v1::ObjectReference&
FloatingIPSpec::_Internal::parent(const FloatingIPSpec* msg) {
  return *msg->parent_;
}
void FloatingIPSpec::clear_parent() {
  if (parent_ != nullptr) parent_->Clear();
  _has_bits_[0] &= ~0x00000010u;
}
FloatingIPSpec::FloatingIPSpec(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  virtualmachineinterfacereferences_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.FloatingIPSpec)
}
FloatingIPSpec::FloatingIPSpec(const FloatingIPSpec& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      virtualmachineinterfacereferences_(from.virtualmachineinterfacereferences_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  floatingipaddress_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_floatingipaddress()) {
    floatingipaddress_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_floatingipaddress(), 
      GetArenaForAllocation());
  }
  floatingiptrafficdirection_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_floatingiptrafficdirection()) {
    floatingiptrafficdirection_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_floatingiptrafficdirection(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_commonspec()) {
    commonspec_ = new ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::CommonSpec(*from.commonspec_);
  } else {
    commonspec_ = nullptr;
  }
  if (from._internal_has_floatingipportmappings()) {
    floatingipportmappings_ = new ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::FloatingIPPortMappings(*from.floatingipportmappings_);
  } else {
    floatingipportmappings_ = nullptr;
  }
  if (from._internal_has_parent()) {
    parent_ = new ::k8s::io::api::core::v1::ObjectReference(*from.parent_);
  } else {
    parent_ = nullptr;
  }
  floatingipportmappingsenable_ = from.floatingipportmappingsenable_;
  // @@protoc_insertion_point(copy_constructor:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.FloatingIPSpec)
}

inline void FloatingIPSpec::SharedCtor() {
floatingipaddress_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
floatingiptrafficdirection_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&commonspec_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&floatingipportmappingsenable_) -
    reinterpret_cast<char*>(&commonspec_)) + sizeof(floatingipportmappingsenable_));
}

FloatingIPSpec::~FloatingIPSpec() {
  // @@protoc_insertion_point(destructor:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.FloatingIPSpec)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void FloatingIPSpec::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  floatingipaddress_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  floatingiptrafficdirection_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete commonspec_;
  if (this != internal_default_instance()) delete floatingipportmappings_;
  if (this != internal_default_instance()) delete parent_;
}

void FloatingIPSpec::ArenaDtor(void* object) {
  FloatingIPSpec* _this = reinterpret_cast< FloatingIPSpec* >(object);
  (void)_this;
}
void FloatingIPSpec::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FloatingIPSpec::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void FloatingIPSpec::Clear() {
// @@protoc_insertion_point(message_clear_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.FloatingIPSpec)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  virtualmachineinterfacereferences_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      floatingipaddress_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      floatingiptrafficdirection_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(commonspec_ != nullptr);
      commonspec_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(floatingipportmappings_ != nullptr);
      floatingipportmappings_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(parent_ != nullptr);
      parent_->Clear();
    }
  }
  floatingipportmappingsenable_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FloatingIPSpec::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.CommonSpec commonSpec = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_commonspec(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string floatingIPAddress = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_floatingipaddress();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.FloatingIPSpec.floatingIPAddress");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.FloatingIPPortMappings floatingIPPortMappings = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_floatingipportmappings(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string floatingIPTrafficDirection = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_floatingiptrafficdirection();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.FloatingIPSpec.floatingIPTrafficDirection");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .k8s.io.api.core.v1.ObjectReference parent = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_parent(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.ResourceReference virtualMachineInterfaceReferences = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_virtualmachineinterfacereferences(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else goto handle_unusual;
        continue;
      // optional bool floatingIPPortMappingsEnable = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_floatingipportmappingsenable(&has_bits);
          floatingipportmappingsenable_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FloatingIPSpec::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.FloatingIPSpec)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.CommonSpec commonSpec = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::commonspec(this), target, stream);
  }

  // optional string floatingIPAddress = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_floatingipaddress().data(), static_cast<int>(this->_internal_floatingipaddress().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.FloatingIPSpec.floatingIPAddress");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_floatingipaddress(), target);
  }

  // optional .ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.FloatingIPPortMappings floatingIPPortMappings = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::floatingipportmappings(this), target, stream);
  }

  // optional string floatingIPTrafficDirection = 4;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_floatingiptrafficdirection().data(), static_cast<int>(this->_internal_floatingiptrafficdirection().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.FloatingIPSpec.floatingIPTrafficDirection");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_floatingiptrafficdirection(), target);
  }

  // optional .k8s.io.api.core.v1.ObjectReference parent = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::parent(this), target, stream);
  }

  // repeated .ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.ResourceReference virtualMachineInterfaceReferences = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_virtualmachineinterfacereferences_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, this->_internal_virtualmachineinterfacereferences(i), target, stream);
  }

  // optional bool floatingIPPortMappingsEnable = 8;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(8, this->_internal_floatingipportmappingsenable(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.FloatingIPSpec)
  return target;
}

size_t FloatingIPSpec::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.FloatingIPSpec)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.ResourceReference virtualMachineInterfaceReferences = 7;
  total_size += 1UL * this->_internal_virtualmachineinterfacereferences_size();
  for (const auto& msg : this->virtualmachineinterfacereferences_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional string floatingIPAddress = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_floatingipaddress());
    }

    // optional string floatingIPTrafficDirection = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_floatingiptrafficdirection());
    }

    // optional .ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.CommonSpec commonSpec = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *commonspec_);
    }

    // optional .ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.FloatingIPPortMappings floatingIPPortMappings = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *floatingipportmappings_);
    }

    // optional .k8s.io.api.core.v1.ObjectReference parent = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *parent_);
    }

    // optional bool floatingIPPortMappingsEnable = 8;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FloatingIPSpec::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    FloatingIPSpec::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FloatingIPSpec::GetClassData() const { return &_class_data_; }

void FloatingIPSpec::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<FloatingIPSpec *>(to)->MergeFrom(
      static_cast<const FloatingIPSpec &>(from));
}


void FloatingIPSpec::MergeFrom(const FloatingIPSpec& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.FloatingIPSpec)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  virtualmachineinterfacereferences_.MergeFrom(from.virtualmachineinterfacereferences_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_floatingipaddress(from._internal_floatingipaddress());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_floatingiptrafficdirection(from._internal_floatingiptrafficdirection());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_commonspec()->::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::CommonSpec::MergeFrom(from._internal_commonspec());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_floatingipportmappings()->::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::FloatingIPPortMappings::MergeFrom(from._internal_floatingipportmappings());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_mutable_parent()->::k8s::io::api::core::v1::ObjectReference::MergeFrom(from._internal_parent());
    }
    if (cached_has_bits & 0x00000020u) {
      floatingipportmappingsenable_ = from.floatingipportmappingsenable_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FloatingIPSpec::CopyFrom(const FloatingIPSpec& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.FloatingIPSpec)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FloatingIPSpec::IsInitialized() const {
  return true;
}

void FloatingIPSpec::InternalSwap(FloatingIPSpec* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  virtualmachineinterfacereferences_.InternalSwap(&other->virtualmachineinterfacereferences_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &floatingipaddress_, GetArenaForAllocation(),
      &other->floatingipaddress_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &floatingiptrafficdirection_, GetArenaForAllocation(),
      &other->floatingiptrafficdirection_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FloatingIPSpec, floatingipportmappingsenable_)
      + sizeof(FloatingIPSpec::floatingipportmappingsenable_)
      - PROTOBUF_FIELD_OFFSET(FloatingIPSpec, commonspec_)>(
          reinterpret_cast<char*>(&commonspec_),
          reinterpret_cast<char*>(&other->commonspec_));
}

::PROTOBUF_NAMESPACE_ID::Metadata FloatingIPSpec::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_ssd_2dgit_2ejuniper_2enet_2fcontrail_2fcn2_2fcontrail_2fpkg_2fapis_2fcore_2fv1alpha1_2fgenerated_2eproto_getter, &descriptor_table_ssd_2dgit_2ejuniper_2enet_2fcontrail_2fcn2_2fcontrail_2fpkg_2fapis_2fcore_2fv1alpha1_2fgenerated_2eproto_once,
      file_level_metadata_ssd_2dgit_2ejuniper_2enet_2fcontrail_2fcn2_2fcontrail_2fpkg_2fapis_2fcore_2fv1alpha1_2fgenerated_2eproto[55]);
}

// ===================================================================

class FloatingIPStatus::_Internal {
 public:
  using HasBits = decltype(std::declval<FloatingIPStatus>()._has_bits_);
  static const ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::CommonStatus& commonstatus(const FloatingIPStatus* msg);
  static void set_has_commonstatus(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::ResourceReference& subnetreference(const FloatingIPStatus* msg);
  static void set_has_subnetreference(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::CommonStatus&
FloatingIPStatus::_Internal::commonstatus(const FloatingIPStatus* msg) {
  return *msg->commonstatus_;
}
const ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::ResourceReference&
FloatingIPStatus::_Internal::subnetreference(const FloatingIPStatus* msg) {
  return *msg->subnetreference_;
}
FloatingIPStatus::FloatingIPStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.FloatingIPStatus)
}
FloatingIPStatus::FloatingIPStatus(const FloatingIPStatus& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_commonstatus()) {
    commonstatus_ = new ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::CommonStatus(*from.commonstatus_);
  } else {
    commonstatus_ = nullptr;
  }
  if (from._internal_has_subnetreference()) {
    subnetreference_ = new ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::ResourceReference(*from.subnetreference_);
  } else {
    subnetreference_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.FloatingIPStatus)
}

inline void FloatingIPStatus::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&commonstatus_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&subnetreference_) -
    reinterpret_cast<char*>(&commonstatus_)) + sizeof(subnetreference_));
}

FloatingIPStatus::~FloatingIPStatus() {
  // @@protoc_insertion_point(destructor:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.FloatingIPStatus)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void FloatingIPStatus::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete commonstatus_;
  if (this != internal_default_instance()) delete subnetreference_;
}

void FloatingIPStatus::ArenaDtor(void* object) {
  FloatingIPStatus* _this = reinterpret_cast< FloatingIPStatus* >(object);
  (void)_this;
}
void FloatingIPStatus::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FloatingIPStatus::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void FloatingIPStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.FloatingIPStatus)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(commonstatus_ != nullptr);
      commonstatus_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(subnetreference_ != nullptr);
      subnetreference_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FloatingIPStatus::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.CommonStatus commonStatus = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_commonstatus(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.ResourceReference subnetReference = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_subnetreference(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FloatingIPStatus::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.FloatingIPStatus)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.CommonStatus commonStatus = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::commonstatus(this), target, stream);
  }

  // optional .ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.ResourceReference subnetReference = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::subnetreference(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.FloatingIPStatus)
  return target;
}

size_t FloatingIPStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.FloatingIPStatus)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.CommonStatus commonStatus = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *commonstatus_);
    }

    // optional .ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.ResourceReference subnetReference = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *subnetreference_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FloatingIPStatus::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    FloatingIPStatus::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FloatingIPStatus::GetClassData() const { return &_class_data_; }

void FloatingIPStatus::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<FloatingIPStatus *>(to)->MergeFrom(
      static_cast<const FloatingIPStatus &>(from));
}


void FloatingIPStatus::MergeFrom(const FloatingIPStatus& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.FloatingIPStatus)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_commonstatus()->::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::CommonStatus::MergeFrom(from._internal_commonstatus());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_subnetreference()->::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::ResourceReference::MergeFrom(from._internal_subnetreference());
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FloatingIPStatus::CopyFrom(const FloatingIPStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.FloatingIPStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FloatingIPStatus::IsInitialized() const {
  return true;
}

void FloatingIPStatus::InternalSwap(FloatingIPStatus* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FloatingIPStatus, subnetreference_)
      + sizeof(FloatingIPStatus::subnetreference_)
      - PROTOBUF_FIELD_OFFSET(FloatingIPStatus, commonstatus_)>(
          reinterpret_cast<char*>(&commonstatus_),
          reinterpret_cast<char*>(&other->commonstatus_));
}

::PROTOBUF_NAMESPACE_ID::Metadata FloatingIPStatus::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_ssd_2dgit_2ejuniper_2enet_2fcontrail_2fcn2_2fcontrail_2fpkg_2fapis_2fcore_2fv1alpha1_2fgenerated_2eproto_getter, &descriptor_table_ssd_2dgit_2ejuniper_2enet_2fcontrail_2fcn2_2fcontrail_2fpkg_2fapis_2fcore_2fv1alpha1_2fgenerated_2eproto_once,
      file_level_metadata_ssd_2dgit_2ejuniper_2enet_2fcontrail_2fcn2_2fcontrail_2fpkg_2fapis_2fcore_2fv1alpha1_2fgenerated_2eproto[56]);
}

// ===================================================================

class GlobalSystemConfig::_Internal {
 public:
  using HasBits = decltype(std::declval<GlobalSystemConfig>()._has_bits_);
  static const ::k8s::io::apimachinery::pkg::apis::meta::v1::ObjectMeta& metadata(const GlobalSystemConfig* msg);
  static void set_has_metadata(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::GlobalSystemConfigSpec& spec(const GlobalSystemConfig* msg);
  static void set_has_spec(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::GlobalSystemConfigStatus& status(const GlobalSystemConfig* msg);
  static void set_has_status(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::k8s::io::apimachinery::pkg::apis::meta::v1::ObjectMeta&
GlobalSystemConfig::_Internal::metadata(const GlobalSystemConfig* msg) {
  return *msg->metadata_;
}
const ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::GlobalSystemConfigSpec&
GlobalSystemConfig::_Internal::spec(const GlobalSystemConfig* msg) {
  return *msg->spec_;
}
const ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::GlobalSystemConfigStatus&
GlobalSystemConfig::_Internal::status(const GlobalSystemConfig* msg) {
  return *msg->status_;
}
void GlobalSystemConfig::clear_metadata() {
  if (metadata_ != nullptr) metadata_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
GlobalSystemConfig::GlobalSystemConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.GlobalSystemConfig)
}
GlobalSystemConfig::GlobalSystemConfig(const GlobalSystemConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_metadata()) {
    metadata_ = new ::k8s::io::apimachinery::pkg::apis::meta::v1::ObjectMeta(*from.metadata_);
  } else {
    metadata_ = nullptr;
  }
  if (from._internal_has_spec()) {
    spec_ = new ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::GlobalSystemConfigSpec(*from.spec_);
  } else {
    spec_ = nullptr;
  }
  if (from._internal_has_status()) {
    status_ = new ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::GlobalSystemConfigStatus(*from.status_);
  } else {
    status_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.GlobalSystemConfig)
}

inline void GlobalSystemConfig::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&metadata_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&status_) -
    reinterpret_cast<char*>(&metadata_)) + sizeof(status_));
}

GlobalSystemConfig::~GlobalSystemConfig() {
  // @@protoc_insertion_point(destructor:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.GlobalSystemConfig)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void GlobalSystemConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete metadata_;
  if (this != internal_default_instance()) delete spec_;
  if (this != internal_default_instance()) delete status_;
}

void GlobalSystemConfig::ArenaDtor(void* object) {
  GlobalSystemConfig* _this = reinterpret_cast< GlobalSystemConfig* >(object);
  (void)_this;
}
void GlobalSystemConfig::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GlobalSystemConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GlobalSystemConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.GlobalSystemConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(metadata_ != nullptr);
      metadata_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(spec_ != nullptr);
      spec_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(status_ != nullptr);
      status_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GlobalSystemConfig::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_metadata(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.GlobalSystemConfigSpec spec = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_spec(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.GlobalSystemConfigStatus status = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GlobalSystemConfig::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.GlobalSystemConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::metadata(this), target, stream);
  }

  // optional .ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.GlobalSystemConfigSpec spec = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::spec(this), target, stream);
  }

  // optional .ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.GlobalSystemConfigStatus status = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::status(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.GlobalSystemConfig)
  return target;
}

size_t GlobalSystemConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.GlobalSystemConfig)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *metadata_);
    }

    // optional .ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.GlobalSystemConfigSpec spec = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *spec_);
    }

    // optional .ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.GlobalSystemConfigStatus status = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *status_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GlobalSystemConfig::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GlobalSystemConfig::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GlobalSystemConfig::GetClassData() const { return &_class_data_; }

void GlobalSystemConfig::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<GlobalSystemConfig *>(to)->MergeFrom(
      static_cast<const GlobalSystemConfig &>(from));
}


void GlobalSystemConfig::MergeFrom(const GlobalSystemConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.GlobalSystemConfig)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_metadata()->::k8s::io::apimachinery::pkg::apis::meta::v1::ObjectMeta::MergeFrom(from._internal_metadata());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_spec()->::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::GlobalSystemConfigSpec::MergeFrom(from._internal_spec());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_status()->::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::GlobalSystemConfigStatus::MergeFrom(from._internal_status());
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GlobalSystemConfig::CopyFrom(const GlobalSystemConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.GlobalSystemConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GlobalSystemConfig::IsInitialized() const {
  return true;
}

void GlobalSystemConfig::InternalSwap(GlobalSystemConfig* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GlobalSystemConfig, status_)
      + sizeof(GlobalSystemConfig::status_)
      - PROTOBUF_FIELD_OFFSET(GlobalSystemConfig, metadata_)>(
          reinterpret_cast<char*>(&metadata_),
          reinterpret_cast<char*>(&other->metadata_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GlobalSystemConfig::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_ssd_2dgit_2ejuniper_2enet_2fcontrail_2fcn2_2fcontrail_2fpkg_2fapis_2fcore_2fv1alpha1_2fgenerated_2eproto_getter, &descriptor_table_ssd_2dgit_2ejuniper_2enet_2fcontrail_2fcn2_2fcontrail_2fpkg_2fapis_2fcore_2fv1alpha1_2fgenerated_2eproto_once,
      file_level_metadata_ssd_2dgit_2ejuniper_2enet_2fcontrail_2fcn2_2fcontrail_2fpkg_2fapis_2fcore_2fv1alpha1_2fgenerated_2eproto[57]);
}

// ===================================================================

class GlobalSystemConfigList::_Internal {
 public:
  using HasBits = decltype(std::declval<GlobalSystemConfigList>()._has_bits_);
  static const ::k8s::io::apimachinery::pkg::apis::meta::v1::ListMeta& metadata(const GlobalSystemConfigList* msg);
  static void set_has_metadata(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::k8s::io::apimachinery::pkg::apis::meta::v1::ListMeta&
GlobalSystemConfigList::_Internal::metadata(const GlobalSystemConfigList* msg) {
  return *msg->metadata_;
}
void GlobalSystemConfigList::clear_metadata() {
  if (metadata_ != nullptr) metadata_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
GlobalSystemConfigList::GlobalSystemConfigList(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  items_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.GlobalSystemConfigList)
}
GlobalSystemConfigList::GlobalSystemConfigList(const GlobalSystemConfigList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      items_(from.items_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_metadata()) {
    metadata_ = new ::k8s::io::apimachinery::pkg::apis::meta::v1::ListMeta(*from.metadata_);
  } else {
    metadata_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.GlobalSystemConfigList)
}

inline void GlobalSystemConfigList::SharedCtor() {
metadata_ = nullptr;
}

GlobalSystemConfigList::~GlobalSystemConfigList() {
  // @@protoc_insertion_point(destructor:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.GlobalSystemConfigList)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void GlobalSystemConfigList::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete metadata_;
}

void GlobalSystemConfigList::ArenaDtor(void* object) {
  GlobalSystemConfigList* _this = reinterpret_cast< GlobalSystemConfigList* >(object);
  (void)_this;
}
void GlobalSystemConfigList::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GlobalSystemConfigList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GlobalSystemConfigList::Clear() {
// @@protoc_insertion_point(message_clear_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.GlobalSystemConfigList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  items_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(metadata_ != nullptr);
    metadata_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GlobalSystemConfigList::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_metadata(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.GlobalSystemConfig items = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_items(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GlobalSystemConfigList::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.GlobalSystemConfigList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::metadata(this), target, stream);
  }

  // repeated .ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.GlobalSystemConfig items = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_items_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_items(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.GlobalSystemConfigList)
  return target;
}

size_t GlobalSystemConfigList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.GlobalSystemConfigList)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.GlobalSystemConfig items = 2;
  total_size += 1UL * this->_internal_items_size();
  for (const auto& msg : this->items_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional .k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *metadata_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GlobalSystemConfigList::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GlobalSystemConfigList::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GlobalSystemConfigList::GetClassData() const { return &_class_data_; }

void GlobalSystemConfigList::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<GlobalSystemConfigList *>(to)->MergeFrom(
      static_cast<const GlobalSystemConfigList &>(from));
}


void GlobalSystemConfigList::MergeFrom(const GlobalSystemConfigList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.GlobalSystemConfigList)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  items_.MergeFrom(from.items_);
  if (from._internal_has_metadata()) {
    _internal_mutable_metadata()->::k8s::io::apimachinery::pkg::apis::meta::v1::ListMeta::MergeFrom(from._internal_metadata());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GlobalSystemConfigList::CopyFrom(const GlobalSystemConfigList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.GlobalSystemConfigList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GlobalSystemConfigList::IsInitialized() const {
  return true;
}

void GlobalSystemConfigList::InternalSwap(GlobalSystemConfigList* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  items_.InternalSwap(&other->items_);
  swap(metadata_, other->metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GlobalSystemConfigList::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_ssd_2dgit_2ejuniper_2enet_2fcontrail_2fcn2_2fcontrail_2fpkg_2fapis_2fcore_2fv1alpha1_2fgenerated_2eproto_getter, &descriptor_table_ssd_2dgit_2ejuniper_2enet_2fcontrail_2fcn2_2fcontrail_2fpkg_2fapis_2fcore_2fv1alpha1_2fgenerated_2eproto_once,
      file_level_metadata_ssd_2dgit_2ejuniper_2enet_2fcontrail_2fcn2_2fcontrail_2fpkg_2fapis_2fcore_2fv1alpha1_2fgenerated_2eproto[58]);
}

// ===================================================================

class GlobalSystemConfigSpec::_Internal {
 public:
  using HasBits = decltype(std::declval<GlobalSystemConfigSpec>()._has_bits_);
  static const ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::CommonSpec& commonspec(const GlobalSystemConfigSpec* msg);
  static void set_has_commonspec(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_enable4bytesas(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_autonomoussystem(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_ibgpautomesh(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_defaultenablesnat(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

const ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::CommonSpec&
GlobalSystemConfigSpec::_Internal::commonspec(const GlobalSystemConfigSpec* msg) {
  return *msg->commonspec_;
}
GlobalSystemConfigSpec::GlobalSystemConfigSpec(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  bgprouterreferences_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.GlobalSystemConfigSpec)
}
GlobalSystemConfigSpec::GlobalSystemConfigSpec(const GlobalSystemConfigSpec& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      bgprouterreferences_(from.bgprouterreferences_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_commonspec()) {
    commonspec_ = new ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::CommonSpec(*from.commonspec_);
  } else {
    commonspec_ = nullptr;
  }
  ::memcpy(&autonomoussystem_, &from.autonomoussystem_,
    static_cast<size_t>(reinterpret_cast<char*>(&defaultenablesnat_) -
    reinterpret_cast<char*>(&autonomoussystem_)) + sizeof(defaultenablesnat_));
  // @@protoc_insertion_point(copy_constructor:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.GlobalSystemConfigSpec)
}

inline void GlobalSystemConfigSpec::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&commonspec_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&defaultenablesnat_) -
    reinterpret_cast<char*>(&commonspec_)) + sizeof(defaultenablesnat_));
}

GlobalSystemConfigSpec::~GlobalSystemConfigSpec() {
  // @@protoc_insertion_point(destructor:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.GlobalSystemConfigSpec)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void GlobalSystemConfigSpec::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete commonspec_;
}

void GlobalSystemConfigSpec::ArenaDtor(void* object) {
  GlobalSystemConfigSpec* _this = reinterpret_cast< GlobalSystemConfigSpec* >(object);
  (void)_this;
}
void GlobalSystemConfigSpec::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GlobalSystemConfigSpec::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GlobalSystemConfigSpec::Clear() {
// @@protoc_insertion_point(message_clear_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.GlobalSystemConfigSpec)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  bgprouterreferences_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(commonspec_ != nullptr);
    commonspec_->Clear();
  }
  if (cached_has_bits & 0x0000001eu) {
    ::memset(&autonomoussystem_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&defaultenablesnat_) -
        reinterpret_cast<char*>(&autonomoussystem_)) + sizeof(defaultenablesnat_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GlobalSystemConfigSpec::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.CommonSpec commonSpec = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_commonspec(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool enable4bytesAS = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_enable4bytesas(&has_bits);
          enable4bytesas_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 autonomousSystem = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_autonomoussystem(&has_bits);
          autonomoussystem_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.ResourceReference bgpRouterReferences = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_bgprouterreferences(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      // optional bool ibgpAutoMesh = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_ibgpautomesh(&has_bits);
          ibgpautomesh_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool defaultEnableSNAT = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_defaultenablesnat(&has_bits);
          defaultenablesnat_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GlobalSystemConfigSpec::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.GlobalSystemConfigSpec)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.CommonSpec commonSpec = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::commonspec(this), target, stream);
  }

  // optional bool enable4bytesAS = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_enable4bytesas(), target);
  }

  // optional int32 autonomousSystem = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_autonomoussystem(), target);
  }

  // repeated .ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.ResourceReference bgpRouterReferences = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_bgprouterreferences_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_bgprouterreferences(i), target, stream);
  }

  // optional bool ibgpAutoMesh = 5;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_ibgpautomesh(), target);
  }

  // optional bool defaultEnableSNAT = 6;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_defaultenablesnat(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.GlobalSystemConfigSpec)
  return target;
}

size_t GlobalSystemConfigSpec::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.GlobalSystemConfigSpec)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.ResourceReference bgpRouterReferences = 4;
  total_size += 1UL * this->_internal_bgprouterreferences_size();
  for (const auto& msg : this->bgprouterreferences_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional .ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.CommonSpec commonSpec = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *commonspec_);
    }

    // optional int32 autonomousSystem = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_autonomoussystem());
    }

    // optional bool enable4bytesAS = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

    // optional bool ibgpAutoMesh = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

    // optional bool defaultEnableSNAT = 6;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GlobalSystemConfigSpec::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GlobalSystemConfigSpec::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GlobalSystemConfigSpec::GetClassData() const { return &_class_data_; }

void GlobalSystemConfigSpec::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<GlobalSystemConfigSpec *>(to)->MergeFrom(
      static_cast<const GlobalSystemConfigSpec &>(from));
}


void GlobalSystemConfigSpec::MergeFrom(const GlobalSystemConfigSpec& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.GlobalSystemConfigSpec)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  bgprouterreferences_.MergeFrom(from.bgprouterreferences_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_commonspec()->::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::CommonSpec::MergeFrom(from._internal_commonspec());
    }
    if (cached_has_bits & 0x00000002u) {
      autonomoussystem_ = from.autonomoussystem_;
    }
    if (cached_has_bits & 0x00000004u) {
      enable4bytesas_ = from.enable4bytesas_;
    }
    if (cached_has_bits & 0x00000008u) {
      ibgpautomesh_ = from.ibgpautomesh_;
    }
    if (cached_has_bits & 0x00000010u) {
      defaultenablesnat_ = from.defaultenablesnat_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GlobalSystemConfigSpec::CopyFrom(const GlobalSystemConfigSpec& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.GlobalSystemConfigSpec)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GlobalSystemConfigSpec::IsInitialized() const {
  return true;
}

void GlobalSystemConfigSpec::InternalSwap(GlobalSystemConfigSpec* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  bgprouterreferences_.InternalSwap(&other->bgprouterreferences_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GlobalSystemConfigSpec, defaultenablesnat_)
      + sizeof(GlobalSystemConfigSpec::defaultenablesnat_)
      - PROTOBUF_FIELD_OFFSET(GlobalSystemConfigSpec, commonspec_)>(
          reinterpret_cast<char*>(&commonspec_),
          reinterpret_cast<char*>(&other->commonspec_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GlobalSystemConfigSpec::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_ssd_2dgit_2ejuniper_2enet_2fcontrail_2fcn2_2fcontrail_2fpkg_2fapis_2fcore_2fv1alpha1_2fgenerated_2eproto_getter, &descriptor_table_ssd_2dgit_2ejuniper_2enet_2fcontrail_2fcn2_2fcontrail_2fpkg_2fapis_2fcore_2fv1alpha1_2fgenerated_2eproto_once,
      file_level_metadata_ssd_2dgit_2ejuniper_2enet_2fcontrail_2fcn2_2fcontrail_2fpkg_2fapis_2fcore_2fv1alpha1_2fgenerated_2eproto[59]);
}

// ===================================================================

class GlobalSystemConfigStatus::_Internal {
 public:
  using HasBits = decltype(std::declval<GlobalSystemConfigStatus>()._has_bits_);
  static const ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::CommonStatus& commonstatus(const GlobalSystemConfigStatus* msg);
  static void set_has_commonstatus(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::CommonStatus&
GlobalSystemConfigStatus::_Internal::commonstatus(const GlobalSystemConfigStatus* msg) {
  return *msg->commonstatus_;
}
GlobalSystemConfigStatus::GlobalSystemConfigStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.GlobalSystemConfigStatus)
}
GlobalSystemConfigStatus::GlobalSystemConfigStatus(const GlobalSystemConfigStatus& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_commonstatus()) {
    commonstatus_ = new ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::CommonStatus(*from.commonstatus_);
  } else {
    commonstatus_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.GlobalSystemConfigStatus)
}

inline void GlobalSystemConfigStatus::SharedCtor() {
commonstatus_ = nullptr;
}

GlobalSystemConfigStatus::~GlobalSystemConfigStatus() {
  // @@protoc_insertion_point(destructor:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.GlobalSystemConfigStatus)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void GlobalSystemConfigStatus::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete commonstatus_;
}

void GlobalSystemConfigStatus::ArenaDtor(void* object) {
  GlobalSystemConfigStatus* _this = reinterpret_cast< GlobalSystemConfigStatus* >(object);
  (void)_this;
}
void GlobalSystemConfigStatus::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GlobalSystemConfigStatus::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GlobalSystemConfigStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.GlobalSystemConfigStatus)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(commonstatus_ != nullptr);
    commonstatus_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GlobalSystemConfigStatus::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.CommonStatus commonStatus = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_commonstatus(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GlobalSystemConfigStatus::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.GlobalSystemConfigStatus)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.CommonStatus commonStatus = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::commonstatus(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.GlobalSystemConfigStatus)
  return target;
}

size_t GlobalSystemConfigStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.GlobalSystemConfigStatus)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.CommonStatus commonStatus = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *commonstatus_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GlobalSystemConfigStatus::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GlobalSystemConfigStatus::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GlobalSystemConfigStatus::GetClassData() const { return &_class_data_; }

void GlobalSystemConfigStatus::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<GlobalSystemConfigStatus *>(to)->MergeFrom(
      static_cast<const GlobalSystemConfigStatus &>(from));
}


void GlobalSystemConfigStatus::MergeFrom(const GlobalSystemConfigStatus& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.GlobalSystemConfigStatus)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_commonstatus()) {
    _internal_mutable_commonstatus()->::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::CommonStatus::MergeFrom(from._internal_commonstatus());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GlobalSystemConfigStatus::CopyFrom(const GlobalSystemConfigStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.GlobalSystemConfigStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GlobalSystemConfigStatus::IsInitialized() const {
  return true;
}

void GlobalSystemConfigStatus::InternalSwap(GlobalSystemConfigStatus* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(commonstatus_, other->commonstatus_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GlobalSystemConfigStatus::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_ssd_2dgit_2ejuniper_2enet_2fcontrail_2fcn2_2fcontrail_2fpkg_2fapis_2fcore_2fv1alpha1_2fgenerated_2eproto_getter, &descriptor_table_ssd_2dgit_2ejuniper_2enet_2fcontrail_2fcn2_2fcontrail_2fpkg_2fapis_2fcore_2fv1alpha1_2fgenerated_2eproto_once,
      file_level_metadata_ssd_2dgit_2ejuniper_2enet_2fcontrail_2fcn2_2fcontrail_2fpkg_2fapis_2fcore_2fv1alpha1_2fgenerated_2eproto[60]);
}

// ===================================================================

class GlobalVrouterConfig::_Internal {
 public:
  using HasBits = decltype(std::declval<GlobalVrouterConfig>()._has_bits_);
  static const ::k8s::io::apimachinery::pkg::apis::meta::v1::ObjectMeta& metadata(const GlobalVrouterConfig* msg);
  static void set_has_metadata(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::GlobalVrouterConfigSpec& spec(const GlobalVrouterConfig* msg);
  static void set_has_spec(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::GlobalVrouterConfigStatus& status(const GlobalVrouterConfig* msg);
  static void set_has_status(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::k8s::io::apimachinery::pkg::apis::meta::v1::ObjectMeta&
GlobalVrouterConfig::_Internal::metadata(const GlobalVrouterConfig* msg) {
  return *msg->metadata_;
}
const ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::GlobalVrouterConfigSpec&
GlobalVrouterConfig::_Internal::spec(const GlobalVrouterConfig* msg) {
  return *msg->spec_;
}
const ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::GlobalVrouterConfigStatus&
GlobalVrouterConfig::_Internal::status(const GlobalVrouterConfig* msg) {
  return *msg->status_;
}
void GlobalVrouterConfig::clear_metadata() {
  if (metadata_ != nullptr) metadata_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
GlobalVrouterConfig::GlobalVrouterConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.GlobalVrouterConfig)
}
GlobalVrouterConfig::GlobalVrouterConfig(const GlobalVrouterConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_metadata()) {
    metadata_ = new ::k8s::io::apimachinery::pkg::apis::meta::v1::ObjectMeta(*from.metadata_);
  } else {
    metadata_ = nullptr;
  }
  if (from._internal_has_spec()) {
    spec_ = new ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::GlobalVrouterConfigSpec(*from.spec_);
  } else {
    spec_ = nullptr;
  }
  if (from._internal_has_status()) {
    status_ = new ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::GlobalVrouterConfigStatus(*from.status_);
  } else {
    status_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.GlobalVrouterConfig)
}

inline void GlobalVrouterConfig::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&metadata_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&status_) -
    reinterpret_cast<char*>(&metadata_)) + sizeof(status_));
}

GlobalVrouterConfig::~GlobalVrouterConfig() {
  // @@protoc_insertion_point(destructor:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.GlobalVrouterConfig)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void GlobalVrouterConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete metadata_;
  if (this != internal_default_instance()) delete spec_;
  if (this != internal_default_instance()) delete status_;
}

void GlobalVrouterConfig::ArenaDtor(void* object) {
  GlobalVrouterConfig* _this = reinterpret_cast< GlobalVrouterConfig* >(object);
  (void)_this;
}
void GlobalVrouterConfig::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GlobalVrouterConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GlobalVrouterConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.GlobalVrouterConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(metadata_ != nullptr);
      metadata_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(spec_ != nullptr);
      spec_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(status_ != nullptr);
      status_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GlobalVrouterConfig::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_metadata(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.GlobalVrouterConfigSpec spec = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_spec(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.GlobalVrouterConfigStatus status = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GlobalVrouterConfig::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.GlobalVrouterConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::metadata(this), target, stream);
  }

  // optional .ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.GlobalVrouterConfigSpec spec = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::spec(this), target, stream);
  }

  // optional .ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.GlobalVrouterConfigStatus status = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::status(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.GlobalVrouterConfig)
  return target;
}

size_t GlobalVrouterConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.GlobalVrouterConfig)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *metadata_);
    }

    // optional .ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.GlobalVrouterConfigSpec spec = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *spec_);
    }

    // optional .ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.GlobalVrouterConfigStatus status = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *status_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GlobalVrouterConfig::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GlobalVrouterConfig::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GlobalVrouterConfig::GetClassData() const { return &_class_data_; }

void GlobalVrouterConfig::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<GlobalVrouterConfig *>(to)->MergeFrom(
      static_cast<const GlobalVrouterConfig &>(from));
}


void GlobalVrouterConfig::MergeFrom(const GlobalVrouterConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.GlobalVrouterConfig)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_metadata()->::k8s::io::apimachinery::pkg::apis::meta::v1::ObjectMeta::MergeFrom(from._internal_metadata());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_spec()->::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::GlobalVrouterConfigSpec::MergeFrom(from._internal_spec());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_status()->::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::GlobalVrouterConfigStatus::MergeFrom(from._internal_status());
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GlobalVrouterConfig::CopyFrom(const GlobalVrouterConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.GlobalVrouterConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GlobalVrouterConfig::IsInitialized() const {
  return true;
}

void GlobalVrouterConfig::InternalSwap(GlobalVrouterConfig* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GlobalVrouterConfig, status_)
      + sizeof(GlobalVrouterConfig::status_)
      - PROTOBUF_FIELD_OFFSET(GlobalVrouterConfig, metadata_)>(
          reinterpret_cast<char*>(&metadata_),
          reinterpret_cast<char*>(&other->metadata_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GlobalVrouterConfig::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_ssd_2dgit_2ejuniper_2enet_2fcontrail_2fcn2_2fcontrail_2fpkg_2fapis_2fcore_2fv1alpha1_2fgenerated_2eproto_getter, &descriptor_table_ssd_2dgit_2ejuniper_2enet_2fcontrail_2fcn2_2fcontrail_2fpkg_2fapis_2fcore_2fv1alpha1_2fgenerated_2eproto_once,
      file_level_metadata_ssd_2dgit_2ejuniper_2enet_2fcontrail_2fcn2_2fcontrail_2fpkg_2fapis_2fcore_2fv1alpha1_2fgenerated_2eproto[61]);
}

// ===================================================================

class GlobalVrouterConfigList::_Internal {
 public:
  using HasBits = decltype(std::declval<GlobalVrouterConfigList>()._has_bits_);
  static const ::k8s::io::apimachinery::pkg::apis::meta::v1::ListMeta& metadata(const GlobalVrouterConfigList* msg);
  static void set_has_metadata(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::k8s::io::apimachinery::pkg::apis::meta::v1::ListMeta&
GlobalVrouterConfigList::_Internal::metadata(const GlobalVrouterConfigList* msg) {
  return *msg->metadata_;
}
void GlobalVrouterConfigList::clear_metadata() {
  if (metadata_ != nullptr) metadata_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
GlobalVrouterConfigList::GlobalVrouterConfigList(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  items_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.GlobalVrouterConfigList)
}
GlobalVrouterConfigList::GlobalVrouterConfigList(const GlobalVrouterConfigList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      items_(from.items_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_metadata()) {
    metadata_ = new ::k8s::io::apimachinery::pkg::apis::meta::v1::ListMeta(*from.metadata_);
  } else {
    metadata_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.GlobalVrouterConfigList)
}

inline void GlobalVrouterConfigList::SharedCtor() {
metadata_ = nullptr;
}

GlobalVrouterConfigList::~GlobalVrouterConfigList() {
  // @@protoc_insertion_point(destructor:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.GlobalVrouterConfigList)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void GlobalVrouterConfigList::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete metadata_;
}

void GlobalVrouterConfigList::ArenaDtor(void* object) {
  GlobalVrouterConfigList* _this = reinterpret_cast< GlobalVrouterConfigList* >(object);
  (void)_this;
}
void GlobalVrouterConfigList::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GlobalVrouterConfigList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GlobalVrouterConfigList::Clear() {
// @@protoc_insertion_point(message_clear_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.GlobalVrouterConfigList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  items_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(metadata_ != nullptr);
    metadata_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GlobalVrouterConfigList::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_metadata(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.GlobalVrouterConfig items = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_items(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GlobalVrouterConfigList::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.GlobalVrouterConfigList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::metadata(this), target, stream);
  }

  // repeated .ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.GlobalVrouterConfig items = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_items_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_items(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.GlobalVrouterConfigList)
  return target;
}

size_t GlobalVrouterConfigList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.GlobalVrouterConfigList)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.GlobalVrouterConfig items = 2;
  total_size += 1UL * this->_internal_items_size();
  for (const auto& msg : this->items_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional .k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *metadata_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GlobalVrouterConfigList::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GlobalVrouterConfigList::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GlobalVrouterConfigList::GetClassData() const { return &_class_data_; }

void GlobalVrouterConfigList::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<GlobalVrouterConfigList *>(to)->MergeFrom(
      static_cast<const GlobalVrouterConfigList &>(from));
}


void GlobalVrouterConfigList::MergeFrom(const GlobalVrouterConfigList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.GlobalVrouterConfigList)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  items_.MergeFrom(from.items_);
  if (from._internal_has_metadata()) {
    _internal_mutable_metadata()->::k8s::io::apimachinery::pkg::apis::meta::v1::ListMeta::MergeFrom(from._internal_metadata());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GlobalVrouterConfigList::CopyFrom(const GlobalVrouterConfigList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.GlobalVrouterConfigList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GlobalVrouterConfigList::IsInitialized() const {
  return true;
}

void GlobalVrouterConfigList::InternalSwap(GlobalVrouterConfigList* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  items_.InternalSwap(&other->items_);
  swap(metadata_, other->metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GlobalVrouterConfigList::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_ssd_2dgit_2ejuniper_2enet_2fcontrail_2fcn2_2fcontrail_2fpkg_2fapis_2fcore_2fv1alpha1_2fgenerated_2eproto_getter, &descriptor_table_ssd_2dgit_2ejuniper_2enet_2fcontrail_2fcn2_2fcontrail_2fpkg_2fapis_2fcore_2fv1alpha1_2fgenerated_2eproto_once,
      file_level_metadata_ssd_2dgit_2ejuniper_2enet_2fcontrail_2fcn2_2fcontrail_2fpkg_2fapis_2fcore_2fv1alpha1_2fgenerated_2eproto[62]);
}

// ===================================================================

class GlobalVrouterConfigSpec::_Internal {
 public:
  using HasBits = decltype(std::declval<GlobalVrouterConfigSpec>()._has_bits_);
  static const ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::CommonSpec& commonspec(const GlobalVrouterConfigSpec* msg);
  static void set_has_commonspec(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::k8s::io::api::core::v1::ObjectReference& parent(const GlobalVrouterConfigSpec* msg);
  static void set_has_parent(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::EncapsulationPriorities& encapsulationpriorities(const GlobalVrouterConfigSpec* msg);
  static void set_has_encapsulationpriorities(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::LinklocalServices& linklocalservices(const GlobalVrouterConfigSpec* msg);
  static void set_has_linklocalservices(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::PortTranslationPools& porttranslationpools(const GlobalVrouterConfigSpec* msg);
  static void set_has_porttranslationpools(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_flowexportrate(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
};

const ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::CommonSpec&
GlobalVrouterConfigSpec::_Internal::commonspec(const GlobalVrouterConfigSpec* msg) {
  return *msg->commonspec_;
}
const ::k8s::io::api::core::v1::ObjectReference&
GlobalVrouterConfigSpec::_Internal::parent(const GlobalVrouterConfigSpec* msg) {
  return *msg->parent_;
}
const ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::EncapsulationPriorities&
GlobalVrouterConfigSpec::_Internal::encapsulationpriorities(const GlobalVrouterConfigSpec* msg) {
  return *msg->encapsulationpriorities_;
}
const ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::LinklocalServices&
GlobalVrouterConfigSpec::_Internal::linklocalservices(const GlobalVrouterConfigSpec* msg) {
  return *msg->linklocalservices_;
}
const ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::PortTranslationPools&
GlobalVrouterConfigSpec::_Internal::porttranslationpools(const GlobalVrouterConfigSpec* msg) {
  return *msg->porttranslationpools_;
}
void GlobalVrouterConfigSpec::clear_parent() {
  if (parent_ != nullptr) parent_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
GlobalVrouterConfigSpec::GlobalVrouterConfigSpec(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.GlobalVrouterConfigSpec)
}
GlobalVrouterConfigSpec::GlobalVrouterConfigSpec(const GlobalVrouterConfigSpec& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_commonspec()) {
    commonspec_ = new ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::CommonSpec(*from.commonspec_);
  } else {
    commonspec_ = nullptr;
  }
  if (from._internal_has_parent()) {
    parent_ = new ::k8s::io::api::core::v1::ObjectReference(*from.parent_);
  } else {
    parent_ = nullptr;
  }
  if (from._internal_has_encapsulationpriorities()) {
    encapsulationpriorities_ = new ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::EncapsulationPriorities(*from.encapsulationpriorities_);
  } else {
    encapsulationpriorities_ = nullptr;
  }
  if (from._internal_has_linklocalservices()) {
    linklocalservices_ = new ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::LinklocalServices(*from.linklocalservices_);
  } else {
    linklocalservices_ = nullptr;
  }
  if (from._internal_has_porttranslationpools()) {
    porttranslationpools_ = new ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::PortTranslationPools(*from.porttranslationpools_);
  } else {
    porttranslationpools_ = nullptr;
  }
  flowexportrate_ = from.flowexportrate_;
  // @@protoc_insertion_point(copy_constructor:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.GlobalVrouterConfigSpec)
}

inline void GlobalVrouterConfigSpec::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&commonspec_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&flowexportrate_) -
    reinterpret_cast<char*>(&commonspec_)) + sizeof(flowexportrate_));
}

GlobalVrouterConfigSpec::~GlobalVrouterConfigSpec() {
  // @@protoc_insertion_point(destructor:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.GlobalVrouterConfigSpec)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void GlobalVrouterConfigSpec::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete commonspec_;
  if (this != internal_default_instance()) delete parent_;
  if (this != internal_default_instance()) delete encapsulationpriorities_;
  if (this != internal_default_instance()) delete linklocalservices_;
  if (this != internal_default_instance()) delete porttranslationpools_;
}

void GlobalVrouterConfigSpec::ArenaDtor(void* object) {
  GlobalVrouterConfigSpec* _this = reinterpret_cast< GlobalVrouterConfigSpec* >(object);
  (void)_this;
}
void GlobalVrouterConfigSpec::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GlobalVrouterConfigSpec::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GlobalVrouterConfigSpec::Clear() {
// @@protoc_insertion_point(message_clear_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.GlobalVrouterConfigSpec)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(commonspec_ != nullptr);
      commonspec_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(parent_ != nullptr);
      parent_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(encapsulationpriorities_ != nullptr);
      encapsulationpriorities_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(linklocalservices_ != nullptr);
      linklocalservices_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(porttranslationpools_ != nullptr);
      porttranslationpools_->Clear();
    }
  }
  flowexportrate_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GlobalVrouterConfigSpec::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.CommonSpec commonSpec = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_commonspec(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .k8s.io.api.core.v1.ObjectReference parent = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_parent(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.EncapsulationPriorities encapsulationPriorities = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_encapsulationpriorities(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.LinklocalServices linklocalServices = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_linklocalservices(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.PortTranslationPools portTranslationPools = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_porttranslationpools(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 flowExportRate = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_flowexportrate(&has_bits);
          flowexportrate_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GlobalVrouterConfigSpec::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.GlobalVrouterConfigSpec)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.CommonSpec commonSpec = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::commonspec(this), target, stream);
  }

  // optional .k8s.io.api.core.v1.ObjectReference parent = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::parent(this), target, stream);
  }

  // optional .ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.EncapsulationPriorities encapsulationPriorities = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::encapsulationpriorities(this), target, stream);
  }

  // optional .ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.LinklocalServices linklocalServices = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::linklocalservices(this), target, stream);
  }

  // optional .ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.PortTranslationPools portTranslationPools = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::porttranslationpools(this), target, stream);
  }

  // optional int32 flowExportRate = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_flowexportrate(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.GlobalVrouterConfigSpec)
  return target;
}

size_t GlobalVrouterConfigSpec::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.GlobalVrouterConfigSpec)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional .ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.CommonSpec commonSpec = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *commonspec_);
    }

    // optional .k8s.io.api.core.v1.ObjectReference parent = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *parent_);
    }

    // optional .ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.EncapsulationPriorities encapsulationPriorities = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *encapsulationpriorities_);
    }

    // optional .ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.LinklocalServices linklocalServices = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *linklocalservices_);
    }

    // optional .ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.PortTranslationPools portTranslationPools = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *porttranslationpools_);
    }

    // optional int32 flowExportRate = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_flowexportrate());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GlobalVrouterConfigSpec::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GlobalVrouterConfigSpec::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GlobalVrouterConfigSpec::GetClassData() const { return &_class_data_; }

void GlobalVrouterConfigSpec::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<GlobalVrouterConfigSpec *>(to)->MergeFrom(
      static_cast<const GlobalVrouterConfigSpec &>(from));
}


void GlobalVrouterConfigSpec::MergeFrom(const GlobalVrouterConfigSpec& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.GlobalVrouterConfigSpec)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_commonspec()->::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::CommonSpec::MergeFrom(from._internal_commonspec());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_parent()->::k8s::io::api::core::v1::ObjectReference::MergeFrom(from._internal_parent());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_encapsulationpriorities()->::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::EncapsulationPriorities::MergeFrom(from._internal_encapsulationpriorities());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_linklocalservices()->::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::LinklocalServices::MergeFrom(from._internal_linklocalservices());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_mutable_porttranslationpools()->::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::PortTranslationPools::MergeFrom(from._internal_porttranslationpools());
    }
    if (cached_has_bits & 0x00000020u) {
      flowexportrate_ = from.flowexportrate_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GlobalVrouterConfigSpec::CopyFrom(const GlobalVrouterConfigSpec& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.GlobalVrouterConfigSpec)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GlobalVrouterConfigSpec::IsInitialized() const {
  return true;
}

void GlobalVrouterConfigSpec::InternalSwap(GlobalVrouterConfigSpec* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GlobalVrouterConfigSpec, flowexportrate_)
      + sizeof(GlobalVrouterConfigSpec::flowexportrate_)
      - PROTOBUF_FIELD_OFFSET(GlobalVrouterConfigSpec, commonspec_)>(
          reinterpret_cast<char*>(&commonspec_),
          reinterpret_cast<char*>(&other->commonspec_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GlobalVrouterConfigSpec::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_ssd_2dgit_2ejuniper_2enet_2fcontrail_2fcn2_2fcontrail_2fpkg_2fapis_2fcore_2fv1alpha1_2fgenerated_2eproto_getter, &descriptor_table_ssd_2dgit_2ejuniper_2enet_2fcontrail_2fcn2_2fcontrail_2fpkg_2fapis_2fcore_2fv1alpha1_2fgenerated_2eproto_once,
      file_level_metadata_ssd_2dgit_2ejuniper_2enet_2fcontrail_2fcn2_2fcontrail_2fpkg_2fapis_2fcore_2fv1alpha1_2fgenerated_2eproto[63]);
}

// ===================================================================

class GlobalVrouterConfigStatus::_Internal {
 public:
  using HasBits = decltype(std::declval<GlobalVrouterConfigStatus>()._has_bits_);
  static const ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::CommonStatus& commonstatus(const GlobalVrouterConfigStatus* msg);
  static void set_has_commonstatus(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::CommonStatus&
GlobalVrouterConfigStatus::_Internal::commonstatus(const GlobalVrouterConfigStatus* msg) {
  return *msg->commonstatus_;
}
GlobalVrouterConfigStatus::GlobalVrouterConfigStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.GlobalVrouterConfigStatus)
}
GlobalVrouterConfigStatus::GlobalVrouterConfigStatus(const GlobalVrouterConfigStatus& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_commonstatus()) {
    commonstatus_ = new ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::CommonStatus(*from.commonstatus_);
  } else {
    commonstatus_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.GlobalVrouterConfigStatus)
}

inline void GlobalVrouterConfigStatus::SharedCtor() {
commonstatus_ = nullptr;
}

GlobalVrouterConfigStatus::~GlobalVrouterConfigStatus() {
  // @@protoc_insertion_point(destructor:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.GlobalVrouterConfigStatus)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void GlobalVrouterConfigStatus::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete commonstatus_;
}

void GlobalVrouterConfigStatus::ArenaDtor(void* object) {
  GlobalVrouterConfigStatus* _this = reinterpret_cast< GlobalVrouterConfigStatus* >(object);
  (void)_this;
}
void GlobalVrouterConfigStatus::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GlobalVrouterConfigStatus::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GlobalVrouterConfigStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.GlobalVrouterConfigStatus)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(commonstatus_ != nullptr);
    commonstatus_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GlobalVrouterConfigStatus::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.CommonStatus commonStatus = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_commonstatus(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GlobalVrouterConfigStatus::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.GlobalVrouterConfigStatus)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.CommonStatus commonStatus = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::commonstatus(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.GlobalVrouterConfigStatus)
  return target;
}

size_t GlobalVrouterConfigStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.GlobalVrouterConfigStatus)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.CommonStatus commonStatus = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *commonstatus_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GlobalVrouterConfigStatus::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GlobalVrouterConfigStatus::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GlobalVrouterConfigStatus::GetClassData() const { return &_class_data_; }

void GlobalVrouterConfigStatus::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<GlobalVrouterConfigStatus *>(to)->MergeFrom(
      static_cast<const GlobalVrouterConfigStatus &>(from));
}


void GlobalVrouterConfigStatus::MergeFrom(const GlobalVrouterConfigStatus& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.GlobalVrouterConfigStatus)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_commonstatus()) {
    _internal_mutable_commonstatus()->::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::CommonStatus::MergeFrom(from._internal_commonstatus());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GlobalVrouterConfigStatus::CopyFrom(const GlobalVrouterConfigStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.GlobalVrouterConfigStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GlobalVrouterConfigStatus::IsInitialized() const {
  return true;
}

void GlobalVrouterConfigStatus::InternalSwap(GlobalVrouterConfigStatus* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(commonstatus_, other->commonstatus_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GlobalVrouterConfigStatus::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_ssd_2dgit_2ejuniper_2enet_2fcontrail_2fcn2_2fcontrail_2fpkg_2fapis_2fcore_2fv1alpha1_2fgenerated_2eproto_getter, &descriptor_table_ssd_2dgit_2ejuniper_2enet_2fcontrail_2fcn2_2fcontrail_2fpkg_2fapis_2fcore_2fv1alpha1_2fgenerated_2eproto_once,
      file_level_metadata_ssd_2dgit_2ejuniper_2enet_2fcontrail_2fcn2_2fcontrail_2fpkg_2fapis_2fcore_2fv1alpha1_2fgenerated_2eproto[64]);
}

// ===================================================================

class IPRange::_Internal {
 public:
  using HasBits = decltype(std::declval<IPRange>()._has_bits_);
  static void set_has_from(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_to(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

IPRange::IPRange(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.IPRange)
}
IPRange::IPRange(const IPRange& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  from_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_from()) {
    from_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_from(), 
      GetArenaForAllocation());
  }
  to_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_to()) {
    to_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_to(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.IPRange)
}

inline void IPRange::SharedCtor() {
from_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
to_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

IPRange::~IPRange() {
  // @@protoc_insertion_point(destructor:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.IPRange)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void IPRange::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  from_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  to_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void IPRange::ArenaDtor(void* object) {
  IPRange* _this = reinterpret_cast< IPRange* >(object);
  (void)_this;
}
void IPRange::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void IPRange::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void IPRange::Clear() {
// @@protoc_insertion_point(message_clear_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.IPRange)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      from_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      to_.ClearNonDefaultToEmpty();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* IPRange::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string from = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_from();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.IPRange.from");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string to = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_to();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.IPRange.to");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* IPRange::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.IPRange)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string from = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_from().data(), static_cast<int>(this->_internal_from().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.IPRange.from");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_from(), target);
  }

  // optional string to = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_to().data(), static_cast<int>(this->_internal_to().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.IPRange.to");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_to(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.IPRange)
  return target;
}

size_t IPRange::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.IPRange)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string from = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_from());
    }

    // optional string to = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_to());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData IPRange::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    IPRange::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*IPRange::GetClassData() const { return &_class_data_; }

void IPRange::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<IPRange *>(to)->MergeFrom(
      static_cast<const IPRange &>(from));
}


void IPRange::MergeFrom(const IPRange& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.IPRange)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_from(from._internal_from());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_to(from._internal_to());
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void IPRange::CopyFrom(const IPRange& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.IPRange)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IPRange::IsInitialized() const {
  return true;
}

void IPRange::InternalSwap(IPRange* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &from_, GetArenaForAllocation(),
      &other->from_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &to_, GetArenaForAllocation(),
      &other->to_, other->GetArenaForAllocation()
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata IPRange::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_ssd_2dgit_2ejuniper_2enet_2fcontrail_2fcn2_2fcontrail_2fpkg_2fapis_2fcore_2fv1alpha1_2fgenerated_2eproto_getter, &descriptor_table_ssd_2dgit_2ejuniper_2enet_2fcontrail_2fcn2_2fcontrail_2fpkg_2fapis_2fcore_2fv1alpha1_2fgenerated_2eproto_once,
      file_level_metadata_ssd_2dgit_2ejuniper_2enet_2fcontrail_2fcn2_2fcontrail_2fpkg_2fapis_2fcore_2fv1alpha1_2fgenerated_2eproto[65]);
}

// ===================================================================

class ImportVirtualNetworkRouter::_Internal {
 public:
};

ImportVirtualNetworkRouter::ImportVirtualNetworkRouter(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  virtualnetworkrouters_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.ImportVirtualNetworkRouter)
}
ImportVirtualNetworkRouter::ImportVirtualNetworkRouter(const ImportVirtualNetworkRouter& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      virtualnetworkrouters_(from.virtualnetworkrouters_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.ImportVirtualNetworkRouter)
}

inline void ImportVirtualNetworkRouter::SharedCtor() {
}

ImportVirtualNetworkRouter::~ImportVirtualNetworkRouter() {
  // @@protoc_insertion_point(destructor:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.ImportVirtualNetworkRouter)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ImportVirtualNetworkRouter::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ImportVirtualNetworkRouter::ArenaDtor(void* object) {
  ImportVirtualNetworkRouter* _this = reinterpret_cast< ImportVirtualNetworkRouter* >(object);
  (void)_this;
}
void ImportVirtualNetworkRouter::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ImportVirtualNetworkRouter::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ImportVirtualNetworkRouter::Clear() {
// @@protoc_insertion_point(message_clear_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.ImportVirtualNetworkRouter)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  virtualnetworkrouters_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ImportVirtualNetworkRouter::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.VirtualNetworkRouterEntry virtualNetworkRouters = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_virtualnetworkrouters(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ImportVirtualNetworkRouter::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.ImportVirtualNetworkRouter)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.VirtualNetworkRouterEntry virtualNetworkRouters = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_virtualnetworkrouters_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_virtualnetworkrouters(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.ImportVirtualNetworkRouter)
  return target;
}

size_t ImportVirtualNetworkRouter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.ImportVirtualNetworkRouter)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.VirtualNetworkRouterEntry virtualNetworkRouters = 1;
  total_size += 1UL * this->_internal_virtualnetworkrouters_size();
  for (const auto& msg : this->virtualnetworkrouters_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ImportVirtualNetworkRouter::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ImportVirtualNetworkRouter::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ImportVirtualNetworkRouter::GetClassData() const { return &_class_data_; }

void ImportVirtualNetworkRouter::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<ImportVirtualNetworkRouter *>(to)->MergeFrom(
      static_cast<const ImportVirtualNetworkRouter &>(from));
}


void ImportVirtualNetworkRouter::MergeFrom(const ImportVirtualNetworkRouter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.ImportVirtualNetworkRouter)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  virtualnetworkrouters_.MergeFrom(from.virtualnetworkrouters_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ImportVirtualNetworkRouter::CopyFrom(const ImportVirtualNetworkRouter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.ImportVirtualNetworkRouter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ImportVirtualNetworkRouter::IsInitialized() const {
  return true;
}

void ImportVirtualNetworkRouter::InternalSwap(ImportVirtualNetworkRouter* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  virtualnetworkrouters_.InternalSwap(&other->virtualnetworkrouters_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ImportVirtualNetworkRouter::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_ssd_2dgit_2ejuniper_2enet_2fcontrail_2fcn2_2fcontrail_2fpkg_2fapis_2fcore_2fv1alpha1_2fgenerated_2eproto_getter, &descriptor_table_ssd_2dgit_2ejuniper_2enet_2fcontrail_2fcn2_2fcontrail_2fpkg_2fapis_2fcore_2fv1alpha1_2fgenerated_2eproto_once,
      file_level_metadata_ssd_2dgit_2ejuniper_2enet_2fcontrail_2fcn2_2fcontrail_2fpkg_2fapis_2fcore_2fv1alpha1_2fgenerated_2eproto[66]);
}

// ===================================================================

class InstanceIP::_Internal {
 public:
  using HasBits = decltype(std::declval<InstanceIP>()._has_bits_);
  static const ::k8s::io::apimachinery::pkg::apis::meta::v1::ObjectMeta& metadata(const InstanceIP* msg);
  static void set_has_metadata(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::InstanceIPSpec& spec(const InstanceIP* msg);
  static void set_has_spec(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::InstanceIPStatus& status(const InstanceIP* msg);
  static void set_has_status(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::k8s::io::apimachinery::pkg::apis::meta::v1::ObjectMeta&
InstanceIP::_Internal::metadata(const InstanceIP* msg) {
  return *msg->metadata_;
}
const ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::InstanceIPSpec&
InstanceIP::_Internal::spec(const InstanceIP* msg) {
  return *msg->spec_;
}
const ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::InstanceIPStatus&
InstanceIP::_Internal::status(const InstanceIP* msg) {
  return *msg->status_;
}
void InstanceIP::clear_metadata() {
  if (metadata_ != nullptr) metadata_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
InstanceIP::InstanceIP(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.InstanceIP)
}
InstanceIP::InstanceIP(const InstanceIP& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_metadata()) {
    metadata_ = new ::k8s::io::apimachinery::pkg::apis::meta::v1::ObjectMeta(*from.metadata_);
  } else {
    metadata_ = nullptr;
  }
  if (from._internal_has_spec()) {
    spec_ = new ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::InstanceIPSpec(*from.spec_);
  } else {
    spec_ = nullptr;
  }
  if (from._internal_has_status()) {
    status_ = new ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::InstanceIPStatus(*from.status_);
  } else {
    status_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.InstanceIP)
}

inline void InstanceIP::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&metadata_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&status_) -
    reinterpret_cast<char*>(&metadata_)) + sizeof(status_));
}

InstanceIP::~InstanceIP() {
  // @@protoc_insertion_point(destructor:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.InstanceIP)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void InstanceIP::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete metadata_;
  if (this != internal_default_instance()) delete spec_;
  if (this != internal_default_instance()) delete status_;
}

void InstanceIP::ArenaDtor(void* object) {
  InstanceIP* _this = reinterpret_cast< InstanceIP* >(object);
  (void)_this;
}
void InstanceIP::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void InstanceIP::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void InstanceIP::Clear() {
// @@protoc_insertion_point(message_clear_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.InstanceIP)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(metadata_ != nullptr);
      metadata_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(spec_ != nullptr);
      spec_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(status_ != nullptr);
      status_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* InstanceIP::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_metadata(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.InstanceIPSpec spec = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_spec(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.InstanceIPStatus status = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* InstanceIP::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.InstanceIP)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::metadata(this), target, stream);
  }

  // optional .ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.InstanceIPSpec spec = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::spec(this), target, stream);
  }

  // optional .ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.InstanceIPStatus status = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::status(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.InstanceIP)
  return target;
}

size_t InstanceIP::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.InstanceIP)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *metadata_);
    }

    // optional .ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.InstanceIPSpec spec = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *spec_);
    }

    // optional .ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.InstanceIPStatus status = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *status_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData InstanceIP::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    InstanceIP::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*InstanceIP::GetClassData() const { return &_class_data_; }

void InstanceIP::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<InstanceIP *>(to)->MergeFrom(
      static_cast<const InstanceIP &>(from));
}


void InstanceIP::MergeFrom(const InstanceIP& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.InstanceIP)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_metadata()->::k8s::io::apimachinery::pkg::apis::meta::v1::ObjectMeta::MergeFrom(from._internal_metadata());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_spec()->::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::InstanceIPSpec::MergeFrom(from._internal_spec());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_status()->::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::InstanceIPStatus::MergeFrom(from._internal_status());
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void InstanceIP::CopyFrom(const InstanceIP& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.InstanceIP)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InstanceIP::IsInitialized() const {
  return true;
}

void InstanceIP::InternalSwap(InstanceIP* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(InstanceIP, status_)
      + sizeof(InstanceIP::status_)
      - PROTOBUF_FIELD_OFFSET(InstanceIP, metadata_)>(
          reinterpret_cast<char*>(&metadata_),
          reinterpret_cast<char*>(&other->metadata_));
}

::PROTOBUF_NAMESPACE_ID::Metadata InstanceIP::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_ssd_2dgit_2ejuniper_2enet_2fcontrail_2fcn2_2fcontrail_2fpkg_2fapis_2fcore_2fv1alpha1_2fgenerated_2eproto_getter, &descriptor_table_ssd_2dgit_2ejuniper_2enet_2fcontrail_2fcn2_2fcontrail_2fpkg_2fapis_2fcore_2fv1alpha1_2fgenerated_2eproto_once,
      file_level_metadata_ssd_2dgit_2ejuniper_2enet_2fcontrail_2fcn2_2fcontrail_2fpkg_2fapis_2fcore_2fv1alpha1_2fgenerated_2eproto[67]);
}

// ===================================================================

class InstanceIPList::_Internal {
 public:
  using HasBits = decltype(std::declval<InstanceIPList>()._has_bits_);
  static const ::k8s::io::apimachinery::pkg::apis::meta::v1::ListMeta& metadata(const InstanceIPList* msg);
  static void set_has_metadata(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::k8s::io::apimachinery::pkg::apis::meta::v1::ListMeta&
InstanceIPList::_Internal::metadata(const InstanceIPList* msg) {
  return *msg->metadata_;
}
void InstanceIPList::clear_metadata() {
  if (metadata_ != nullptr) metadata_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
InstanceIPList::InstanceIPList(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  items_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.InstanceIPList)
}
InstanceIPList::InstanceIPList(const InstanceIPList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      items_(from.items_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_metadata()) {
    metadata_ = new ::k8s::io::apimachinery::pkg::apis::meta::v1::ListMeta(*from.metadata_);
  } else {
    metadata_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.InstanceIPList)
}

inline void InstanceIPList::SharedCtor() {
metadata_ = nullptr;
}

InstanceIPList::~InstanceIPList() {
  // @@protoc_insertion_point(destructor:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.InstanceIPList)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void InstanceIPList::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete metadata_;
}

void InstanceIPList::ArenaDtor(void* object) {
  InstanceIPList* _this = reinterpret_cast< InstanceIPList* >(object);
  (void)_this;
}
void InstanceIPList::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void InstanceIPList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void InstanceIPList::Clear() {
// @@protoc_insertion_point(message_clear_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.InstanceIPList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  items_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(metadata_ != nullptr);
    metadata_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* InstanceIPList::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_metadata(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.InstanceIP items = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_items(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* InstanceIPList::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.InstanceIPList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::metadata(this), target, stream);
  }

  // repeated .ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.InstanceIP items = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_items_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_items(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.InstanceIPList)
  return target;
}

size_t InstanceIPList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.InstanceIPList)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.InstanceIP items = 2;
  total_size += 1UL * this->_internal_items_size();
  for (const auto& msg : this->items_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional .k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *metadata_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData InstanceIPList::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    InstanceIPList::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*InstanceIPList::GetClassData() const { return &_class_data_; }

void InstanceIPList::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<InstanceIPList *>(to)->MergeFrom(
      static_cast<const InstanceIPList &>(from));
}


void InstanceIPList::MergeFrom(const InstanceIPList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.InstanceIPList)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  items_.MergeFrom(from.items_);
  if (from._internal_has_metadata()) {
    _internal_mutable_metadata()->::k8s::io::apimachinery::pkg::apis::meta::v1::ListMeta::MergeFrom(from._internal_metadata());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void InstanceIPList::CopyFrom(const InstanceIPList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.InstanceIPList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InstanceIPList::IsInitialized() const {
  return true;
}

void InstanceIPList::InternalSwap(InstanceIPList* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  items_.InternalSwap(&other->items_);
  swap(metadata_, other->metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata InstanceIPList::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_ssd_2dgit_2ejuniper_2enet_2fcontrail_2fcn2_2fcontrail_2fpkg_2fapis_2fcore_2fv1alpha1_2fgenerated_2eproto_getter, &descriptor_table_ssd_2dgit_2ejuniper_2enet_2fcontrail_2fcn2_2fcontrail_2fpkg_2fapis_2fcore_2fv1alpha1_2fgenerated_2eproto_once,
      file_level_metadata_ssd_2dgit_2ejuniper_2enet_2fcontrail_2fcn2_2fcontrail_2fpkg_2fapis_2fcore_2fv1alpha1_2fgenerated_2eproto[68]);
}

// ===================================================================

class InstanceIPSpec::_Internal {
 public:
  using HasBits = decltype(std::declval<InstanceIPSpec>()._has_bits_);
  static const ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::CommonSpec& commonspec(const InstanceIPSpec* msg);
  static void set_has_commonspec(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_instanceipaddress(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_instanceipfamily(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_cidr(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::ResourceReference& virtualnetworkreference(const InstanceIPSpec* msg);
  static void set_has_virtualnetworkreference(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

const ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::CommonSpec&
InstanceIPSpec::_Internal::commonspec(const InstanceIPSpec* msg) {
  return *msg->commonspec_;
}
const ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::ResourceReference&
InstanceIPSpec::_Internal::virtualnetworkreference(const InstanceIPSpec* msg) {
  return *msg->virtualnetworkreference_;
}
InstanceIPSpec::InstanceIPSpec(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  virtualmachineinterfacereferences_(arena),
  iprangekeys_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.InstanceIPSpec)
}
InstanceIPSpec::InstanceIPSpec(const InstanceIPSpec& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      virtualmachineinterfacereferences_(from.virtualmachineinterfacereferences_),
      iprangekeys_(from.iprangekeys_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  instanceipaddress_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_instanceipaddress()) {
    instanceipaddress_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_instanceipaddress(), 
      GetArenaForAllocation());
  }
  instanceipfamily_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_instanceipfamily()) {
    instanceipfamily_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_instanceipfamily(), 
      GetArenaForAllocation());
  }
  cidr_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_cidr()) {
    cidr_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_cidr(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_commonspec()) {
    commonspec_ = new ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::CommonSpec(*from.commonspec_);
  } else {
    commonspec_ = nullptr;
  }
  if (from._internal_has_virtualnetworkreference()) {
    virtualnetworkreference_ = new ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::ResourceReference(*from.virtualnetworkreference_);
  } else {
    virtualnetworkreference_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.InstanceIPSpec)
}

inline void InstanceIPSpec::SharedCtor() {
instanceipaddress_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
instanceipfamily_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
cidr_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&commonspec_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&virtualnetworkreference_) -
    reinterpret_cast<char*>(&commonspec_)) + sizeof(virtualnetworkreference_));
}

InstanceIPSpec::~InstanceIPSpec() {
  // @@protoc_insertion_point(destructor:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.InstanceIPSpec)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void InstanceIPSpec::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  instanceipaddress_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  instanceipfamily_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  cidr_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete commonspec_;
  if (this != internal_default_instance()) delete virtualnetworkreference_;
}

void InstanceIPSpec::ArenaDtor(void* object) {
  InstanceIPSpec* _this = reinterpret_cast< InstanceIPSpec* >(object);
  (void)_this;
}
void InstanceIPSpec::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void InstanceIPSpec::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void InstanceIPSpec::Clear() {
// @@protoc_insertion_point(message_clear_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.InstanceIPSpec)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  virtualmachineinterfacereferences_.Clear();
  iprangekeys_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      instanceipaddress_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      instanceipfamily_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      cidr_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(commonspec_ != nullptr);
      commonspec_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(virtualnetworkreference_ != nullptr);
      virtualnetworkreference_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* InstanceIPSpec::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.CommonSpec commonSpec = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_commonspec(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string instanceIPAddress = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_instanceipaddress();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.InstanceIPSpec.instanceIPAddress");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string instanceIPFamily = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_instanceipfamily();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.InstanceIPSpec.instanceIPFamily");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string cidr = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_cidr();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.InstanceIPSpec.cidr");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.ResourceReference virtualNetworkReference = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_virtualnetworkreference(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.ResourceReference virtualMachineInterfaceReferences = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_virtualmachineinterfacereferences(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated string ipRangeKeys = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_iprangekeys();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            #ifndef NDEBUG
            ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.InstanceIPSpec.ipRangeKeys");
            #endif  // !NDEBUG
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* InstanceIPSpec::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.InstanceIPSpec)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.CommonSpec commonSpec = 1;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::commonspec(this), target, stream);
  }

  // optional string instanceIPAddress = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_instanceipaddress().data(), static_cast<int>(this->_internal_instanceipaddress().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.InstanceIPSpec.instanceIPAddress");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_instanceipaddress(), target);
  }

  // optional string instanceIPFamily = 3;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_instanceipfamily().data(), static_cast<int>(this->_internal_instanceipfamily().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.InstanceIPSpec.instanceIPFamily");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_instanceipfamily(), target);
  }

  // optional string cidr = 4;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_cidr().data(), static_cast<int>(this->_internal_cidr().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.InstanceIPSpec.cidr");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_cidr(), target);
  }

  // optional .ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.ResourceReference virtualNetworkReference = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::virtualnetworkreference(this), target, stream);
  }

  // repeated .ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.ResourceReference virtualMachineInterfaceReferences = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_virtualmachineinterfacereferences_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, this->_internal_virtualmachineinterfacereferences(i), target, stream);
  }

  // repeated string ipRangeKeys = 7;
  for (int i = 0, n = this->_internal_iprangekeys_size(); i < n; i++) {
    const auto& s = this->_internal_iprangekeys(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.InstanceIPSpec.ipRangeKeys");
    target = stream->WriteString(7, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.InstanceIPSpec)
  return target;
}

size_t InstanceIPSpec::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.InstanceIPSpec)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.ResourceReference virtualMachineInterfaceReferences = 6;
  total_size += 1UL * this->_internal_virtualmachineinterfacereferences_size();
  for (const auto& msg : this->virtualmachineinterfacereferences_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated string ipRangeKeys = 7;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(iprangekeys_.size());
  for (int i = 0, n = iprangekeys_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      iprangekeys_.Get(i));
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional string instanceIPAddress = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_instanceipaddress());
    }

    // optional string instanceIPFamily = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_instanceipfamily());
    }

    // optional string cidr = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_cidr());
    }

    // optional .ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.CommonSpec commonSpec = 1;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *commonspec_);
    }

    // optional .ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.ResourceReference virtualNetworkReference = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *virtualnetworkreference_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData InstanceIPSpec::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    InstanceIPSpec::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*InstanceIPSpec::GetClassData() const { return &_class_data_; }

void InstanceIPSpec::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<InstanceIPSpec *>(to)->MergeFrom(
      static_cast<const InstanceIPSpec &>(from));
}


void InstanceIPSpec::MergeFrom(const InstanceIPSpec& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.InstanceIPSpec)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  virtualmachineinterfacereferences_.MergeFrom(from.virtualmachineinterfacereferences_);
  iprangekeys_.MergeFrom(from.iprangekeys_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_instanceipaddress(from._internal_instanceipaddress());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_instanceipfamily(from._internal_instanceipfamily());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_cidr(from._internal_cidr());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_commonspec()->::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::CommonSpec::MergeFrom(from._internal_commonspec());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_mutable_virtualnetworkreference()->::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::ResourceReference::MergeFrom(from._internal_virtualnetworkreference());
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void InstanceIPSpec::CopyFrom(const InstanceIPSpec& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.InstanceIPSpec)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InstanceIPSpec::IsInitialized() const {
  return true;
}

void InstanceIPSpec::InternalSwap(InstanceIPSpec* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  virtualmachineinterfacereferences_.InternalSwap(&other->virtualmachineinterfacereferences_);
  iprangekeys_.InternalSwap(&other->iprangekeys_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &instanceipaddress_, GetArenaForAllocation(),
      &other->instanceipaddress_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &instanceipfamily_, GetArenaForAllocation(),
      &other->instanceipfamily_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &cidr_, GetArenaForAllocation(),
      &other->cidr_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(InstanceIPSpec, virtualnetworkreference_)
      + sizeof(InstanceIPSpec::virtualnetworkreference_)
      - PROTOBUF_FIELD_OFFSET(InstanceIPSpec, commonspec_)>(
          reinterpret_cast<char*>(&commonspec_),
          reinterpret_cast<char*>(&other->commonspec_));
}

::PROTOBUF_NAMESPACE_ID::Metadata InstanceIPSpec::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_ssd_2dgit_2ejuniper_2enet_2fcontrail_2fcn2_2fcontrail_2fpkg_2fapis_2fcore_2fv1alpha1_2fgenerated_2eproto_getter, &descriptor_table_ssd_2dgit_2ejuniper_2enet_2fcontrail_2fcn2_2fcontrail_2fpkg_2fapis_2fcore_2fv1alpha1_2fgenerated_2eproto_once,
      file_level_metadata_ssd_2dgit_2ejuniper_2enet_2fcontrail_2fcn2_2fcontrail_2fpkg_2fapis_2fcore_2fv1alpha1_2fgenerated_2eproto[69]);
}

// ===================================================================

class InstanceIPStatus::_Internal {
 public:
  using HasBits = decltype(std::declval<InstanceIPStatus>()._has_bits_);
  static const ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::CommonStatus& commonstatus(const InstanceIPStatus* msg);
  static void set_has_commonstatus(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::ResourceReference& subnetreference(const InstanceIPStatus* msg);
  static void set_has_subnetreference(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::CommonStatus&
InstanceIPStatus::_Internal::commonstatus(const InstanceIPStatus* msg) {
  return *msg->commonstatus_;
}
const ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::ResourceReference&
InstanceIPStatus::_Internal::subnetreference(const InstanceIPStatus* msg) {
  return *msg->subnetreference_;
}
InstanceIPStatus::InstanceIPStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.InstanceIPStatus)
}
InstanceIPStatus::InstanceIPStatus(const InstanceIPStatus& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_commonstatus()) {
    commonstatus_ = new ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::CommonStatus(*from.commonstatus_);
  } else {
    commonstatus_ = nullptr;
  }
  if (from._internal_has_subnetreference()) {
    subnetreference_ = new ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::ResourceReference(*from.subnetreference_);
  } else {
    subnetreference_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.InstanceIPStatus)
}

inline void InstanceIPStatus::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&commonstatus_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&subnetreference_) -
    reinterpret_cast<char*>(&commonstatus_)) + sizeof(subnetreference_));
}

InstanceIPStatus::~InstanceIPStatus() {
  // @@protoc_insertion_point(destructor:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.InstanceIPStatus)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void InstanceIPStatus::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete commonstatus_;
  if (this != internal_default_instance()) delete subnetreference_;
}

void InstanceIPStatus::ArenaDtor(void* object) {
  InstanceIPStatus* _this = reinterpret_cast< InstanceIPStatus* >(object);
  (void)_this;
}
void InstanceIPStatus::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void InstanceIPStatus::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void InstanceIPStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.InstanceIPStatus)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(commonstatus_ != nullptr);
      commonstatus_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(subnetreference_ != nullptr);
      subnetreference_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* InstanceIPStatus::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.CommonStatus commonStatus = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_commonstatus(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.ResourceReference subnetReference = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_subnetreference(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* InstanceIPStatus::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.InstanceIPStatus)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.CommonStatus commonStatus = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::commonstatus(this), target, stream);
  }

  // optional .ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.ResourceReference subnetReference = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::subnetreference(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.InstanceIPStatus)
  return target;
}

size_t InstanceIPStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.InstanceIPStatus)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.CommonStatus commonStatus = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *commonstatus_);
    }

    // optional .ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.ResourceReference subnetReference = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *subnetreference_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData InstanceIPStatus::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    InstanceIPStatus::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*InstanceIPStatus::GetClassData() const { return &_class_data_; }

void InstanceIPStatus::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<InstanceIPStatus *>(to)->MergeFrom(
      static_cast<const InstanceIPStatus &>(from));
}


void InstanceIPStatus::MergeFrom(const InstanceIPStatus& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.InstanceIPStatus)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_commonstatus()->::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::CommonStatus::MergeFrom(from._internal_commonstatus());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_subnetreference()->::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::ResourceReference::MergeFrom(from._internal_subnetreference());
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void InstanceIPStatus::CopyFrom(const InstanceIPStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.InstanceIPStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InstanceIPStatus::IsInitialized() const {
  return true;
}

void InstanceIPStatus::InternalSwap(InstanceIPStatus* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(InstanceIPStatus, subnetreference_)
      + sizeof(InstanceIPStatus::subnetreference_)
      - PROTOBUF_FIELD_OFFSET(InstanceIPStatus, commonstatus_)>(
          reinterpret_cast<char*>(&commonstatus_),
          reinterpret_cast<char*>(&other->commonstatus_));
}

::PROTOBUF_NAMESPACE_ID::Metadata InstanceIPStatus::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_ssd_2dgit_2ejuniper_2enet_2fcontrail_2fcn2_2fcontrail_2fpkg_2fapis_2fcore_2fv1alpha1_2fgenerated_2eproto_getter, &descriptor_table_ssd_2dgit_2ejuniper_2enet_2fcontrail_2fcn2_2fcontrail_2fpkg_2fapis_2fcore_2fv1alpha1_2fgenerated_2eproto_once,
      file_level_metadata_ssd_2dgit_2ejuniper_2enet_2fcontrail_2fcn2_2fcontrail_2fpkg_2fapis_2fcore_2fv1alpha1_2fgenerated_2eproto[70]);
}

// ===================================================================

class LinklocalServiceEntryType::_Internal {
 public:
  using HasBits = decltype(std::declval<LinklocalServiceEntryType>()._has_bits_);
  static void set_has_ipfabricdnsservicename(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_ipfabricserviceport(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_linklocalserviceip(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_linklocalservicename(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_linklocalserviceport(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

LinklocalServiceEntryType::LinklocalServiceEntryType(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  ipfabricserviceip_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.LinklocalServiceEntryType)
}
LinklocalServiceEntryType::LinklocalServiceEntryType(const LinklocalServiceEntryType& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      ipfabricserviceip_(from.ipfabricserviceip_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ipfabricdnsservicename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_ipfabricdnsservicename()) {
    ipfabricdnsservicename_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_ipfabricdnsservicename(), 
      GetArenaForAllocation());
  }
  linklocalserviceip_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_linklocalserviceip()) {
    linklocalserviceip_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_linklocalserviceip(), 
      GetArenaForAllocation());
  }
  linklocalservicename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_linklocalservicename()) {
    linklocalservicename_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_linklocalservicename(), 
      GetArenaForAllocation());
  }
  ::memcpy(&ipfabricserviceport_, &from.ipfabricserviceport_,
    static_cast<size_t>(reinterpret_cast<char*>(&linklocalserviceport_) -
    reinterpret_cast<char*>(&ipfabricserviceport_)) + sizeof(linklocalserviceport_));
  // @@protoc_insertion_point(copy_constructor:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.LinklocalServiceEntryType)
}

inline void LinklocalServiceEntryType::SharedCtor() {
ipfabricdnsservicename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
linklocalserviceip_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
linklocalservicename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&ipfabricserviceport_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&linklocalserviceport_) -
    reinterpret_cast<char*>(&ipfabricserviceport_)) + sizeof(linklocalserviceport_));
}

LinklocalServiceEntryType::~LinklocalServiceEntryType() {
  // @@protoc_insertion_point(destructor:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.LinklocalServiceEntryType)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void LinklocalServiceEntryType::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  ipfabricdnsservicename_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  linklocalserviceip_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  linklocalservicename_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void LinklocalServiceEntryType::ArenaDtor(void* object) {
  LinklocalServiceEntryType* _this = reinterpret_cast< LinklocalServiceEntryType* >(object);
  (void)_this;
}
void LinklocalServiceEntryType::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LinklocalServiceEntryType::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void LinklocalServiceEntryType::Clear() {
// @@protoc_insertion_point(message_clear_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.LinklocalServiceEntryType)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ipfabricserviceip_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      ipfabricdnsservicename_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      linklocalserviceip_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      linklocalservicename_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x00000018u) {
    ::memset(&ipfabricserviceport_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&linklocalserviceport_) -
        reinterpret_cast<char*>(&ipfabricserviceport_)) + sizeof(linklocalserviceport_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LinklocalServiceEntryType::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string ipFabricDNSServiceName = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_ipfabricdnsservicename();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.LinklocalServiceEntryType.ipFabricDNSServiceName");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string ipFabricServiceIP = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_ipfabricserviceip();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            #ifndef NDEBUG
            ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.LinklocalServiceEntryType.ipFabricServiceIP");
            #endif  // !NDEBUG
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // optional int32 ipFabricServicePort = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_ipfabricserviceport(&has_bits);
          ipfabricserviceport_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string linklocalServiceIP = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_linklocalserviceip();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.LinklocalServiceEntryType.linklocalServiceIP");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string linklocalServiceName = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_linklocalservicename();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.LinklocalServiceEntryType.linklocalServiceName");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 linklocalServicePort = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_linklocalserviceport(&has_bits);
          linklocalserviceport_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LinklocalServiceEntryType::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.LinklocalServiceEntryType)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string ipFabricDNSServiceName = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_ipfabricdnsservicename().data(), static_cast<int>(this->_internal_ipfabricdnsservicename().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.LinklocalServiceEntryType.ipFabricDNSServiceName");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_ipfabricdnsservicename(), target);
  }

  // repeated string ipFabricServiceIP = 2;
  for (int i = 0, n = this->_internal_ipfabricserviceip_size(); i < n; i++) {
    const auto& s = this->_internal_ipfabricserviceip(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.LinklocalServiceEntryType.ipFabricServiceIP");
    target = stream->WriteString(2, s, target);
  }

  // optional int32 ipFabricServicePort = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_ipfabricserviceport(), target);
  }

  // optional string linklocalServiceIP = 4;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_linklocalserviceip().data(), static_cast<int>(this->_internal_linklocalserviceip().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.LinklocalServiceEntryType.linklocalServiceIP");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_linklocalserviceip(), target);
  }

  // optional string linklocalServiceName = 5;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_linklocalservicename().data(), static_cast<int>(this->_internal_linklocalservicename().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.LinklocalServiceEntryType.linklocalServiceName");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_linklocalservicename(), target);
  }

  // optional int32 linklocalServicePort = 6;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_linklocalserviceport(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.LinklocalServiceEntryType)
  return target;
}

size_t LinklocalServiceEntryType::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.LinklocalServiceEntryType)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string ipFabricServiceIP = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(ipfabricserviceip_.size());
  for (int i = 0, n = ipfabricserviceip_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      ipfabricserviceip_.Get(i));
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional string ipFabricDNSServiceName = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_ipfabricdnsservicename());
    }

    // optional string linklocalServiceIP = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_linklocalserviceip());
    }

    // optional string linklocalServiceName = 5;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_linklocalservicename());
    }

    // optional int32 ipFabricServicePort = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_ipfabricserviceport());
    }

    // optional int32 linklocalServicePort = 6;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_linklocalserviceport());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData LinklocalServiceEntryType::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    LinklocalServiceEntryType::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*LinklocalServiceEntryType::GetClassData() const { return &_class_data_; }

void LinklocalServiceEntryType::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<LinklocalServiceEntryType *>(to)->MergeFrom(
      static_cast<const LinklocalServiceEntryType &>(from));
}


void LinklocalServiceEntryType::MergeFrom(const LinklocalServiceEntryType& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.LinklocalServiceEntryType)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  ipfabricserviceip_.MergeFrom(from.ipfabricserviceip_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_ipfabricdnsservicename(from._internal_ipfabricdnsservicename());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_linklocalserviceip(from._internal_linklocalserviceip());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_linklocalservicename(from._internal_linklocalservicename());
    }
    if (cached_has_bits & 0x00000008u) {
      ipfabricserviceport_ = from.ipfabricserviceport_;
    }
    if (cached_has_bits & 0x00000010u) {
      linklocalserviceport_ = from.linklocalserviceport_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void LinklocalServiceEntryType::CopyFrom(const LinklocalServiceEntryType& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.LinklocalServiceEntryType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LinklocalServiceEntryType::IsInitialized() const {
  return true;
}

void LinklocalServiceEntryType::InternalSwap(LinklocalServiceEntryType* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ipfabricserviceip_.InternalSwap(&other->ipfabricserviceip_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &ipfabricdnsservicename_, GetArenaForAllocation(),
      &other->ipfabricdnsservicename_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &linklocalserviceip_, GetArenaForAllocation(),
      &other->linklocalserviceip_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &linklocalservicename_, GetArenaForAllocation(),
      &other->linklocalservicename_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LinklocalServiceEntryType, linklocalserviceport_)
      + sizeof(LinklocalServiceEntryType::linklocalserviceport_)
      - PROTOBUF_FIELD_OFFSET(LinklocalServiceEntryType, ipfabricserviceport_)>(
          reinterpret_cast<char*>(&ipfabricserviceport_),
          reinterpret_cast<char*>(&other->ipfabricserviceport_));
}

::PROTOBUF_NAMESPACE_ID::Metadata LinklocalServiceEntryType::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_ssd_2dgit_2ejuniper_2enet_2fcontrail_2fcn2_2fcontrail_2fpkg_2fapis_2fcore_2fv1alpha1_2fgenerated_2eproto_getter, &descriptor_table_ssd_2dgit_2ejuniper_2enet_2fcontrail_2fcn2_2fcontrail_2fpkg_2fapis_2fcore_2fv1alpha1_2fgenerated_2eproto_once,
      file_level_metadata_ssd_2dgit_2ejuniper_2enet_2fcontrail_2fcn2_2fcontrail_2fpkg_2fapis_2fcore_2fv1alpha1_2fgenerated_2eproto[71]);
}

// ===================================================================

class LinklocalServices::_Internal {
 public:
};

LinklocalServices::LinklocalServices(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  linklocalserviceentry_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.LinklocalServices)
}
LinklocalServices::LinklocalServices(const LinklocalServices& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      linklocalserviceentry_(from.linklocalserviceentry_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.LinklocalServices)
}

inline void LinklocalServices::SharedCtor() {
}

LinklocalServices::~LinklocalServices() {
  // @@protoc_insertion_point(destructor:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.LinklocalServices)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void LinklocalServices::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void LinklocalServices::ArenaDtor(void* object) {
  LinklocalServices* _this = reinterpret_cast< LinklocalServices* >(object);
  (void)_this;
}
void LinklocalServices::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LinklocalServices::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void LinklocalServices::Clear() {
// @@protoc_insertion_point(message_clear_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.LinklocalServices)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  linklocalserviceentry_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LinklocalServices::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.LinklocalServiceEntryType linklocalServiceEntry = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_linklocalserviceentry(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LinklocalServices::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.LinklocalServices)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.LinklocalServiceEntryType linklocalServiceEntry = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_linklocalserviceentry_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_linklocalserviceentry(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.LinklocalServices)
  return target;
}

size_t LinklocalServices::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.LinklocalServices)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.LinklocalServiceEntryType linklocalServiceEntry = 1;
  total_size += 1UL * this->_internal_linklocalserviceentry_size();
  for (const auto& msg : this->linklocalserviceentry_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData LinklocalServices::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    LinklocalServices::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*LinklocalServices::GetClassData() const { return &_class_data_; }

void LinklocalServices::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<LinklocalServices *>(to)->MergeFrom(
      static_cast<const LinklocalServices &>(from));
}


void LinklocalServices::MergeFrom(const LinklocalServices& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.LinklocalServices)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  linklocalserviceentry_.MergeFrom(from.linklocalserviceentry_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void LinklocalServices::CopyFrom(const LinklocalServices& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.LinklocalServices)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LinklocalServices::IsInitialized() const {
  return true;
}

void LinklocalServices::InternalSwap(LinklocalServices* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  linklocalserviceentry_.InternalSwap(&other->linklocalserviceentry_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LinklocalServices::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_ssd_2dgit_2ejuniper_2enet_2fcontrail_2fcn2_2fcontrail_2fpkg_2fapis_2fcore_2fv1alpha1_2fgenerated_2eproto_getter, &descriptor_table_ssd_2dgit_2ejuniper_2enet_2fcontrail_2fcn2_2fcontrail_2fpkg_2fapis_2fcore_2fv1alpha1_2fgenerated_2eproto_once,
      file_level_metadata_ssd_2dgit_2ejuniper_2enet_2fcontrail_2fcn2_2fcontrail_2fpkg_2fapis_2fcore_2fv1alpha1_2fgenerated_2eproto[72]);
}

// ===================================================================

class MACAddresses::_Internal {
 public:
};

MACAddresses::MACAddresses(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  macaddress_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.MACAddresses)
}
MACAddresses::MACAddresses(const MACAddresses& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      macaddress_(from.macaddress_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.MACAddresses)
}

inline void MACAddresses::SharedCtor() {
}

MACAddresses::~MACAddresses() {
  // @@protoc_insertion_point(destructor:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.MACAddresses)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void MACAddresses::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void MACAddresses::ArenaDtor(void* object) {
  MACAddresses* _this = reinterpret_cast< MACAddresses* >(object);
  (void)_this;
}
void MACAddresses::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MACAddresses::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void MACAddresses::Clear() {
// @@protoc_insertion_point(message_clear_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.MACAddresses)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  macaddress_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MACAddresses::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated string macAddress = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_macaddress();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            #ifndef NDEBUG
            ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.MACAddresses.macAddress");
            #endif  // !NDEBUG
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MACAddresses::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.MACAddresses)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string macAddress = 1;
  for (int i = 0, n = this->_internal_macaddress_size(); i < n; i++) {
    const auto& s = this->_internal_macaddress(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.MACAddresses.macAddress");
    target = stream->WriteString(1, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.MACAddresses)
  return target;
}

size_t MACAddresses::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.MACAddresses)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string macAddress = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(macaddress_.size());
  for (int i = 0, n = macaddress_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      macaddress_.Get(i));
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MACAddresses::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    MACAddresses::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MACAddresses::GetClassData() const { return &_class_data_; }

void MACAddresses::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<MACAddresses *>(to)->MergeFrom(
      static_cast<const MACAddresses &>(from));
}


void MACAddresses::MergeFrom(const MACAddresses& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.MACAddresses)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  macaddress_.MergeFrom(from.macaddress_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MACAddresses::CopyFrom(const MACAddresses& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.MACAddresses)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MACAddresses::IsInitialized() const {
  return true;
}

void MACAddresses::InternalSwap(MACAddresses* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  macaddress_.InternalSwap(&other->macaddress_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MACAddresses::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_ssd_2dgit_2ejuniper_2enet_2fcontrail_2fcn2_2fcontrail_2fpkg_2fapis_2fcore_2fv1alpha1_2fgenerated_2eproto_getter, &descriptor_table_ssd_2dgit_2ejuniper_2enet_2fcontrail_2fcn2_2fcontrail_2fpkg_2fapis_2fcore_2fv1alpha1_2fgenerated_2eproto_once,
      file_level_metadata_ssd_2dgit_2ejuniper_2enet_2fcontrail_2fcn2_2fcontrail_2fpkg_2fapis_2fcore_2fv1alpha1_2fgenerated_2eproto[73]);
}

// ===================================================================

class PolicyBasedForwardingRule::_Internal {
 public:
  using HasBits = decltype(std::declval<PolicyBasedForwardingRule>()._has_bits_);
  static void set_has_direction(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

PolicyBasedForwardingRule::PolicyBasedForwardingRule(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.PolicyBasedForwardingRule)
}
PolicyBasedForwardingRule::PolicyBasedForwardingRule(const PolicyBasedForwardingRule& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  direction_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_direction()) {
    direction_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_direction(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.PolicyBasedForwardingRule)
}

inline void PolicyBasedForwardingRule::SharedCtor() {
direction_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

PolicyBasedForwardingRule::~PolicyBasedForwardingRule() {
  // @@protoc_insertion_point(destructor:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.PolicyBasedForwardingRule)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void PolicyBasedForwardingRule::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  direction_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void PolicyBasedForwardingRule::ArenaDtor(void* object) {
  PolicyBasedForwardingRule* _this = reinterpret_cast< PolicyBasedForwardingRule* >(object);
  (void)_this;
}
void PolicyBasedForwardingRule::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PolicyBasedForwardingRule::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PolicyBasedForwardingRule::Clear() {
// @@protoc_insertion_point(message_clear_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.PolicyBasedForwardingRule)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    direction_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PolicyBasedForwardingRule::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string direction = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_direction();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.PolicyBasedForwardingRule.direction");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PolicyBasedForwardingRule::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.PolicyBasedForwardingRule)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string direction = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_direction().data(), static_cast<int>(this->_internal_direction().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.PolicyBasedForwardingRule.direction");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_direction(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.PolicyBasedForwardingRule)
  return target;
}

size_t PolicyBasedForwardingRule::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.PolicyBasedForwardingRule)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string direction = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_direction());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PolicyBasedForwardingRule::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    PolicyBasedForwardingRule::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PolicyBasedForwardingRule::GetClassData() const { return &_class_data_; }

void PolicyBasedForwardingRule::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<PolicyBasedForwardingRule *>(to)->MergeFrom(
      static_cast<const PolicyBasedForwardingRule &>(from));
}


void PolicyBasedForwardingRule::MergeFrom(const PolicyBasedForwardingRule& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.PolicyBasedForwardingRule)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_direction()) {
    _internal_set_direction(from._internal_direction());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PolicyBasedForwardingRule::CopyFrom(const PolicyBasedForwardingRule& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.PolicyBasedForwardingRule)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PolicyBasedForwardingRule::IsInitialized() const {
  return true;
}

void PolicyBasedForwardingRule::InternalSwap(PolicyBasedForwardingRule* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &direction_, GetArenaForAllocation(),
      &other->direction_, other->GetArenaForAllocation()
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata PolicyBasedForwardingRule::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_ssd_2dgit_2ejuniper_2enet_2fcontrail_2fcn2_2fcontrail_2fpkg_2fapis_2fcore_2fv1alpha1_2fgenerated_2eproto_getter, &descriptor_table_ssd_2dgit_2ejuniper_2enet_2fcontrail_2fcn2_2fcontrail_2fpkg_2fapis_2fcore_2fv1alpha1_2fgenerated_2eproto_once,
      file_level_metadata_ssd_2dgit_2ejuniper_2enet_2fcontrail_2fcn2_2fcontrail_2fpkg_2fapis_2fcore_2fv1alpha1_2fgenerated_2eproto[74]);
}

// ===================================================================

class PortRange::_Internal {
 public:
  using HasBits = decltype(std::declval<PortRange>()._has_bits_);
  static void set_has_startport(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_endport(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

PortRange::PortRange(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.PortRange)
}
PortRange::PortRange(const PortRange& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&startport_, &from.startport_,
    static_cast<size_t>(reinterpret_cast<char*>(&endport_) -
    reinterpret_cast<char*>(&startport_)) + sizeof(endport_));
  // @@protoc_insertion_point(copy_constructor:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.PortRange)
}

inline void PortRange::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&startport_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&endport_) -
    reinterpret_cast<char*>(&startport_)) + sizeof(endport_));
}

PortRange::~PortRange() {
  // @@protoc_insertion_point(destructor:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.PortRange)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void PortRange::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void PortRange::ArenaDtor(void* object) {
  PortRange* _this = reinterpret_cast< PortRange* >(object);
  (void)_this;
}
void PortRange::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PortRange::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PortRange::Clear() {
// @@protoc_insertion_point(message_clear_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.PortRange)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&startport_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&endport_) -
        reinterpret_cast<char*>(&startport_)) + sizeof(endport_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PortRange::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 startPort = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_startport(&has_bits);
          startport_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 endPort = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_endport(&has_bits);
          endport_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PortRange::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.PortRange)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 startPort = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_startport(), target);
  }

  // optional int32 endPort = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_endport(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.PortRange)
  return target;
}

size_t PortRange::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.PortRange)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional int32 startPort = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_startport());
    }

    // optional int32 endPort = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_endport());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PortRange::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    PortRange::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PortRange::GetClassData() const { return &_class_data_; }

void PortRange::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<PortRange *>(to)->MergeFrom(
      static_cast<const PortRange &>(from));
}


void PortRange::MergeFrom(const PortRange& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.PortRange)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      startport_ = from.startport_;
    }
    if (cached_has_bits & 0x00000002u) {
      endport_ = from.endport_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PortRange::CopyFrom(const PortRange& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.PortRange)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PortRange::IsInitialized() const {
  return true;
}

void PortRange::InternalSwap(PortRange* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PortRange, endport_)
      + sizeof(PortRange::endport_)
      - PROTOBUF_FIELD_OFFSET(PortRange, startport_)>(
          reinterpret_cast<char*>(&startport_),
          reinterpret_cast<char*>(&other->startport_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PortRange::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_ssd_2dgit_2ejuniper_2enet_2fcontrail_2fcn2_2fcontrail_2fpkg_2fapis_2fcore_2fv1alpha1_2fgenerated_2eproto_getter, &descriptor_table_ssd_2dgit_2ejuniper_2enet_2fcontrail_2fcn2_2fcontrail_2fpkg_2fapis_2fcore_2fv1alpha1_2fgenerated_2eproto_once,
      file_level_metadata_ssd_2dgit_2ejuniper_2enet_2fcontrail_2fcn2_2fcontrail_2fpkg_2fapis_2fcore_2fv1alpha1_2fgenerated_2eproto[75]);
}

// ===================================================================

class PortTranslationPool::_Internal {
 public:
  using HasBits = decltype(std::declval<PortTranslationPool>()._has_bits_);
  static void set_has_protocol(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::PortRange& portrange(const PortTranslationPool* msg);
  static void set_has_portrange(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_portcount(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::PortRange&
PortTranslationPool::_Internal::portrange(const PortTranslationPool* msg) {
  return *msg->portrange_;
}
PortTranslationPool::PortTranslationPool(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.PortTranslationPool)
}
PortTranslationPool::PortTranslationPool(const PortTranslationPool& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  protocol_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_protocol()) {
    protocol_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_protocol(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_portrange()) {
    portrange_ = new ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::PortRange(*from.portrange_);
  } else {
    portrange_ = nullptr;
  }
  portcount_ = from.portcount_;
  // @@protoc_insertion_point(copy_constructor:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.PortTranslationPool)
}

inline void PortTranslationPool::SharedCtor() {
protocol_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&portrange_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&portcount_) -
    reinterpret_cast<char*>(&portrange_)) + sizeof(portcount_));
}

PortTranslationPool::~PortTranslationPool() {
  // @@protoc_insertion_point(destructor:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.PortTranslationPool)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void PortTranslationPool::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  protocol_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete portrange_;
}

void PortTranslationPool::ArenaDtor(void* object) {
  PortTranslationPool* _this = reinterpret_cast< PortTranslationPool* >(object);
  (void)_this;
}
void PortTranslationPool::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PortTranslationPool::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PortTranslationPool::Clear() {
// @@protoc_insertion_point(message_clear_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.PortTranslationPool)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      protocol_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(portrange_ != nullptr);
      portrange_->Clear();
    }
  }
  portcount_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PortTranslationPool::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string protocol = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_protocol();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.PortTranslationPool.protocol");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.PortRange portRange = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_portrange(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 portCount = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_portcount(&has_bits);
          portcount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PortTranslationPool::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.PortTranslationPool)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string protocol = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_protocol().data(), static_cast<int>(this->_internal_protocol().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.PortTranslationPool.protocol");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_protocol(), target);
  }

  // optional .ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.PortRange portRange = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::portrange(this), target, stream);
  }

  // optional int32 portCount = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_portcount(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.PortTranslationPool)
  return target;
}

size_t PortTranslationPool::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.PortTranslationPool)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string protocol = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_protocol());
    }

    // optional .ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.PortRange portRange = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *portrange_);
    }

    // optional int32 portCount = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_portcount());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PortTranslationPool::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    PortTranslationPool::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PortTranslationPool::GetClassData() const { return &_class_data_; }

void PortTranslationPool::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<PortTranslationPool *>(to)->MergeFrom(
      static_cast<const PortTranslationPool &>(from));
}


void PortTranslationPool::MergeFrom(const PortTranslationPool& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.PortTranslationPool)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_protocol(from._internal_protocol());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_portrange()->::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::PortRange::MergeFrom(from._internal_portrange());
    }
    if (cached_has_bits & 0x00000004u) {
      portcount_ = from.portcount_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PortTranslationPool::CopyFrom(const PortTranslationPool& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.PortTranslationPool)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PortTranslationPool::IsInitialized() const {
  return true;
}

void PortTranslationPool::InternalSwap(PortTranslationPool* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &protocol_, GetArenaForAllocation(),
      &other->protocol_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PortTranslationPool, portcount_)
      + sizeof(PortTranslationPool::portcount_)
      - PROTOBUF_FIELD_OFFSET(PortTranslationPool, portrange_)>(
          reinterpret_cast<char*>(&portrange_),
          reinterpret_cast<char*>(&other->portrange_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PortTranslationPool::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_ssd_2dgit_2ejuniper_2enet_2fcontrail_2fcn2_2fcontrail_2fpkg_2fapis_2fcore_2fv1alpha1_2fgenerated_2eproto_getter, &descriptor_table_ssd_2dgit_2ejuniper_2enet_2fcontrail_2fcn2_2fcontrail_2fpkg_2fapis_2fcore_2fv1alpha1_2fgenerated_2eproto_once,
      file_level_metadata_ssd_2dgit_2ejuniper_2enet_2fcontrail_2fcn2_2fcontrail_2fpkg_2fapis_2fcore_2fv1alpha1_2fgenerated_2eproto[76]);
}

// ===================================================================

class PortTranslationPools::_Internal {
 public:
};

PortTranslationPools::PortTranslationPools(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  pools_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.PortTranslationPools)
}
PortTranslationPools::PortTranslationPools(const PortTranslationPools& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      pools_(from.pools_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.PortTranslationPools)
}

inline void PortTranslationPools::SharedCtor() {
}

PortTranslationPools::~PortTranslationPools() {
  // @@protoc_insertion_point(destructor:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.PortTranslationPools)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void PortTranslationPools::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void PortTranslationPools::ArenaDtor(void* object) {
  PortTranslationPools* _this = reinterpret_cast< PortTranslationPools* >(object);
  (void)_this;
}
void PortTranslationPools::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PortTranslationPools::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PortTranslationPools::Clear() {
// @@protoc_insertion_point(message_clear_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.PortTranslationPools)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  pools_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PortTranslationPools::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.PortTranslationPool pools = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_pools(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PortTranslationPools::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.PortTranslationPools)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.PortTranslationPool pools = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_pools_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_pools(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.PortTranslationPools)
  return target;
}

size_t PortTranslationPools::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.PortTranslationPools)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.PortTranslationPool pools = 1;
  total_size += 1UL * this->_internal_pools_size();
  for (const auto& msg : this->pools_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PortTranslationPools::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    PortTranslationPools::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PortTranslationPools::GetClassData() const { return &_class_data_; }

void PortTranslationPools::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<PortTranslationPools *>(to)->MergeFrom(
      static_cast<const PortTranslationPools &>(from));
}


void PortTranslationPools::MergeFrom(const PortTranslationPools& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.PortTranslationPools)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  pools_.MergeFrom(from.pools_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PortTranslationPools::CopyFrom(const PortTranslationPools& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.PortTranslationPools)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PortTranslationPools::IsInitialized() const {
  return true;
}

void PortTranslationPools::InternalSwap(PortTranslationPools* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  pools_.InternalSwap(&other->pools_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PortTranslationPools::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_ssd_2dgit_2ejuniper_2enet_2fcontrail_2fcn2_2fcontrail_2fpkg_2fapis_2fcore_2fv1alpha1_2fgenerated_2eproto_getter, &descriptor_table_ssd_2dgit_2ejuniper_2enet_2fcontrail_2fcn2_2fcontrail_2fpkg_2fapis_2fcore_2fv1alpha1_2fgenerated_2eproto_once,
      file_level_metadata_ssd_2dgit_2ejuniper_2enet_2fcontrail_2fcn2_2fcontrail_2fpkg_2fapis_2fcore_2fv1alpha1_2fgenerated_2eproto[77]);
}

// ===================================================================

class PortType::_Internal {
 public:
  using HasBits = decltype(std::declval<PortType>()._has_bits_);
  static void set_has_startport(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_endport(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

PortType::PortType(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.PortType)
}
PortType::PortType(const PortType& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&startport_, &from.startport_,
    static_cast<size_t>(reinterpret_cast<char*>(&endport_) -
    reinterpret_cast<char*>(&startport_)) + sizeof(endport_));
  // @@protoc_insertion_point(copy_constructor:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.PortType)
}

inline void PortType::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&startport_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&endport_) -
    reinterpret_cast<char*>(&startport_)) + sizeof(endport_));
}

PortType::~PortType() {
  // @@protoc_insertion_point(destructor:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.PortType)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void PortType::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void PortType::ArenaDtor(void* object) {
  PortType* _this = reinterpret_cast< PortType* >(object);
  (void)_this;
}
void PortType::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PortType::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PortType::Clear() {
// @@protoc_insertion_point(message_clear_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.PortType)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&startport_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&endport_) -
        reinterpret_cast<char*>(&startport_)) + sizeof(endport_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PortType::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int64 startPort = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_startport(&has_bits);
          startport_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 endPort = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_endport(&has_bits);
          endport_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PortType::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.PortType)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int64 startPort = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_startport(), target);
  }

  // optional int64 endPort = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_endport(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.PortType)
  return target;
}

size_t PortType::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.PortType)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional int64 startPort = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->_internal_startport());
    }

    // optional int64 endPort = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->_internal_endport());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PortType::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    PortType::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PortType::GetClassData() const { return &_class_data_; }

void PortType::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<PortType *>(to)->MergeFrom(
      static_cast<const PortType &>(from));
}


void PortType::MergeFrom(const PortType& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.PortType)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      startport_ = from.startport_;
    }
    if (cached_has_bits & 0x00000002u) {
      endport_ = from.endport_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PortType::CopyFrom(const PortType& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.PortType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PortType::IsInitialized() const {
  return true;
}

void PortType::InternalSwap(PortType* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PortType, endport_)
      + sizeof(PortType::endport_)
      - PROTOBUF_FIELD_OFFSET(PortType, startport_)>(
          reinterpret_cast<char*>(&startport_),
          reinterpret_cast<char*>(&other->startport_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PortType::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_ssd_2dgit_2ejuniper_2enet_2fcontrail_2fcn2_2fcontrail_2fpkg_2fapis_2fcore_2fv1alpha1_2fgenerated_2eproto_getter, &descriptor_table_ssd_2dgit_2ejuniper_2enet_2fcontrail_2fcn2_2fcontrail_2fpkg_2fapis_2fcore_2fv1alpha1_2fgenerated_2eproto_once,
      file_level_metadata_ssd_2dgit_2ejuniper_2enet_2fcontrail_2fcn2_2fcontrail_2fpkg_2fapis_2fcore_2fv1alpha1_2fgenerated_2eproto[78]);
}

// ===================================================================

class Range::_Internal {
 public:
  using HasBits = decltype(std::declval<Range>()._has_bits_);
  static void set_has_key(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

Range::Range(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  ipranges_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.Range)
}
Range::Range(const Range& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      ipranges_(from.ipranges_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_key()) {
    key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_key(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.Range)
}

inline void Range::SharedCtor() {
key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

Range::~Range() {
  // @@protoc_insertion_point(destructor:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.Range)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Range::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Range::ArenaDtor(void* object) {
  Range* _this = reinterpret_cast< Range* >(object);
  (void)_this;
}
void Range::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Range::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Range::Clear() {
// @@protoc_insertion_point(message_clear_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.Range)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ipranges_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    key_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Range::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string key = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_key();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.Range.key");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.IPRange ipRanges = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_ipranges(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Range::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.Range)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string key = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_key().data(), static_cast<int>(this->_internal_key().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.Range.key");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_key(), target);
  }

  // repeated .ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.IPRange ipRanges = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_ipranges_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_ipranges(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.Range)
  return target;
}

size_t Range::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.Range)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.IPRange ipRanges = 2;
  total_size += 1UL * this->_internal_ipranges_size();
  for (const auto& msg : this->ipranges_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional string key = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_key());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Range::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Range::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Range::GetClassData() const { return &_class_data_; }

void Range::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<Range *>(to)->MergeFrom(
      static_cast<const Range &>(from));
}


void Range::MergeFrom(const Range& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.Range)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  ipranges_.MergeFrom(from.ipranges_);
  if (from._internal_has_key()) {
    _internal_set_key(from._internal_key());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Range::CopyFrom(const Range& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.Range)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Range::IsInitialized() const {
  return true;
}

void Range::InternalSwap(Range* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ipranges_.InternalSwap(&other->ipranges_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &key_, GetArenaForAllocation(),
      &other->key_, other->GetArenaForAllocation()
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata Range::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_ssd_2dgit_2ejuniper_2enet_2fcontrail_2fcn2_2fcontrail_2fpkg_2fapis_2fcore_2fv1alpha1_2fgenerated_2eproto_getter, &descriptor_table_ssd_2dgit_2ejuniper_2enet_2fcontrail_2fcn2_2fcontrail_2fpkg_2fapis_2fcore_2fv1alpha1_2fgenerated_2eproto_once,
      file_level_metadata_ssd_2dgit_2ejuniper_2enet_2fcontrail_2fcn2_2fcontrail_2fpkg_2fapis_2fcore_2fv1alpha1_2fgenerated_2eproto[79]);
}

// ===================================================================

class ReconcilerState::_Internal {
 public:
  using HasBits = decltype(std::declval<ReconcilerState>()._has_bits_);
  static void set_has_state(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_observation(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

ReconcilerState::ReconcilerState(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.ReconcilerState)
}
ReconcilerState::ReconcilerState(const ReconcilerState& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  state_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_state()) {
    state_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_state(), 
      GetArenaForAllocation());
  }
  observation_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_observation()) {
    observation_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_observation(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.ReconcilerState)
}

inline void ReconcilerState::SharedCtor() {
state_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
observation_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

ReconcilerState::~ReconcilerState() {
  // @@protoc_insertion_point(destructor:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.ReconcilerState)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ReconcilerState::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  state_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  observation_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ReconcilerState::ArenaDtor(void* object) {
  ReconcilerState* _this = reinterpret_cast< ReconcilerState* >(object);
  (void)_this;
}
void ReconcilerState::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ReconcilerState::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ReconcilerState::Clear() {
// @@protoc_insertion_point(message_clear_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.ReconcilerState)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      state_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      observation_.ClearNonDefaultToEmpty();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ReconcilerState::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string state = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_state();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.ReconcilerState.state");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string observation = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_observation();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.ReconcilerState.observation");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ReconcilerState::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.ReconcilerState)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string state = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_state().data(), static_cast<int>(this->_internal_state().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.ReconcilerState.state");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_state(), target);
  }

  // optional string observation = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_observation().data(), static_cast<int>(this->_internal_observation().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.ReconcilerState.observation");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_observation(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.ReconcilerState)
  return target;
}

size_t ReconcilerState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.ReconcilerState)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string state = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_state());
    }

    // optional string observation = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_observation());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ReconcilerState::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ReconcilerState::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ReconcilerState::GetClassData() const { return &_class_data_; }

void ReconcilerState::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<ReconcilerState *>(to)->MergeFrom(
      static_cast<const ReconcilerState &>(from));
}


void ReconcilerState::MergeFrom(const ReconcilerState& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.ReconcilerState)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_state(from._internal_state());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_observation(from._internal_observation());
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ReconcilerState::CopyFrom(const ReconcilerState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.ReconcilerState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReconcilerState::IsInitialized() const {
  return true;
}

void ReconcilerState::InternalSwap(ReconcilerState* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &state_, GetArenaForAllocation(),
      &other->state_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &observation_, GetArenaForAllocation(),
      &other->observation_, other->GetArenaForAllocation()
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata ReconcilerState::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_ssd_2dgit_2ejuniper_2enet_2fcontrail_2fcn2_2fcontrail_2fpkg_2fapis_2fcore_2fv1alpha1_2fgenerated_2eproto_getter, &descriptor_table_ssd_2dgit_2ejuniper_2enet_2fcontrail_2fcn2_2fcontrail_2fpkg_2fapis_2fcore_2fv1alpha1_2fgenerated_2eproto_once,
      file_level_metadata_ssd_2dgit_2ejuniper_2enet_2fcontrail_2fcn2_2fcontrail_2fpkg_2fapis_2fcore_2fv1alpha1_2fgenerated_2eproto[80]);
}

// ===================================================================

class ResourceReference::_Internal {
 public:
  using HasBits = decltype(std::declval<ResourceReference>()._has_bits_);
  static const ::k8s::io::api::core::v1::ObjectReference& objectreference(const ResourceReference* msg);
  static void set_has_objectreference(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::ContrailFqName& contrailfqname(const ResourceReference* msg);
  static void set_has_contrailfqname(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::k8s::io::api::core::v1::ObjectReference&
ResourceReference::_Internal::objectreference(const ResourceReference* msg) {
  return *msg->objectreference_;
}
const ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::ContrailFqName&
ResourceReference::_Internal::contrailfqname(const ResourceReference* msg) {
  return *msg->contrailfqname_;
}
void ResourceReference::clear_objectreference() {
  if (objectreference_ != nullptr) objectreference_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
ResourceReference::ResourceReference(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.ResourceReference)
}
ResourceReference::ResourceReference(const ResourceReference& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_objectreference()) {
    objectreference_ = new ::k8s::io::api::core::v1::ObjectReference(*from.objectreference_);
  } else {
    objectreference_ = nullptr;
  }
  if (from._internal_has_contrailfqname()) {
    contrailfqname_ = new ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::ContrailFqName(*from.contrailfqname_);
  } else {
    contrailfqname_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.ResourceReference)
}

inline void ResourceReference::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&objectreference_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&contrailfqname_) -
    reinterpret_cast<char*>(&objectreference_)) + sizeof(contrailfqname_));
}

ResourceReference::~ResourceReference() {
  // @@protoc_insertion_point(destructor:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.ResourceReference)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ResourceReference::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete objectreference_;
  if (this != internal_default_instance()) delete contrailfqname_;
}

void ResourceReference::ArenaDtor(void* object) {
  ResourceReference* _this = reinterpret_cast< ResourceReference* >(object);
  (void)_this;
}
void ResourceReference::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ResourceReference::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ResourceReference::Clear() {
// @@protoc_insertion_point(message_clear_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.ResourceReference)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(objectreference_ != nullptr);
      objectreference_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(contrailfqname_ != nullptr);
      contrailfqname_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ResourceReference::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .k8s.io.api.core.v1.ObjectReference objectReference = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_objectreference(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.ContrailFqName contrailFqName = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_contrailfqname(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ResourceReference::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.ResourceReference)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .k8s.io.api.core.v1.ObjectReference objectReference = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::objectreference(this), target, stream);
  }

  // optional .ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.ContrailFqName contrailFqName = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::contrailfqname(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.ResourceReference)
  return target;
}

size_t ResourceReference::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.ResourceReference)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .k8s.io.api.core.v1.ObjectReference objectReference = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *objectreference_);
    }

    // optional .ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.ContrailFqName contrailFqName = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *contrailfqname_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ResourceReference::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ResourceReference::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ResourceReference::GetClassData() const { return &_class_data_; }

void ResourceReference::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<ResourceReference *>(to)->MergeFrom(
      static_cast<const ResourceReference &>(from));
}


void ResourceReference::MergeFrom(const ResourceReference& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.ResourceReference)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_objectreference()->::k8s::io::api::core::v1::ObjectReference::MergeFrom(from._internal_objectreference());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_contrailfqname()->::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::ContrailFqName::MergeFrom(from._internal_contrailfqname());
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ResourceReference::CopyFrom(const ResourceReference& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.ResourceReference)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResourceReference::IsInitialized() const {
  return true;
}

void ResourceReference::InternalSwap(ResourceReference* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ResourceReference, contrailfqname_)
      + sizeof(ResourceReference::contrailfqname_)
      - PROTOBUF_FIELD_OFFSET(ResourceReference, objectreference_)>(
          reinterpret_cast<char*>(&objectreference_),
          reinterpret_cast<char*>(&other->objectreference_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ResourceReference::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_ssd_2dgit_2ejuniper_2enet_2fcontrail_2fcn2_2fcontrail_2fpkg_2fapis_2fcore_2fv1alpha1_2fgenerated_2eproto_getter, &descriptor_table_ssd_2dgit_2ejuniper_2enet_2fcontrail_2fcn2_2fcontrail_2fpkg_2fapis_2fcore_2fv1alpha1_2fgenerated_2eproto_once,
      file_level_metadata_ssd_2dgit_2ejuniper_2enet_2fcontrail_2fcn2_2fcontrail_2fpkg_2fapis_2fcore_2fv1alpha1_2fgenerated_2eproto[81]);
}

// ===================================================================

class RouteOriginOverride::_Internal {
 public:
  using HasBits = decltype(std::declval<RouteOriginOverride>()._has_bits_);
  static void set_has_originoverride(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_origin(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

RouteOriginOverride::RouteOriginOverride(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.RouteOriginOverride)
}
RouteOriginOverride::RouteOriginOverride(const RouteOriginOverride& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  origin_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_origin()) {
    origin_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_origin(), 
      GetArenaForAllocation());
  }
  originoverride_ = from.originoverride_;
  // @@protoc_insertion_point(copy_constructor:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.RouteOriginOverride)
}

inline void RouteOriginOverride::SharedCtor() {
origin_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
originoverride_ = false;
}

RouteOriginOverride::~RouteOriginOverride() {
  // @@protoc_insertion_point(destructor:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.RouteOriginOverride)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void RouteOriginOverride::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  origin_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void RouteOriginOverride::ArenaDtor(void* object) {
  RouteOriginOverride* _this = reinterpret_cast< RouteOriginOverride* >(object);
  (void)_this;
}
void RouteOriginOverride::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RouteOriginOverride::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RouteOriginOverride::Clear() {
// @@protoc_insertion_point(message_clear_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.RouteOriginOverride)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    origin_.ClearNonDefaultToEmpty();
  }
  originoverride_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RouteOriginOverride::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bool originOverride = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_originoverride(&has_bits);
          originoverride_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string origin = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_origin();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.RouteOriginOverride.origin");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RouteOriginOverride::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.RouteOriginOverride)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool originOverride = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_originoverride(), target);
  }

  // optional string origin = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_origin().data(), static_cast<int>(this->_internal_origin().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.RouteOriginOverride.origin");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_origin(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.RouteOriginOverride)
  return target;
}

size_t RouteOriginOverride::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.RouteOriginOverride)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string origin = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_origin());
    }

    // optional bool originOverride = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RouteOriginOverride::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    RouteOriginOverride::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RouteOriginOverride::GetClassData() const { return &_class_data_; }

void RouteOriginOverride::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<RouteOriginOverride *>(to)->MergeFrom(
      static_cast<const RouteOriginOverride &>(from));
}


void RouteOriginOverride::MergeFrom(const RouteOriginOverride& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.RouteOriginOverride)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_origin(from._internal_origin());
    }
    if (cached_has_bits & 0x00000002u) {
      originoverride_ = from.originoverride_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RouteOriginOverride::CopyFrom(const RouteOriginOverride& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.RouteOriginOverride)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RouteOriginOverride::IsInitialized() const {
  return true;
}

void RouteOriginOverride::InternalSwap(RouteOriginOverride* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &origin_, GetArenaForAllocation(),
      &other->origin_, other->GetArenaForAllocation()
  );
  swap(originoverride_, other->originoverride_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RouteOriginOverride::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_ssd_2dgit_2ejuniper_2enet_2fcontrail_2fcn2_2fcontrail_2fpkg_2fapis_2fcore_2fv1alpha1_2fgenerated_2eproto_getter, &descriptor_table_ssd_2dgit_2ejuniper_2enet_2fcontrail_2fcn2_2fcontrail_2fpkg_2fapis_2fcore_2fv1alpha1_2fgenerated_2eproto_once,
      file_level_metadata_ssd_2dgit_2ejuniper_2enet_2fcontrail_2fcn2_2fcontrail_2fpkg_2fapis_2fcore_2fv1alpha1_2fgenerated_2eproto[82]);
}

// ===================================================================

class RouteTarget::_Internal {
 public:
  using HasBits = decltype(std::declval<RouteTarget>()._has_bits_);
  static const ::k8s::io::apimachinery::pkg::apis::meta::v1::ObjectMeta& metadata(const RouteTarget* msg);
  static void set_has_metadata(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::RouteTargetSpec& spec(const RouteTarget* msg);
  static void set_has_spec(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::RouteTargetStatus& status(const RouteTarget* msg);
  static void set_has_status(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::k8s::io::apimachinery::pkg::apis::meta::v1::ObjectMeta&
RouteTarget::_Internal::metadata(const RouteTarget* msg) {
  return *msg->metadata_;
}
const ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::RouteTargetSpec&
RouteTarget::_Internal::spec(const RouteTarget* msg) {
  return *msg->spec_;
}
const ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::RouteTargetStatus&
RouteTarget::_Internal::status(const RouteTarget* msg) {
  return *msg->status_;
}
void RouteTarget::clear_metadata() {
  if (metadata_ != nullptr) metadata_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
RouteTarget::RouteTarget(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.RouteTarget)
}
RouteTarget::RouteTarget(const RouteTarget& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_metadata()) {
    metadata_ = new ::k8s::io::apimachinery::pkg::apis::meta::v1::ObjectMeta(*from.metadata_);
  } else {
    metadata_ = nullptr;
  }
  if (from._internal_has_spec()) {
    spec_ = new ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::RouteTargetSpec(*from.spec_);
  } else {
    spec_ = nullptr;
  }
  if (from._internal_has_status()) {
    status_ = new ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::RouteTargetStatus(*from.status_);
  } else {
    status_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.RouteTarget)
}

inline void RouteTarget::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&metadata_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&status_) -
    reinterpret_cast<char*>(&metadata_)) + sizeof(status_));
}

RouteTarget::~RouteTarget() {
  // @@protoc_insertion_point(destructor:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.RouteTarget)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void RouteTarget::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete metadata_;
  if (this != internal_default_instance()) delete spec_;
  if (this != internal_default_instance()) delete status_;
}

void RouteTarget::ArenaDtor(void* object) {
  RouteTarget* _this = reinterpret_cast< RouteTarget* >(object);
  (void)_this;
}
void RouteTarget::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RouteTarget::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RouteTarget::Clear() {
// @@protoc_insertion_point(message_clear_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.RouteTarget)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(metadata_ != nullptr);
      metadata_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(spec_ != nullptr);
      spec_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(status_ != nullptr);
      status_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RouteTarget::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_metadata(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.RouteTargetSpec spec = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_spec(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.RouteTargetStatus status = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RouteTarget::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.RouteTarget)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::metadata(this), target, stream);
  }

  // optional .ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.RouteTargetSpec spec = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::spec(this), target, stream);
  }

  // optional .ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.RouteTargetStatus status = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::status(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.RouteTarget)
  return target;
}

size_t RouteTarget::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.RouteTarget)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *metadata_);
    }

    // optional .ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.RouteTargetSpec spec = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *spec_);
    }

    // optional .ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.RouteTargetStatus status = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *status_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RouteTarget::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    RouteTarget::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RouteTarget::GetClassData() const { return &_class_data_; }

void RouteTarget::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<RouteTarget *>(to)->MergeFrom(
      static_cast<const RouteTarget &>(from));
}


void RouteTarget::MergeFrom(const RouteTarget& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.RouteTarget)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_metadata()->::k8s::io::apimachinery::pkg::apis::meta::v1::ObjectMeta::MergeFrom(from._internal_metadata());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_spec()->::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::RouteTargetSpec::MergeFrom(from._internal_spec());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_status()->::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::RouteTargetStatus::MergeFrom(from._internal_status());
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RouteTarget::CopyFrom(const RouteTarget& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.RouteTarget)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RouteTarget::IsInitialized() const {
  return true;
}

void RouteTarget::InternalSwap(RouteTarget* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RouteTarget, status_)
      + sizeof(RouteTarget::status_)
      - PROTOBUF_FIELD_OFFSET(RouteTarget, metadata_)>(
          reinterpret_cast<char*>(&metadata_),
          reinterpret_cast<char*>(&other->metadata_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RouteTarget::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_ssd_2dgit_2ejuniper_2enet_2fcontrail_2fcn2_2fcontrail_2fpkg_2fapis_2fcore_2fv1alpha1_2fgenerated_2eproto_getter, &descriptor_table_ssd_2dgit_2ejuniper_2enet_2fcontrail_2fcn2_2fcontrail_2fpkg_2fapis_2fcore_2fv1alpha1_2fgenerated_2eproto_once,
      file_level_metadata_ssd_2dgit_2ejuniper_2enet_2fcontrail_2fcn2_2fcontrail_2fpkg_2fapis_2fcore_2fv1alpha1_2fgenerated_2eproto[83]);
}

// ===================================================================

class RouteTargetList::_Internal {
 public:
  using HasBits = decltype(std::declval<RouteTargetList>()._has_bits_);
  static const ::k8s::io::apimachinery::pkg::apis::meta::v1::ListMeta& metadata(const RouteTargetList* msg);
  static void set_has_metadata(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::k8s::io::apimachinery::pkg::apis::meta::v1::ListMeta&
RouteTargetList::_Internal::metadata(const RouteTargetList* msg) {
  return *msg->metadata_;
}
void RouteTargetList::clear_metadata() {
  if (metadata_ != nullptr) metadata_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
RouteTargetList::RouteTargetList(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  items_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.RouteTargetList)
}
RouteTargetList::RouteTargetList(const RouteTargetList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      items_(from.items_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_metadata()) {
    metadata_ = new ::k8s::io::apimachinery::pkg::apis::meta::v1::ListMeta(*from.metadata_);
  } else {
    metadata_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.RouteTargetList)
}

inline void RouteTargetList::SharedCtor() {
metadata_ = nullptr;
}

RouteTargetList::~RouteTargetList() {
  // @@protoc_insertion_point(destructor:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.RouteTargetList)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void RouteTargetList::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete metadata_;
}

void RouteTargetList::ArenaDtor(void* object) {
  RouteTargetList* _this = reinterpret_cast< RouteTargetList* >(object);
  (void)_this;
}
void RouteTargetList::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RouteTargetList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RouteTargetList::Clear() {
// @@protoc_insertion_point(message_clear_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.RouteTargetList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  items_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(metadata_ != nullptr);
    metadata_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RouteTargetList::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_metadata(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.RouteTarget items = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_items(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RouteTargetList::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.RouteTargetList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::metadata(this), target, stream);
  }

  // repeated .ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.RouteTarget items = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_items_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_items(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.RouteTargetList)
  return target;
}

size_t RouteTargetList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.RouteTargetList)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.RouteTarget items = 2;
  total_size += 1UL * this->_internal_items_size();
  for (const auto& msg : this->items_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional .k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *metadata_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RouteTargetList::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    RouteTargetList::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RouteTargetList::GetClassData() const { return &_class_data_; }

void RouteTargetList::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<RouteTargetList *>(to)->MergeFrom(
      static_cast<const RouteTargetList &>(from));
}


void RouteTargetList::MergeFrom(const RouteTargetList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.RouteTargetList)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  items_.MergeFrom(from.items_);
  if (from._internal_has_metadata()) {
    _internal_mutable_metadata()->::k8s::io::apimachinery::pkg::apis::meta::v1::ListMeta::MergeFrom(from._internal_metadata());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RouteTargetList::CopyFrom(const RouteTargetList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.RouteTargetList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RouteTargetList::IsInitialized() const {
  return true;
}

void RouteTargetList::InternalSwap(RouteTargetList* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  items_.InternalSwap(&other->items_);
  swap(metadata_, other->metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RouteTargetList::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_ssd_2dgit_2ejuniper_2enet_2fcontrail_2fcn2_2fcontrail_2fpkg_2fapis_2fcore_2fv1alpha1_2fgenerated_2eproto_getter, &descriptor_table_ssd_2dgit_2ejuniper_2enet_2fcontrail_2fcn2_2fcontrail_2fpkg_2fapis_2fcore_2fv1alpha1_2fgenerated_2eproto_once,
      file_level_metadata_ssd_2dgit_2ejuniper_2enet_2fcontrail_2fcn2_2fcontrail_2fpkg_2fapis_2fcore_2fv1alpha1_2fgenerated_2eproto[84]);
}

// ===================================================================

class RouteTargetReference::_Internal {
 public:
  using HasBits = decltype(std::declval<RouteTargetReference>()._has_bits_);
  static const ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::ResourceReference& resourcereference(const RouteTargetReference* msg);
  static void set_has_resourcereference(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::RouteTargetReferenceAttributes& attributes(const RouteTargetReference* msg);
  static void set_has_attributes(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::ResourceReference&
RouteTargetReference::_Internal::resourcereference(const RouteTargetReference* msg) {
  return *msg->resourcereference_;
}
const ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::RouteTargetReferenceAttributes&
RouteTargetReference::_Internal::attributes(const RouteTargetReference* msg) {
  return *msg->attributes_;
}
RouteTargetReference::RouteTargetReference(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.RouteTargetReference)
}
RouteTargetReference::RouteTargetReference(const RouteTargetReference& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_resourcereference()) {
    resourcereference_ = new ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::ResourceReference(*from.resourcereference_);
  } else {
    resourcereference_ = nullptr;
  }
  if (from._internal_has_attributes()) {
    attributes_ = new ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::RouteTargetReferenceAttributes(*from.attributes_);
  } else {
    attributes_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.RouteTargetReference)
}

inline void RouteTargetReference::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&resourcereference_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&attributes_) -
    reinterpret_cast<char*>(&resourcereference_)) + sizeof(attributes_));
}

RouteTargetReference::~RouteTargetReference() {
  // @@protoc_insertion_point(destructor:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.RouteTargetReference)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void RouteTargetReference::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete resourcereference_;
  if (this != internal_default_instance()) delete attributes_;
}

void RouteTargetReference::ArenaDtor(void* object) {
  RouteTargetReference* _this = reinterpret_cast< RouteTargetReference* >(object);
  (void)_this;
}
void RouteTargetReference::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RouteTargetReference::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RouteTargetReference::Clear() {
// @@protoc_insertion_point(message_clear_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.RouteTargetReference)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(resourcereference_ != nullptr);
      resourcereference_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(attributes_ != nullptr);
      attributes_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RouteTargetReference::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.ResourceReference resourceReference = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_resourcereference(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.RouteTargetReferenceAttributes attributes = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_attributes(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RouteTargetReference::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.RouteTargetReference)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.ResourceReference resourceReference = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::resourcereference(this), target, stream);
  }

  // optional .ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.RouteTargetReferenceAttributes attributes = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::attributes(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.RouteTargetReference)
  return target;
}

size_t RouteTargetReference::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.RouteTargetReference)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.ResourceReference resourceReference = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *resourcereference_);
    }

    // optional .ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.RouteTargetReferenceAttributes attributes = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *attributes_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RouteTargetReference::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    RouteTargetReference::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RouteTargetReference::GetClassData() const { return &_class_data_; }

void RouteTargetReference::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<RouteTargetReference *>(to)->MergeFrom(
      static_cast<const RouteTargetReference &>(from));
}


void RouteTargetReference::MergeFrom(const RouteTargetReference& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.RouteTargetReference)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_resourcereference()->::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::ResourceReference::MergeFrom(from._internal_resourcereference());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_attributes()->::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::RouteTargetReferenceAttributes::MergeFrom(from._internal_attributes());
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RouteTargetReference::CopyFrom(const RouteTargetReference& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.RouteTargetReference)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RouteTargetReference::IsInitialized() const {
  return true;
}

void RouteTargetReference::InternalSwap(RouteTargetReference* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RouteTargetReference, attributes_)
      + sizeof(RouteTargetReference::attributes_)
      - PROTOBUF_FIELD_OFFSET(RouteTargetReference, resourcereference_)>(
          reinterpret_cast<char*>(&resourcereference_),
          reinterpret_cast<char*>(&other->resourcereference_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RouteTargetReference::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_ssd_2dgit_2ejuniper_2enet_2fcontrail_2fcn2_2fcontrail_2fpkg_2fapis_2fcore_2fv1alpha1_2fgenerated_2eproto_getter, &descriptor_table_ssd_2dgit_2ejuniper_2enet_2fcontrail_2fcn2_2fcontrail_2fpkg_2fapis_2fcore_2fv1alpha1_2fgenerated_2eproto_once,
      file_level_metadata_ssd_2dgit_2ejuniper_2enet_2fcontrail_2fcn2_2fcontrail_2fpkg_2fapis_2fcore_2fv1alpha1_2fgenerated_2eproto[85]);
}

// ===================================================================

class RouteTargetReferenceAttributes::_Internal {
 public:
  using HasBits = decltype(std::declval<RouteTargetReferenceAttributes>()._has_bits_);
  static void set_has_importexport(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

RouteTargetReferenceAttributes::RouteTargetReferenceAttributes(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.RouteTargetReferenceAttributes)
}
RouteTargetReferenceAttributes::RouteTargetReferenceAttributes(const RouteTargetReferenceAttributes& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  importexport_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_importexport()) {
    importexport_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_importexport(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.RouteTargetReferenceAttributes)
}

inline void RouteTargetReferenceAttributes::SharedCtor() {
importexport_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

RouteTargetReferenceAttributes::~RouteTargetReferenceAttributes() {
  // @@protoc_insertion_point(destructor:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.RouteTargetReferenceAttributes)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void RouteTargetReferenceAttributes::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  importexport_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void RouteTargetReferenceAttributes::ArenaDtor(void* object) {
  RouteTargetReferenceAttributes* _this = reinterpret_cast< RouteTargetReferenceAttributes* >(object);
  (void)_this;
}
void RouteTargetReferenceAttributes::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RouteTargetReferenceAttributes::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RouteTargetReferenceAttributes::Clear() {
// @@protoc_insertion_point(message_clear_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.RouteTargetReferenceAttributes)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    importexport_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RouteTargetReferenceAttributes::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string importExport = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_importexport();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.RouteTargetReferenceAttributes.importExport");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RouteTargetReferenceAttributes::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.RouteTargetReferenceAttributes)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string importExport = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_importexport().data(), static_cast<int>(this->_internal_importexport().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.RouteTargetReferenceAttributes.importExport");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_importexport(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.RouteTargetReferenceAttributes)
  return target;
}

size_t RouteTargetReferenceAttributes::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.RouteTargetReferenceAttributes)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string importExport = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_importexport());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RouteTargetReferenceAttributes::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    RouteTargetReferenceAttributes::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RouteTargetReferenceAttributes::GetClassData() const { return &_class_data_; }

void RouteTargetReferenceAttributes::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<RouteTargetReferenceAttributes *>(to)->MergeFrom(
      static_cast<const RouteTargetReferenceAttributes &>(from));
}


void RouteTargetReferenceAttributes::MergeFrom(const RouteTargetReferenceAttributes& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.RouteTargetReferenceAttributes)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_importexport()) {
    _internal_set_importexport(from._internal_importexport());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RouteTargetReferenceAttributes::CopyFrom(const RouteTargetReferenceAttributes& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.RouteTargetReferenceAttributes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RouteTargetReferenceAttributes::IsInitialized() const {
  return true;
}

void RouteTargetReferenceAttributes::InternalSwap(RouteTargetReferenceAttributes* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &importexport_, GetArenaForAllocation(),
      &other->importexport_, other->GetArenaForAllocation()
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata RouteTargetReferenceAttributes::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_ssd_2dgit_2ejuniper_2enet_2fcontrail_2fcn2_2fcontrail_2fpkg_2fapis_2fcore_2fv1alpha1_2fgenerated_2eproto_getter, &descriptor_table_ssd_2dgit_2ejuniper_2enet_2fcontrail_2fcn2_2fcontrail_2fpkg_2fapis_2fcore_2fv1alpha1_2fgenerated_2eproto_once,
      file_level_metadata_ssd_2dgit_2ejuniper_2enet_2fcontrail_2fcn2_2fcontrail_2fpkg_2fapis_2fcore_2fv1alpha1_2fgenerated_2eproto[86]);
}

// ===================================================================

class RouteTargetSpec::_Internal {
 public:
  using HasBits = decltype(std::declval<RouteTargetSpec>()._has_bits_);
  static const ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::CommonSpec& commonspec(const RouteTargetSpec* msg);
  static void set_has_commonspec(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::CommonSpec&
RouteTargetSpec::_Internal::commonspec(const RouteTargetSpec* msg) {
  return *msg->commonspec_;
}
RouteTargetSpec::RouteTargetSpec(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.RouteTargetSpec)
}
RouteTargetSpec::RouteTargetSpec(const RouteTargetSpec& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_commonspec()) {
    commonspec_ = new ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::CommonSpec(*from.commonspec_);
  } else {
    commonspec_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.RouteTargetSpec)
}

inline void RouteTargetSpec::SharedCtor() {
commonspec_ = nullptr;
}

RouteTargetSpec::~RouteTargetSpec() {
  // @@protoc_insertion_point(destructor:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.RouteTargetSpec)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void RouteTargetSpec::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete commonspec_;
}

void RouteTargetSpec::ArenaDtor(void* object) {
  RouteTargetSpec* _this = reinterpret_cast< RouteTargetSpec* >(object);
  (void)_this;
}
void RouteTargetSpec::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RouteTargetSpec::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RouteTargetSpec::Clear() {
// @@protoc_insertion_point(message_clear_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.RouteTargetSpec)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(commonspec_ != nullptr);
    commonspec_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RouteTargetSpec::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.CommonSpec commonSpec = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_commonspec(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RouteTargetSpec::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.RouteTargetSpec)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.CommonSpec commonSpec = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::commonspec(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.RouteTargetSpec)
  return target;
}

size_t RouteTargetSpec::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.RouteTargetSpec)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.CommonSpec commonSpec = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *commonspec_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RouteTargetSpec::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    RouteTargetSpec::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RouteTargetSpec::GetClassData() const { return &_class_data_; }

void RouteTargetSpec::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<RouteTargetSpec *>(to)->MergeFrom(
      static_cast<const RouteTargetSpec &>(from));
}


void RouteTargetSpec::MergeFrom(const RouteTargetSpec& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.RouteTargetSpec)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_commonspec()) {
    _internal_mutable_commonspec()->::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::CommonSpec::MergeFrom(from._internal_commonspec());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RouteTargetSpec::CopyFrom(const RouteTargetSpec& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.RouteTargetSpec)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RouteTargetSpec::IsInitialized() const {
  return true;
}

void RouteTargetSpec::InternalSwap(RouteTargetSpec* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(commonspec_, other->commonspec_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RouteTargetSpec::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_ssd_2dgit_2ejuniper_2enet_2fcontrail_2fcn2_2fcontrail_2fpkg_2fapis_2fcore_2fv1alpha1_2fgenerated_2eproto_getter, &descriptor_table_ssd_2dgit_2ejuniper_2enet_2fcontrail_2fcn2_2fcontrail_2fpkg_2fapis_2fcore_2fv1alpha1_2fgenerated_2eproto_once,
      file_level_metadata_ssd_2dgit_2ejuniper_2enet_2fcontrail_2fcn2_2fcontrail_2fpkg_2fapis_2fcore_2fv1alpha1_2fgenerated_2eproto[87]);
}

// ===================================================================

class RouteTargetStatus::_Internal {
 public:
  using HasBits = decltype(std::declval<RouteTargetStatus>()._has_bits_);
  static const ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::CommonStatus& commonstatus(const RouteTargetStatus* msg);
  static void set_has_commonstatus(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::CommonStatus&
RouteTargetStatus::_Internal::commonstatus(const RouteTargetStatus* msg) {
  return *msg->commonstatus_;
}
RouteTargetStatus::RouteTargetStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.RouteTargetStatus)
}
RouteTargetStatus::RouteTargetStatus(const RouteTargetStatus& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_commonstatus()) {
    commonstatus_ = new ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::CommonStatus(*from.commonstatus_);
  } else {
    commonstatus_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.RouteTargetStatus)
}

inline void RouteTargetStatus::SharedCtor() {
commonstatus_ = nullptr;
}

RouteTargetStatus::~RouteTargetStatus() {
  // @@protoc_insertion_point(destructor:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.RouteTargetStatus)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void RouteTargetStatus::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete commonstatus_;
}

void RouteTargetStatus::ArenaDtor(void* object) {
  RouteTargetStatus* _this = reinterpret_cast< RouteTargetStatus* >(object);
  (void)_this;
}
void RouteTargetStatus::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RouteTargetStatus::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RouteTargetStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.RouteTargetStatus)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(commonstatus_ != nullptr);
    commonstatus_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RouteTargetStatus::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.CommonStatus commonStatus = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_commonstatus(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RouteTargetStatus::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.RouteTargetStatus)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.CommonStatus commonStatus = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::commonstatus(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.RouteTargetStatus)
  return target;
}

size_t RouteTargetStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.RouteTargetStatus)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.CommonStatus commonStatus = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *commonstatus_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RouteTargetStatus::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    RouteTargetStatus::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RouteTargetStatus::GetClassData() const { return &_class_data_; }

void RouteTargetStatus::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<RouteTargetStatus *>(to)->MergeFrom(
      static_cast<const RouteTargetStatus &>(from));
}


void RouteTargetStatus::MergeFrom(const RouteTargetStatus& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.RouteTargetStatus)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_commonstatus()) {
    _internal_mutable_commonstatus()->::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::CommonStatus::MergeFrom(from._internal_commonstatus());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RouteTargetStatus::CopyFrom(const RouteTargetStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.RouteTargetStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RouteTargetStatus::IsInitialized() const {
  return true;
}

void RouteTargetStatus::InternalSwap(RouteTargetStatus* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(commonstatus_, other->commonstatus_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RouteTargetStatus::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_ssd_2dgit_2ejuniper_2enet_2fcontrail_2fcn2_2fcontrail_2fpkg_2fapis_2fcore_2fv1alpha1_2fgenerated_2eproto_getter, &descriptor_table_ssd_2dgit_2ejuniper_2enet_2fcontrail_2fcn2_2fcontrail_2fpkg_2fapis_2fcore_2fv1alpha1_2fgenerated_2eproto_once,
      file_level_metadata_ssd_2dgit_2ejuniper_2enet_2fcontrail_2fcn2_2fcontrail_2fpkg_2fapis_2fcore_2fv1alpha1_2fgenerated_2eproto[88]);
}

// ===================================================================

class RoutingInstance::_Internal {
 public:
  using HasBits = decltype(std::declval<RoutingInstance>()._has_bits_);
  static const ::k8s::io::apimachinery::pkg::apis::meta::v1::ObjectMeta& metadata(const RoutingInstance* msg);
  static void set_has_metadata(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::RoutingInstanceSpec& spec(const RoutingInstance* msg);
  static void set_has_spec(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::RoutingInstanceStatus& status(const RoutingInstance* msg);
  static void set_has_status(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::k8s::io::apimachinery::pkg::apis::meta::v1::ObjectMeta&
RoutingInstance::_Internal::metadata(const RoutingInstance* msg) {
  return *msg->metadata_;
}
const ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::RoutingInstanceSpec&
RoutingInstance::_Internal::spec(const RoutingInstance* msg) {
  return *msg->spec_;
}
const ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::RoutingInstanceStatus&
RoutingInstance::_Internal::status(const RoutingInstance* msg) {
  return *msg->status_;
}
void RoutingInstance::clear_metadata() {
  if (metadata_ != nullptr) metadata_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
RoutingInstance::RoutingInstance(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.RoutingInstance)
}
RoutingInstance::RoutingInstance(const RoutingInstance& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_metadata()) {
    metadata_ = new ::k8s::io::apimachinery::pkg::apis::meta::v1::ObjectMeta(*from.metadata_);
  } else {
    metadata_ = nullptr;
  }
  if (from._internal_has_spec()) {
    spec_ = new ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::RoutingInstanceSpec(*from.spec_);
  } else {
    spec_ = nullptr;
  }
  if (from._internal_has_status()) {
    status_ = new ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::RoutingInstanceStatus(*from.status_);
  } else {
    status_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.RoutingInstance)
}

inline void RoutingInstance::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&metadata_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&status_) -
    reinterpret_cast<char*>(&metadata_)) + sizeof(status_));
}

RoutingInstance::~RoutingInstance() {
  // @@protoc_insertion_point(destructor:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.RoutingInstance)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void RoutingInstance::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete metadata_;
  if (this != internal_default_instance()) delete spec_;
  if (this != internal_default_instance()) delete status_;
}

void RoutingInstance::ArenaDtor(void* object) {
  RoutingInstance* _this = reinterpret_cast< RoutingInstance* >(object);
  (void)_this;
}
void RoutingInstance::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RoutingInstance::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RoutingInstance::Clear() {
// @@protoc_insertion_point(message_clear_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.RoutingInstance)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(metadata_ != nullptr);
      metadata_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(spec_ != nullptr);
      spec_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(status_ != nullptr);
      status_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RoutingInstance::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_metadata(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.RoutingInstanceSpec spec = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_spec(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.RoutingInstanceStatus status = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RoutingInstance::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.RoutingInstance)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::metadata(this), target, stream);
  }

  // optional .ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.RoutingInstanceSpec spec = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::spec(this), target, stream);
  }

  // optional .ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.RoutingInstanceStatus status = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::status(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.RoutingInstance)
  return target;
}

size_t RoutingInstance::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.RoutingInstance)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *metadata_);
    }

    // optional .ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.RoutingInstanceSpec spec = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *spec_);
    }

    // optional .ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.RoutingInstanceStatus status = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *status_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RoutingInstance::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    RoutingInstance::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RoutingInstance::GetClassData() const { return &_class_data_; }

void RoutingInstance::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<RoutingInstance *>(to)->MergeFrom(
      static_cast<const RoutingInstance &>(from));
}


void RoutingInstance::MergeFrom(const RoutingInstance& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.RoutingInstance)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_metadata()->::k8s::io::apimachinery::pkg::apis::meta::v1::ObjectMeta::MergeFrom(from._internal_metadata());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_spec()->::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::RoutingInstanceSpec::MergeFrom(from._internal_spec());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_status()->::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::RoutingInstanceStatus::MergeFrom(from._internal_status());
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RoutingInstance::CopyFrom(const RoutingInstance& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.RoutingInstance)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoutingInstance::IsInitialized() const {
  return true;
}

void RoutingInstance::InternalSwap(RoutingInstance* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RoutingInstance, status_)
      + sizeof(RoutingInstance::status_)
      - PROTOBUF_FIELD_OFFSET(RoutingInstance, metadata_)>(
          reinterpret_cast<char*>(&metadata_),
          reinterpret_cast<char*>(&other->metadata_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RoutingInstance::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_ssd_2dgit_2ejuniper_2enet_2fcontrail_2fcn2_2fcontrail_2fpkg_2fapis_2fcore_2fv1alpha1_2fgenerated_2eproto_getter, &descriptor_table_ssd_2dgit_2ejuniper_2enet_2fcontrail_2fcn2_2fcontrail_2fpkg_2fapis_2fcore_2fv1alpha1_2fgenerated_2eproto_once,
      file_level_metadata_ssd_2dgit_2ejuniper_2enet_2fcontrail_2fcn2_2fcontrail_2fpkg_2fapis_2fcore_2fv1alpha1_2fgenerated_2eproto[89]);
}

// ===================================================================

class RoutingInstanceList::_Internal {
 public:
  using HasBits = decltype(std::declval<RoutingInstanceList>()._has_bits_);
  static const ::k8s::io::apimachinery::pkg::apis::meta::v1::ListMeta& metadata(const RoutingInstanceList* msg);
  static void set_has_metadata(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::k8s::io::apimachinery::pkg::apis::meta::v1::ListMeta&
RoutingInstanceList::_Internal::metadata(const RoutingInstanceList* msg) {
  return *msg->metadata_;
}
void RoutingInstanceList::clear_metadata() {
  if (metadata_ != nullptr) metadata_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
RoutingInstanceList::RoutingInstanceList(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  items_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.RoutingInstanceList)
}
RoutingInstanceList::RoutingInstanceList(const RoutingInstanceList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      items_(from.items_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_metadata()) {
    metadata_ = new ::k8s::io::apimachinery::pkg::apis::meta::v1::ListMeta(*from.metadata_);
  } else {
    metadata_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.RoutingInstanceList)
}

inline void RoutingInstanceList::SharedCtor() {
metadata_ = nullptr;
}

RoutingInstanceList::~RoutingInstanceList() {
  // @@protoc_insertion_point(destructor:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.RoutingInstanceList)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void RoutingInstanceList::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete metadata_;
}

void RoutingInstanceList::ArenaDtor(void* object) {
  RoutingInstanceList* _this = reinterpret_cast< RoutingInstanceList* >(object);
  (void)_this;
}
void RoutingInstanceList::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RoutingInstanceList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RoutingInstanceList::Clear() {
// @@protoc_insertion_point(message_clear_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.RoutingInstanceList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  items_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(metadata_ != nullptr);
    metadata_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RoutingInstanceList::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_metadata(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.RoutingInstance items = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_items(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RoutingInstanceList::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.RoutingInstanceList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::metadata(this), target, stream);
  }

  // repeated .ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.RoutingInstance items = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_items_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_items(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.RoutingInstanceList)
  return target;
}

size_t RoutingInstanceList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.RoutingInstanceList)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.RoutingInstance items = 2;
  total_size += 1UL * this->_internal_items_size();
  for (const auto& msg : this->items_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional .k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *metadata_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RoutingInstanceList::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    RoutingInstanceList::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RoutingInstanceList::GetClassData() const { return &_class_data_; }

void RoutingInstanceList::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<RoutingInstanceList *>(to)->MergeFrom(
      static_cast<const RoutingInstanceList &>(from));
}


void RoutingInstanceList::MergeFrom(const RoutingInstanceList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.RoutingInstanceList)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  items_.MergeFrom(from.items_);
  if (from._internal_has_metadata()) {
    _internal_mutable_metadata()->::k8s::io::apimachinery::pkg::apis::meta::v1::ListMeta::MergeFrom(from._internal_metadata());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RoutingInstanceList::CopyFrom(const RoutingInstanceList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.RoutingInstanceList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoutingInstanceList::IsInitialized() const {
  return true;
}

void RoutingInstanceList::InternalSwap(RoutingInstanceList* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  items_.InternalSwap(&other->items_);
  swap(metadata_, other->metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RoutingInstanceList::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_ssd_2dgit_2ejuniper_2enet_2fcontrail_2fcn2_2fcontrail_2fpkg_2fapis_2fcore_2fv1alpha1_2fgenerated_2eproto_getter, &descriptor_table_ssd_2dgit_2ejuniper_2enet_2fcontrail_2fcn2_2fcontrail_2fpkg_2fapis_2fcore_2fv1alpha1_2fgenerated_2eproto_once,
      file_level_metadata_ssd_2dgit_2ejuniper_2enet_2fcontrail_2fcn2_2fcontrail_2fpkg_2fapis_2fcore_2fv1alpha1_2fgenerated_2eproto[90]);
}

// ===================================================================

class RoutingInstanceReference::_Internal {
 public:
  using HasBits = decltype(std::declval<RoutingInstanceReference>()._has_bits_);
  static const ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::ResourceReference& resourcereference(const RoutingInstanceReference* msg);
  static void set_has_resourcereference(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::PolicyBasedForwardingRule& attributes(const RoutingInstanceReference* msg);
  static void set_has_attributes(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::ResourceReference&
RoutingInstanceReference::_Internal::resourcereference(const RoutingInstanceReference* msg) {
  return *msg->resourcereference_;
}
const ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::PolicyBasedForwardingRule&
RoutingInstanceReference::_Internal::attributes(const RoutingInstanceReference* msg) {
  return *msg->attributes_;
}
RoutingInstanceReference::RoutingInstanceReference(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.RoutingInstanceReference)
}
RoutingInstanceReference::RoutingInstanceReference(const RoutingInstanceReference& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_resourcereference()) {
    resourcereference_ = new ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::ResourceReference(*from.resourcereference_);
  } else {
    resourcereference_ = nullptr;
  }
  if (from._internal_has_attributes()) {
    attributes_ = new ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::PolicyBasedForwardingRule(*from.attributes_);
  } else {
    attributes_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.RoutingInstanceReference)
}

inline void RoutingInstanceReference::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&resourcereference_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&attributes_) -
    reinterpret_cast<char*>(&resourcereference_)) + sizeof(attributes_));
}

RoutingInstanceReference::~RoutingInstanceReference() {
  // @@protoc_insertion_point(destructor:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.RoutingInstanceReference)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void RoutingInstanceReference::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete resourcereference_;
  if (this != internal_default_instance()) delete attributes_;
}

void RoutingInstanceReference::ArenaDtor(void* object) {
  RoutingInstanceReference* _this = reinterpret_cast< RoutingInstanceReference* >(object);
  (void)_this;
}
void RoutingInstanceReference::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RoutingInstanceReference::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RoutingInstanceReference::Clear() {
// @@protoc_insertion_point(message_clear_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.RoutingInstanceReference)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(resourcereference_ != nullptr);
      resourcereference_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(attributes_ != nullptr);
      attributes_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RoutingInstanceReference::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.ResourceReference resourceReference = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_resourcereference(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.PolicyBasedForwardingRule attributes = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_attributes(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RoutingInstanceReference::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.RoutingInstanceReference)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.ResourceReference resourceReference = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::resourcereference(this), target, stream);
  }

  // optional .ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.PolicyBasedForwardingRule attributes = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::attributes(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.RoutingInstanceReference)
  return target;
}

size_t RoutingInstanceReference::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.RoutingInstanceReference)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.ResourceReference resourceReference = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *resourcereference_);
    }

    // optional .ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.PolicyBasedForwardingRule attributes = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *attributes_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RoutingInstanceReference::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    RoutingInstanceReference::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RoutingInstanceReference::GetClassData() const { return &_class_data_; }

void RoutingInstanceReference::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<RoutingInstanceReference *>(to)->MergeFrom(
      static_cast<const RoutingInstanceReference &>(from));
}


void RoutingInstanceReference::MergeFrom(const RoutingInstanceReference& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.RoutingInstanceReference)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_resourcereference()->::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::ResourceReference::MergeFrom(from._internal_resourcereference());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_attributes()->::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::PolicyBasedForwardingRule::MergeFrom(from._internal_attributes());
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RoutingInstanceReference::CopyFrom(const RoutingInstanceReference& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.RoutingInstanceReference)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoutingInstanceReference::IsInitialized() const {
  return true;
}

void RoutingInstanceReference::InternalSwap(RoutingInstanceReference* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RoutingInstanceReference, attributes_)
      + sizeof(RoutingInstanceReference::attributes_)
      - PROTOBUF_FIELD_OFFSET(RoutingInstanceReference, resourcereference_)>(
          reinterpret_cast<char*>(&resourcereference_),
          reinterpret_cast<char*>(&other->resourcereference_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RoutingInstanceReference::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_ssd_2dgit_2ejuniper_2enet_2fcontrail_2fcn2_2fcontrail_2fpkg_2fapis_2fcore_2fv1alpha1_2fgenerated_2eproto_getter, &descriptor_table_ssd_2dgit_2ejuniper_2enet_2fcontrail_2fcn2_2fcontrail_2fpkg_2fapis_2fcore_2fv1alpha1_2fgenerated_2eproto_once,
      file_level_metadata_ssd_2dgit_2ejuniper_2enet_2fcontrail_2fcn2_2fcontrail_2fpkg_2fapis_2fcore_2fv1alpha1_2fgenerated_2eproto[91]);
}

// ===================================================================

class RoutingInstanceSpec::_Internal {
 public:
  using HasBits = decltype(std::declval<RoutingInstanceSpec>()._has_bits_);
  static const ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::CommonSpec& commonspec(const RoutingInstanceSpec* msg);
  static void set_has_commonspec(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::k8s::io::api::core::v1::ObjectReference& parent(const RoutingInstanceSpec* msg);
  static void set_has_parent(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::CommonSpec&
RoutingInstanceSpec::_Internal::commonspec(const RoutingInstanceSpec* msg) {
  return *msg->commonspec_;
}
const ::k8s::io::api::core::v1::ObjectReference&
RoutingInstanceSpec::_Internal::parent(const RoutingInstanceSpec* msg) {
  return *msg->parent_;
}
void RoutingInstanceSpec::clear_parent() {
  if (parent_ != nullptr) parent_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
RoutingInstanceSpec::RoutingInstanceSpec(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  routetargetreferences_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.RoutingInstanceSpec)
}
RoutingInstanceSpec::RoutingInstanceSpec(const RoutingInstanceSpec& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      routetargetreferences_(from.routetargetreferences_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_commonspec()) {
    commonspec_ = new ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::CommonSpec(*from.commonspec_);
  } else {
    commonspec_ = nullptr;
  }
  if (from._internal_has_parent()) {
    parent_ = new ::k8s::io::api::core::v1::ObjectReference(*from.parent_);
  } else {
    parent_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.RoutingInstanceSpec)
}

inline void RoutingInstanceSpec::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&commonspec_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&parent_) -
    reinterpret_cast<char*>(&commonspec_)) + sizeof(parent_));
}

RoutingInstanceSpec::~RoutingInstanceSpec() {
  // @@protoc_insertion_point(destructor:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.RoutingInstanceSpec)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void RoutingInstanceSpec::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete commonspec_;
  if (this != internal_default_instance()) delete parent_;
}

void RoutingInstanceSpec::ArenaDtor(void* object) {
  RoutingInstanceSpec* _this = reinterpret_cast< RoutingInstanceSpec* >(object);
  (void)_this;
}
void RoutingInstanceSpec::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RoutingInstanceSpec::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RoutingInstanceSpec::Clear() {
// @@protoc_insertion_point(message_clear_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.RoutingInstanceSpec)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  routetargetreferences_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(commonspec_ != nullptr);
      commonspec_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(parent_ != nullptr);
      parent_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RoutingInstanceSpec::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.CommonSpec commonSpec = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_commonspec(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .k8s.io.api.core.v1.ObjectReference parent = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_parent(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.RouteTargetReference routeTargetReferences = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_routetargetreferences(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RoutingInstanceSpec::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.RoutingInstanceSpec)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.CommonSpec commonSpec = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::commonspec(this), target, stream);
  }

  // optional .k8s.io.api.core.v1.ObjectReference parent = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::parent(this), target, stream);
  }

  // repeated .ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.RouteTargetReference routeTargetReferences = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_routetargetreferences_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_routetargetreferences(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.RoutingInstanceSpec)
  return target;
}

size_t RoutingInstanceSpec::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.RoutingInstanceSpec)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.RouteTargetReference routeTargetReferences = 3;
  total_size += 1UL * this->_internal_routetargetreferences_size();
  for (const auto& msg : this->routetargetreferences_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.CommonSpec commonSpec = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *commonspec_);
    }

    // optional .k8s.io.api.core.v1.ObjectReference parent = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *parent_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RoutingInstanceSpec::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    RoutingInstanceSpec::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RoutingInstanceSpec::GetClassData() const { return &_class_data_; }

void RoutingInstanceSpec::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<RoutingInstanceSpec *>(to)->MergeFrom(
      static_cast<const RoutingInstanceSpec &>(from));
}


void RoutingInstanceSpec::MergeFrom(const RoutingInstanceSpec& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.RoutingInstanceSpec)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  routetargetreferences_.MergeFrom(from.routetargetreferences_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_commonspec()->::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::CommonSpec::MergeFrom(from._internal_commonspec());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_parent()->::k8s::io::api::core::v1::ObjectReference::MergeFrom(from._internal_parent());
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RoutingInstanceSpec::CopyFrom(const RoutingInstanceSpec& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.RoutingInstanceSpec)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoutingInstanceSpec::IsInitialized() const {
  return true;
}

void RoutingInstanceSpec::InternalSwap(RoutingInstanceSpec* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  routetargetreferences_.InternalSwap(&other->routetargetreferences_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RoutingInstanceSpec, parent_)
      + sizeof(RoutingInstanceSpec::parent_)
      - PROTOBUF_FIELD_OFFSET(RoutingInstanceSpec, commonspec_)>(
          reinterpret_cast<char*>(&commonspec_),
          reinterpret_cast<char*>(&other->commonspec_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RoutingInstanceSpec::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_ssd_2dgit_2ejuniper_2enet_2fcontrail_2fcn2_2fcontrail_2fpkg_2fapis_2fcore_2fv1alpha1_2fgenerated_2eproto_getter, &descriptor_table_ssd_2dgit_2ejuniper_2enet_2fcontrail_2fcn2_2fcontrail_2fpkg_2fapis_2fcore_2fv1alpha1_2fgenerated_2eproto_once,
      file_level_metadata_ssd_2dgit_2ejuniper_2enet_2fcontrail_2fcn2_2fcontrail_2fpkg_2fapis_2fcore_2fv1alpha1_2fgenerated_2eproto[92]);
}

// ===================================================================

RoutingInstanceStatus_VirtualNetworkRouterRouteTargetReferencesEntry_DoNotUse::RoutingInstanceStatus_VirtualNetworkRouterRouteTargetReferencesEntry_DoNotUse() {}
RoutingInstanceStatus_VirtualNetworkRouterRouteTargetReferencesEntry_DoNotUse::RoutingInstanceStatus_VirtualNetworkRouterRouteTargetReferencesEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void RoutingInstanceStatus_VirtualNetworkRouterRouteTargetReferencesEntry_DoNotUse::MergeFrom(const RoutingInstanceStatus_VirtualNetworkRouterRouteTargetReferencesEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata RoutingInstanceStatus_VirtualNetworkRouterRouteTargetReferencesEntry_DoNotUse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_ssd_2dgit_2ejuniper_2enet_2fcontrail_2fcn2_2fcontrail_2fpkg_2fapis_2fcore_2fv1alpha1_2fgenerated_2eproto_getter, &descriptor_table_ssd_2dgit_2ejuniper_2enet_2fcontrail_2fcn2_2fcontrail_2fpkg_2fapis_2fcore_2fv1alpha1_2fgenerated_2eproto_once,
      file_level_metadata_ssd_2dgit_2ejuniper_2enet_2fcontrail_2fcn2_2fcontrail_2fpkg_2fapis_2fcore_2fv1alpha1_2fgenerated_2eproto[93]);
}

// ===================================================================

class RoutingInstanceStatus::_Internal {
 public:
  using HasBits = decltype(std::declval<RoutingInstanceStatus>()._has_bits_);
  static const ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::CommonStatus& commonstatus(const RoutingInstanceStatus* msg);
  static void set_has_commonstatus(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_isdefault(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_routinginstancefabricsnat(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::RouteTargetReference& defaultroutetargetreference(const RoutingInstanceStatus* msg);
  static void set_has_defaultroutetargetreference(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::CommonStatus&
RoutingInstanceStatus::_Internal::commonstatus(const RoutingInstanceStatus* msg) {
  return *msg->commonstatus_;
}
const ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::RouteTargetReference&
RoutingInstanceStatus::_Internal::defaultroutetargetreference(const RoutingInstanceStatus* msg) {
  return *msg->defaultroutetargetreference_;
}
RoutingInstanceStatus::RoutingInstanceStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  virtualnetworkrouterroutetargetreferences_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.RoutingInstanceStatus)
}
RoutingInstanceStatus::RoutingInstanceStatus(const RoutingInstanceStatus& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  virtualnetworkrouterroutetargetreferences_.MergeFrom(from.virtualnetworkrouterroutetargetreferences_);
  if (from._internal_has_commonstatus()) {
    commonstatus_ = new ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::CommonStatus(*from.commonstatus_);
  } else {
    commonstatus_ = nullptr;
  }
  if (from._internal_has_defaultroutetargetreference()) {
    defaultroutetargetreference_ = new ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::RouteTargetReference(*from.defaultroutetargetreference_);
  } else {
    defaultroutetargetreference_ = nullptr;
  }
  ::memcpy(&isdefault_, &from.isdefault_,
    static_cast<size_t>(reinterpret_cast<char*>(&routinginstancefabricsnat_) -
    reinterpret_cast<char*>(&isdefault_)) + sizeof(routinginstancefabricsnat_));
  // @@protoc_insertion_point(copy_constructor:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.RoutingInstanceStatus)
}

inline void RoutingInstanceStatus::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&commonstatus_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&routinginstancefabricsnat_) -
    reinterpret_cast<char*>(&commonstatus_)) + sizeof(routinginstancefabricsnat_));
}

RoutingInstanceStatus::~RoutingInstanceStatus() {
  // @@protoc_insertion_point(destructor:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.RoutingInstanceStatus)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void RoutingInstanceStatus::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete commonstatus_;
  if (this != internal_default_instance()) delete defaultroutetargetreference_;
}

void RoutingInstanceStatus::ArenaDtor(void* object) {
  RoutingInstanceStatus* _this = reinterpret_cast< RoutingInstanceStatus* >(object);
  (void)_this;
  _this->virtualnetworkrouterroutetargetreferences_. ~MapField();
}
inline void RoutingInstanceStatus::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena) {
  if (arena != nullptr) {
    arena->OwnCustomDestructor(this, &RoutingInstanceStatus::ArenaDtor);
  }
}
void RoutingInstanceStatus::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RoutingInstanceStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.RoutingInstanceStatus)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  virtualnetworkrouterroutetargetreferences_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(commonstatus_ != nullptr);
      commonstatus_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(defaultroutetargetreference_ != nullptr);
      defaultroutetargetreference_->Clear();
    }
  }
  ::memset(&isdefault_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&routinginstancefabricsnat_) -
      reinterpret_cast<char*>(&isdefault_)) + sizeof(routinginstancefabricsnat_));
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RoutingInstanceStatus::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.CommonStatus commonStatus = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_commonstatus(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool isDefault = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_isdefault(&has_bits);
          isdefault_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool routingInstanceFabricSNAT = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_routinginstancefabricsnat(&has_bits);
          routinginstancefabricsnat_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.RouteTargetReference defaultRouteTargetReference = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_defaultroutetargetreference(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // map<string, .ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.VirtualNetworkRouteTargetReferenceList> virtualNetworkRouterRouteTargetReferences = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&virtualnetworkrouterroutetargetreferences_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RoutingInstanceStatus::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.RoutingInstanceStatus)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.CommonStatus commonStatus = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::commonstatus(this), target, stream);
  }

  // optional bool isDefault = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_isdefault(), target);
  }

  // optional bool routingInstanceFabricSNAT = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_routinginstancefabricsnat(), target);
  }

  // optional .ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.RouteTargetReference defaultRouteTargetReference = 4;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::defaultroutetargetreference(this), target, stream);
  }

  // map<string, .ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.VirtualNetworkRouteTargetReferenceList> virtualNetworkRouterRouteTargetReferences = 5;
  if (!this->_internal_virtualnetworkrouterroutetargetreferences().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::VirtualNetworkRouteTargetReferenceList >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        (void)p;
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
          "ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.RoutingInstanceStatus.VirtualNetworkRouterRouteTargetReferencesEntry.key");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_virtualnetworkrouterroutetargetreferences().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_virtualnetworkrouterroutetargetreferences().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::VirtualNetworkRouteTargetReferenceList >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::VirtualNetworkRouteTargetReferenceList >::const_iterator
          it = this->_internal_virtualnetworkrouterroutetargetreferences().begin();
          it != this->_internal_virtualnetworkrouterroutetargetreferences().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = RoutingInstanceStatus_VirtualNetworkRouterRouteTargetReferencesEntry_DoNotUse::Funcs::InternalSerialize(5, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::VirtualNetworkRouteTargetReferenceList >::const_iterator
          it = this->_internal_virtualnetworkrouterroutetargetreferences().begin();
          it != this->_internal_virtualnetworkrouterroutetargetreferences().end(); ++it) {
        target = RoutingInstanceStatus_VirtualNetworkRouterRouteTargetReferencesEntry_DoNotUse::Funcs::InternalSerialize(5, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.RoutingInstanceStatus)
  return target;
}

size_t RoutingInstanceStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.RoutingInstanceStatus)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, .ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.VirtualNetworkRouteTargetReferenceList> virtualNetworkRouterRouteTargetReferences = 5;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_virtualnetworkrouterroutetargetreferences_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::VirtualNetworkRouteTargetReferenceList >::const_iterator
      it = this->_internal_virtualnetworkrouterroutetargetreferences().begin();
      it != this->_internal_virtualnetworkrouterroutetargetreferences().end(); ++it) {
    total_size += RoutingInstanceStatus_VirtualNetworkRouterRouteTargetReferencesEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional .ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.CommonStatus commonStatus = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *commonstatus_);
    }

    // optional .ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.RouteTargetReference defaultRouteTargetReference = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *defaultroutetargetreference_);
    }

    // optional bool isDefault = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

    // optional bool routingInstanceFabricSNAT = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RoutingInstanceStatus::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    RoutingInstanceStatus::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RoutingInstanceStatus::GetClassData() const { return &_class_data_; }

void RoutingInstanceStatus::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<RoutingInstanceStatus *>(to)->MergeFrom(
      static_cast<const RoutingInstanceStatus &>(from));
}


void RoutingInstanceStatus::MergeFrom(const RoutingInstanceStatus& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.RoutingInstanceStatus)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  virtualnetworkrouterroutetargetreferences_.MergeFrom(from.virtualnetworkrouterroutetargetreferences_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_commonstatus()->::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::CommonStatus::MergeFrom(from._internal_commonstatus());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_defaultroutetargetreference()->::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::RouteTargetReference::MergeFrom(from._internal_defaultroutetargetreference());
    }
    if (cached_has_bits & 0x00000004u) {
      isdefault_ = from.isdefault_;
    }
    if (cached_has_bits & 0x00000008u) {
      routinginstancefabricsnat_ = from.routinginstancefabricsnat_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RoutingInstanceStatus::CopyFrom(const RoutingInstanceStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.RoutingInstanceStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoutingInstanceStatus::IsInitialized() const {
  return true;
}

void RoutingInstanceStatus::InternalSwap(RoutingInstanceStatus* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  virtualnetworkrouterroutetargetreferences_.InternalSwap(&other->virtualnetworkrouterroutetargetreferences_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RoutingInstanceStatus, routinginstancefabricsnat_)
      + sizeof(RoutingInstanceStatus::routinginstancefabricsnat_)
      - PROTOBUF_FIELD_OFFSET(RoutingInstanceStatus, commonstatus_)>(
          reinterpret_cast<char*>(&commonstatus_),
          reinterpret_cast<char*>(&other->commonstatus_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RoutingInstanceStatus::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_ssd_2dgit_2ejuniper_2enet_2fcontrail_2fcn2_2fcontrail_2fpkg_2fapis_2fcore_2fv1alpha1_2fgenerated_2eproto_getter, &descriptor_table_ssd_2dgit_2ejuniper_2enet_2fcontrail_2fcn2_2fcontrail_2fpkg_2fapis_2fcore_2fv1alpha1_2fgenerated_2eproto_once,
      file_level_metadata_ssd_2dgit_2ejuniper_2enet_2fcontrail_2fcn2_2fcontrail_2fpkg_2fapis_2fcore_2fv1alpha1_2fgenerated_2eproto[94]);
}

// ===================================================================

class Subnet::_Internal {
 public:
  using HasBits = decltype(std::declval<Subnet>()._has_bits_);
  static const ::k8s::io::apimachinery::pkg::apis::meta::v1::ObjectMeta& metadata(const Subnet* msg);
  static void set_has_metadata(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::SubnetSpec& spec(const Subnet* msg);
  static void set_has_spec(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::SubnetStatus& status(const Subnet* msg);
  static void set_has_status(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::k8s::io::apimachinery::pkg::apis::meta::v1::ObjectMeta&
Subnet::_Internal::metadata(const Subnet* msg) {
  return *msg->metadata_;
}
const ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::SubnetSpec&
Subnet::_Internal::spec(const Subnet* msg) {
  return *msg->spec_;
}
const ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::SubnetStatus&
Subnet::_Internal::status(const Subnet* msg) {
  return *msg->status_;
}
void Subnet::clear_metadata() {
  if (metadata_ != nullptr) metadata_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
Subnet::Subnet(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.Subnet)
}
Subnet::Subnet(const Subnet& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_metadata()) {
    metadata_ = new ::k8s::io::apimachinery::pkg::apis::meta::v1::ObjectMeta(*from.metadata_);
  } else {
    metadata_ = nullptr;
  }
  if (from._internal_has_spec()) {
    spec_ = new ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::SubnetSpec(*from.spec_);
  } else {
    spec_ = nullptr;
  }
  if (from._internal_has_status()) {
    status_ = new ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::SubnetStatus(*from.status_);
  } else {
    status_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.Subnet)
}

inline void Subnet::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&metadata_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&status_) -
    reinterpret_cast<char*>(&metadata_)) + sizeof(status_));
}

Subnet::~Subnet() {
  // @@protoc_insertion_point(destructor:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.Subnet)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Subnet::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete metadata_;
  if (this != internal_default_instance()) delete spec_;
  if (this != internal_default_instance()) delete status_;
}

void Subnet::ArenaDtor(void* object) {
  Subnet* _this = reinterpret_cast< Subnet* >(object);
  (void)_this;
}
void Subnet::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Subnet::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Subnet::Clear() {
// @@protoc_insertion_point(message_clear_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.Subnet)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(metadata_ != nullptr);
      metadata_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(spec_ != nullptr);
      spec_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(status_ != nullptr);
      status_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Subnet::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_metadata(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.SubnetSpec spec = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_spec(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.SubnetStatus status = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Subnet::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.Subnet)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::metadata(this), target, stream);
  }

  // optional .ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.SubnetSpec spec = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::spec(this), target, stream);
  }

  // optional .ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.SubnetStatus status = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::status(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.Subnet)
  return target;
}

size_t Subnet::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.Subnet)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *metadata_);
    }

    // optional .ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.SubnetSpec spec = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *spec_);
    }

    // optional .ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.SubnetStatus status = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *status_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Subnet::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Subnet::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Subnet::GetClassData() const { return &_class_data_; }

void Subnet::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<Subnet *>(to)->MergeFrom(
      static_cast<const Subnet &>(from));
}


void Subnet::MergeFrom(const Subnet& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.Subnet)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_metadata()->::k8s::io::apimachinery::pkg::apis::meta::v1::ObjectMeta::MergeFrom(from._internal_metadata());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_spec()->::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::SubnetSpec::MergeFrom(from._internal_spec());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_status()->::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::SubnetStatus::MergeFrom(from._internal_status());
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Subnet::CopyFrom(const Subnet& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.Subnet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Subnet::IsInitialized() const {
  return true;
}

void Subnet::InternalSwap(Subnet* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Subnet, status_)
      + sizeof(Subnet::status_)
      - PROTOBUF_FIELD_OFFSET(Subnet, metadata_)>(
          reinterpret_cast<char*>(&metadata_),
          reinterpret_cast<char*>(&other->metadata_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Subnet::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_ssd_2dgit_2ejuniper_2enet_2fcontrail_2fcn2_2fcontrail_2fpkg_2fapis_2fcore_2fv1alpha1_2fgenerated_2eproto_getter, &descriptor_table_ssd_2dgit_2ejuniper_2enet_2fcontrail_2fcn2_2fcontrail_2fpkg_2fapis_2fcore_2fv1alpha1_2fgenerated_2eproto_once,
      file_level_metadata_ssd_2dgit_2ejuniper_2enet_2fcontrail_2fcn2_2fcontrail_2fpkg_2fapis_2fcore_2fv1alpha1_2fgenerated_2eproto[95]);
}

// ===================================================================

class SubnetList::_Internal {
 public:
  using HasBits = decltype(std::declval<SubnetList>()._has_bits_);
  static const ::k8s::io::apimachinery::pkg::apis::meta::v1::ListMeta& metadata(const SubnetList* msg);
  static void set_has_metadata(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::k8s::io::apimachinery::pkg::apis::meta::v1::ListMeta&
SubnetList::_Internal::metadata(const SubnetList* msg) {
  return *msg->metadata_;
}
void SubnetList::clear_metadata() {
  if (metadata_ != nullptr) metadata_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
SubnetList::SubnetList(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  items_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.SubnetList)
}
SubnetList::SubnetList(const SubnetList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      items_(from.items_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_metadata()) {
    metadata_ = new ::k8s::io::apimachinery::pkg::apis::meta::v1::ListMeta(*from.metadata_);
  } else {
    metadata_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.SubnetList)
}

inline void SubnetList::SharedCtor() {
metadata_ = nullptr;
}

SubnetList::~SubnetList() {
  // @@protoc_insertion_point(destructor:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.SubnetList)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SubnetList::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete metadata_;
}

void SubnetList::ArenaDtor(void* object) {
  SubnetList* _this = reinterpret_cast< SubnetList* >(object);
  (void)_this;
}
void SubnetList::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SubnetList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SubnetList::Clear() {
// @@protoc_insertion_point(message_clear_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.SubnetList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  items_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(metadata_ != nullptr);
    metadata_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SubnetList::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_metadata(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.Subnet items = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_items(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SubnetList::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.SubnetList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::metadata(this), target, stream);
  }

  // repeated .ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.Subnet items = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_items_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_items(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.SubnetList)
  return target;
}

size_t SubnetList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.SubnetList)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.Subnet items = 2;
  total_size += 1UL * this->_internal_items_size();
  for (const auto& msg : this->items_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional .k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *metadata_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SubnetList::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SubnetList::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SubnetList::GetClassData() const { return &_class_data_; }

void SubnetList::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<SubnetList *>(to)->MergeFrom(
      static_cast<const SubnetList &>(from));
}


void SubnetList::MergeFrom(const SubnetList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.SubnetList)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  items_.MergeFrom(from.items_);
  if (from._internal_has_metadata()) {
    _internal_mutable_metadata()->::k8s::io::apimachinery::pkg::apis::meta::v1::ListMeta::MergeFrom(from._internal_metadata());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SubnetList::CopyFrom(const SubnetList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.SubnetList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SubnetList::IsInitialized() const {
  return true;
}

void SubnetList::InternalSwap(SubnetList* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  items_.InternalSwap(&other->items_);
  swap(metadata_, other->metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SubnetList::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_ssd_2dgit_2ejuniper_2enet_2fcontrail_2fcn2_2fcontrail_2fpkg_2fapis_2fcore_2fv1alpha1_2fgenerated_2eproto_getter, &descriptor_table_ssd_2dgit_2ejuniper_2enet_2fcontrail_2fcn2_2fcontrail_2fpkg_2fapis_2fcore_2fv1alpha1_2fgenerated_2eproto_once,
      file_level_metadata_ssd_2dgit_2ejuniper_2enet_2fcontrail_2fcn2_2fcontrail_2fpkg_2fapis_2fcore_2fv1alpha1_2fgenerated_2eproto[96]);
}

// ===================================================================

class SubnetReference::_Internal {
 public:
  using HasBits = decltype(std::declval<SubnetReference>()._has_bits_);
  static const ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::ResourceReference& resourcereference(const SubnetReference* msg);
  static void set_has_resourcereference(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::BGPSessionIPAttributes& attributes(const SubnetReference* msg);
  static void set_has_attributes(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::ResourceReference&
SubnetReference::_Internal::resourcereference(const SubnetReference* msg) {
  return *msg->resourcereference_;
}
const ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::BGPSessionIPAttributes&
SubnetReference::_Internal::attributes(const SubnetReference* msg) {
  return *msg->attributes_;
}
SubnetReference::SubnetReference(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.SubnetReference)
}
SubnetReference::SubnetReference(const SubnetReference& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_resourcereference()) {
    resourcereference_ = new ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::ResourceReference(*from.resourcereference_);
  } else {
    resourcereference_ = nullptr;
  }
  if (from._internal_has_attributes()) {
    attributes_ = new ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::BGPSessionIPAttributes(*from.attributes_);
  } else {
    attributes_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.SubnetReference)
}

inline void SubnetReference::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&resourcereference_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&attributes_) -
    reinterpret_cast<char*>(&resourcereference_)) + sizeof(attributes_));
}

SubnetReference::~SubnetReference() {
  // @@protoc_insertion_point(destructor:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.SubnetReference)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SubnetReference::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete resourcereference_;
  if (this != internal_default_instance()) delete attributes_;
}

void SubnetReference::ArenaDtor(void* object) {
  SubnetReference* _this = reinterpret_cast< SubnetReference* >(object);
  (void)_this;
}
void SubnetReference::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SubnetReference::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SubnetReference::Clear() {
// @@protoc_insertion_point(message_clear_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.SubnetReference)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(resourcereference_ != nullptr);
      resourcereference_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(attributes_ != nullptr);
      attributes_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SubnetReference::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.ResourceReference resourceReference = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_resourcereference(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.BGPSessionIPAttributes attributes = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_attributes(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SubnetReference::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.SubnetReference)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.ResourceReference resourceReference = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::resourcereference(this), target, stream);
  }

  // optional .ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.BGPSessionIPAttributes attributes = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::attributes(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.SubnetReference)
  return target;
}

size_t SubnetReference::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.SubnetReference)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.ResourceReference resourceReference = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *resourcereference_);
    }

    // optional .ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.BGPSessionIPAttributes attributes = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *attributes_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SubnetReference::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SubnetReference::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SubnetReference::GetClassData() const { return &_class_data_; }

void SubnetReference::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<SubnetReference *>(to)->MergeFrom(
      static_cast<const SubnetReference &>(from));
}


void SubnetReference::MergeFrom(const SubnetReference& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.SubnetReference)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_resourcereference()->::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::ResourceReference::MergeFrom(from._internal_resourcereference());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_attributes()->::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::BGPSessionIPAttributes::MergeFrom(from._internal_attributes());
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SubnetReference::CopyFrom(const SubnetReference& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.SubnetReference)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SubnetReference::IsInitialized() const {
  return true;
}

void SubnetReference::InternalSwap(SubnetReference* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SubnetReference, attributes_)
      + sizeof(SubnetReference::attributes_)
      - PROTOBUF_FIELD_OFFSET(SubnetReference, resourcereference_)>(
          reinterpret_cast<char*>(&resourcereference_),
          reinterpret_cast<char*>(&other->resourcereference_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SubnetReference::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_ssd_2dgit_2ejuniper_2enet_2fcontrail_2fcn2_2fcontrail_2fpkg_2fapis_2fcore_2fv1alpha1_2fgenerated_2eproto_getter, &descriptor_table_ssd_2dgit_2ejuniper_2enet_2fcontrail_2fcn2_2fcontrail_2fpkg_2fapis_2fcore_2fv1alpha1_2fgenerated_2eproto_once,
      file_level_metadata_ssd_2dgit_2ejuniper_2enet_2fcontrail_2fcn2_2fcontrail_2fpkg_2fapis_2fcore_2fv1alpha1_2fgenerated_2eproto[97]);
}

// ===================================================================

class SubnetSpec::_Internal {
 public:
  using HasBits = decltype(std::declval<SubnetSpec>()._has_bits_);
  static const ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::CommonSpec& commonspec(const SubnetSpec* msg);
  static void set_has_commonspec(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_cidr(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_defaultgateway(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_disablebgpaasipautoallocation(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_bgpaasprimaryip(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_bgpaassecondaryip(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

const ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::CommonSpec&
SubnetSpec::_Internal::commonspec(const SubnetSpec* msg) {
  return *msg->commonspec_;
}
SubnetSpec::SubnetSpec(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  dnsnameservers_(arena),
  ranges_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.SubnetSpec)
}
SubnetSpec::SubnetSpec(const SubnetSpec& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      dnsnameservers_(from.dnsnameservers_),
      ranges_(from.ranges_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  cidr_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_cidr()) {
    cidr_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_cidr(), 
      GetArenaForAllocation());
  }
  defaultgateway_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_defaultgateway()) {
    defaultgateway_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_defaultgateway(), 
      GetArenaForAllocation());
  }
  bgpaasprimaryip_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_bgpaasprimaryip()) {
    bgpaasprimaryip_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_bgpaasprimaryip(), 
      GetArenaForAllocation());
  }
  bgpaassecondaryip_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_bgpaassecondaryip()) {
    bgpaassecondaryip_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_bgpaassecondaryip(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_commonspec()) {
    commonspec_ = new ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::CommonSpec(*from.commonspec_);
  } else {
    commonspec_ = nullptr;
  }
  disablebgpaasipautoallocation_ = from.disablebgpaasipautoallocation_;
  // @@protoc_insertion_point(copy_constructor:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.SubnetSpec)
}

inline void SubnetSpec::SharedCtor() {
cidr_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
defaultgateway_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
bgpaasprimaryip_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
bgpaassecondaryip_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&commonspec_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&disablebgpaasipautoallocation_) -
    reinterpret_cast<char*>(&commonspec_)) + sizeof(disablebgpaasipautoallocation_));
}

SubnetSpec::~SubnetSpec() {
  // @@protoc_insertion_point(destructor:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.SubnetSpec)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SubnetSpec::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  cidr_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  defaultgateway_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  bgpaasprimaryip_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  bgpaassecondaryip_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete commonspec_;
}

void SubnetSpec::ArenaDtor(void* object) {
  SubnetSpec* _this = reinterpret_cast< SubnetSpec* >(object);
  (void)_this;
}
void SubnetSpec::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SubnetSpec::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SubnetSpec::Clear() {
// @@protoc_insertion_point(message_clear_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.SubnetSpec)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  dnsnameservers_.Clear();
  ranges_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      cidr_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      defaultgateway_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      bgpaasprimaryip_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      bgpaassecondaryip_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(commonspec_ != nullptr);
      commonspec_->Clear();
    }
  }
  disablebgpaasipautoallocation_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SubnetSpec::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.CommonSpec commonSpec = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_commonspec(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string cidr = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_cidr();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.SubnetSpec.cidr");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string defaultGateway = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_defaultgateway();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.SubnetSpec.defaultGateway");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string dnsNameservers = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_dnsnameservers();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            #ifndef NDEBUG
            ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.SubnetSpec.dnsNameservers");
            #endif  // !NDEBUG
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.Range ranges = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_ranges(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else goto handle_unusual;
        continue;
      // optional bool disableBGPaaSIPAutoAllocation = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_disablebgpaasipautoallocation(&has_bits);
          disablebgpaasipautoallocation_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string bgpaasPrimaryIP = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          auto str = _internal_mutable_bgpaasprimaryip();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.SubnetSpec.bgpaasPrimaryIP");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string bgpaasSecondaryIP = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          auto str = _internal_mutable_bgpaassecondaryip();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.SubnetSpec.bgpaasSecondaryIP");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SubnetSpec::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.SubnetSpec)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.CommonSpec commonSpec = 1;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::commonspec(this), target, stream);
  }

  // optional string cidr = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_cidr().data(), static_cast<int>(this->_internal_cidr().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.SubnetSpec.cidr");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_cidr(), target);
  }

  // optional string defaultGateway = 4;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_defaultgateway().data(), static_cast<int>(this->_internal_defaultgateway().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.SubnetSpec.defaultGateway");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_defaultgateway(), target);
  }

  // repeated string dnsNameservers = 5;
  for (int i = 0, n = this->_internal_dnsnameservers_size(); i < n; i++) {
    const auto& s = this->_internal_dnsnameservers(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.SubnetSpec.dnsNameservers");
    target = stream->WriteString(5, s, target);
  }

  // repeated .ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.Range ranges = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_ranges_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, this->_internal_ranges(i), target, stream);
  }

  // optional bool disableBGPaaSIPAutoAllocation = 7;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(7, this->_internal_disablebgpaasipautoallocation(), target);
  }

  // optional string bgpaasPrimaryIP = 8;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_bgpaasprimaryip().data(), static_cast<int>(this->_internal_bgpaasprimaryip().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.SubnetSpec.bgpaasPrimaryIP");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_bgpaasprimaryip(), target);
  }

  // optional string bgpaasSecondaryIP = 9;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_bgpaassecondaryip().data(), static_cast<int>(this->_internal_bgpaassecondaryip().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.SubnetSpec.bgpaasSecondaryIP");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_bgpaassecondaryip(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.SubnetSpec)
  return target;
}

size_t SubnetSpec::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.SubnetSpec)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string dnsNameservers = 5;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(dnsnameservers_.size());
  for (int i = 0, n = dnsnameservers_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      dnsnameservers_.Get(i));
  }

  // repeated .ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.Range ranges = 6;
  total_size += 1UL * this->_internal_ranges_size();
  for (const auto& msg : this->ranges_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional string cidr = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_cidr());
    }

    // optional string defaultGateway = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_defaultgateway());
    }

    // optional string bgpaasPrimaryIP = 8;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_bgpaasprimaryip());
    }

    // optional string bgpaasSecondaryIP = 9;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_bgpaassecondaryip());
    }

    // optional .ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.CommonSpec commonSpec = 1;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *commonspec_);
    }

    // optional bool disableBGPaaSIPAutoAllocation = 7;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SubnetSpec::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SubnetSpec::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SubnetSpec::GetClassData() const { return &_class_data_; }

void SubnetSpec::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<SubnetSpec *>(to)->MergeFrom(
      static_cast<const SubnetSpec &>(from));
}


void SubnetSpec::MergeFrom(const SubnetSpec& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.SubnetSpec)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  dnsnameservers_.MergeFrom(from.dnsnameservers_);
  ranges_.MergeFrom(from.ranges_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_cidr(from._internal_cidr());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_defaultgateway(from._internal_defaultgateway());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_bgpaasprimaryip(from._internal_bgpaasprimaryip());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_set_bgpaassecondaryip(from._internal_bgpaassecondaryip());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_mutable_commonspec()->::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::CommonSpec::MergeFrom(from._internal_commonspec());
    }
    if (cached_has_bits & 0x00000020u) {
      disablebgpaasipautoallocation_ = from.disablebgpaasipautoallocation_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SubnetSpec::CopyFrom(const SubnetSpec& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.SubnetSpec)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SubnetSpec::IsInitialized() const {
  return true;
}

void SubnetSpec::InternalSwap(SubnetSpec* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  dnsnameservers_.InternalSwap(&other->dnsnameservers_);
  ranges_.InternalSwap(&other->ranges_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &cidr_, GetArenaForAllocation(),
      &other->cidr_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &defaultgateway_, GetArenaForAllocation(),
      &other->defaultgateway_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &bgpaasprimaryip_, GetArenaForAllocation(),
      &other->bgpaasprimaryip_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &bgpaassecondaryip_, GetArenaForAllocation(),
      &other->bgpaassecondaryip_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SubnetSpec, disablebgpaasipautoallocation_)
      + sizeof(SubnetSpec::disablebgpaasipautoallocation_)
      - PROTOBUF_FIELD_OFFSET(SubnetSpec, commonspec_)>(
          reinterpret_cast<char*>(&commonspec_),
          reinterpret_cast<char*>(&other->commonspec_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SubnetSpec::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_ssd_2dgit_2ejuniper_2enet_2fcontrail_2fcn2_2fcontrail_2fpkg_2fapis_2fcore_2fv1alpha1_2fgenerated_2eproto_getter, &descriptor_table_ssd_2dgit_2ejuniper_2enet_2fcontrail_2fcn2_2fcontrail_2fpkg_2fapis_2fcore_2fv1alpha1_2fgenerated_2eproto_once,
      file_level_metadata_ssd_2dgit_2ejuniper_2enet_2fcontrail_2fcn2_2fcontrail_2fpkg_2fapis_2fcore_2fv1alpha1_2fgenerated_2eproto[98]);
}

// ===================================================================

class SubnetStatus::_Internal {
 public:
  using HasBits = decltype(std::declval<SubnetStatus>()._has_bits_);
  static const ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::CommonStatus& commonstatus(const SubnetStatus* msg);
  static void set_has_commonstatus(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_ipcount(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_allocationusage(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::CommonStatus&
SubnetStatus::_Internal::commonstatus(const SubnetStatus* msg) {
  return *msg->commonstatus_;
}
SubnetStatus::SubnetStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.SubnetStatus)
}
SubnetStatus::SubnetStatus(const SubnetStatus& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  allocationusage_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_allocationusage()) {
    allocationusage_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_allocationusage(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_commonstatus()) {
    commonstatus_ = new ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::CommonStatus(*from.commonstatus_);
  } else {
    commonstatus_ = nullptr;
  }
  ipcount_ = from.ipcount_;
  // @@protoc_insertion_point(copy_constructor:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.SubnetStatus)
}

inline void SubnetStatus::SharedCtor() {
allocationusage_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&commonstatus_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&ipcount_) -
    reinterpret_cast<char*>(&commonstatus_)) + sizeof(ipcount_));
}

SubnetStatus::~SubnetStatus() {
  // @@protoc_insertion_point(destructor:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.SubnetStatus)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SubnetStatus::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  allocationusage_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete commonstatus_;
}

void SubnetStatus::ArenaDtor(void* object) {
  SubnetStatus* _this = reinterpret_cast< SubnetStatus* >(object);
  (void)_this;
}
void SubnetStatus::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SubnetStatus::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SubnetStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.SubnetStatus)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      allocationusage_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(commonstatus_ != nullptr);
      commonstatus_->Clear();
    }
  }
  ipcount_ = int64_t{0};
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SubnetStatus::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.CommonStatus commonStatus = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_commonstatus(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 ipCount = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_ipcount(&has_bits);
          ipcount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string allocationUsage = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_allocationusage();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.SubnetStatus.allocationUsage");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SubnetStatus::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.SubnetStatus)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.CommonStatus commonStatus = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::commonstatus(this), target, stream);
  }

  // optional int64 ipCount = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_ipcount(), target);
  }

  // optional string allocationUsage = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_allocationusage().data(), static_cast<int>(this->_internal_allocationusage().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.SubnetStatus.allocationUsage");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_allocationusage(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.SubnetStatus)
  return target;
}

size_t SubnetStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.SubnetStatus)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string allocationUsage = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_allocationusage());
    }

    // optional .ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.CommonStatus commonStatus = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *commonstatus_);
    }

    // optional int64 ipCount = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->_internal_ipcount());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SubnetStatus::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SubnetStatus::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SubnetStatus::GetClassData() const { return &_class_data_; }

void SubnetStatus::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<SubnetStatus *>(to)->MergeFrom(
      static_cast<const SubnetStatus &>(from));
}


void SubnetStatus::MergeFrom(const SubnetStatus& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.SubnetStatus)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_allocationusage(from._internal_allocationusage());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_commonstatus()->::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::CommonStatus::MergeFrom(from._internal_commonstatus());
    }
    if (cached_has_bits & 0x00000004u) {
      ipcount_ = from.ipcount_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SubnetStatus::CopyFrom(const SubnetStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.SubnetStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SubnetStatus::IsInitialized() const {
  return true;
}

void SubnetStatus::InternalSwap(SubnetStatus* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &allocationusage_, GetArenaForAllocation(),
      &other->allocationusage_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SubnetStatus, ipcount_)
      + sizeof(SubnetStatus::ipcount_)
      - PROTOBUF_FIELD_OFFSET(SubnetStatus, commonstatus_)>(
          reinterpret_cast<char*>(&commonstatus_),
          reinterpret_cast<char*>(&other->commonstatus_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SubnetStatus::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_ssd_2dgit_2ejuniper_2enet_2fcontrail_2fcn2_2fcontrail_2fpkg_2fapis_2fcore_2fv1alpha1_2fgenerated_2eproto_getter, &descriptor_table_ssd_2dgit_2ejuniper_2enet_2fcontrail_2fcn2_2fcontrail_2fpkg_2fapis_2fcore_2fv1alpha1_2fgenerated_2eproto_once,
      file_level_metadata_ssd_2dgit_2ejuniper_2enet_2fcontrail_2fcn2_2fcontrail_2fpkg_2fapis_2fcore_2fv1alpha1_2fgenerated_2eproto[99]);
}

// ===================================================================

class Tag::_Internal {
 public:
  using HasBits = decltype(std::declval<Tag>()._has_bits_);
  static const ::k8s::io::apimachinery::pkg::apis::meta::v1::ObjectMeta& metadata(const Tag* msg);
  static void set_has_metadata(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::TagSpec& spec(const Tag* msg);
  static void set_has_spec(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::TagStatus& status(const Tag* msg);
  static void set_has_status(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::k8s::io::apimachinery::pkg::apis::meta::v1::ObjectMeta&
Tag::_Internal::metadata(const Tag* msg) {
  return *msg->metadata_;
}
const ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::TagSpec&
Tag::_Internal::spec(const Tag* msg) {
  return *msg->spec_;
}
const ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::TagStatus&
Tag::_Internal::status(const Tag* msg) {
  return *msg->status_;
}
void Tag::clear_metadata() {
  if (metadata_ != nullptr) metadata_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
Tag::Tag(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.Tag)
}
Tag::Tag(const Tag& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_metadata()) {
    metadata_ = new ::k8s::io::apimachinery::pkg::apis::meta::v1::ObjectMeta(*from.metadata_);
  } else {
    metadata_ = nullptr;
  }
  if (from._internal_has_spec()) {
    spec_ = new ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::TagSpec(*from.spec_);
  } else {
    spec_ = nullptr;
  }
  if (from._internal_has_status()) {
    status_ = new ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::TagStatus(*from.status_);
  } else {
    status_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.Tag)
}

inline void Tag::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&metadata_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&status_) -
    reinterpret_cast<char*>(&metadata_)) + sizeof(status_));
}

Tag::~Tag() {
  // @@protoc_insertion_point(destructor:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.Tag)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Tag::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete metadata_;
  if (this != internal_default_instance()) delete spec_;
  if (this != internal_default_instance()) delete status_;
}

void Tag::ArenaDtor(void* object) {
  Tag* _this = reinterpret_cast< Tag* >(object);
  (void)_this;
}
void Tag::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Tag::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Tag::Clear() {
// @@protoc_insertion_point(message_clear_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.Tag)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(metadata_ != nullptr);
      metadata_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(spec_ != nullptr);
      spec_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(status_ != nullptr);
      status_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Tag::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_metadata(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.TagSpec spec = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_spec(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.TagStatus status = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Tag::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.Tag)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::metadata(this), target, stream);
  }

  // optional .ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.TagSpec spec = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::spec(this), target, stream);
  }

  // optional .ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.TagStatus status = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::status(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.Tag)
  return target;
}

size_t Tag::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.Tag)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *metadata_);
    }

    // optional .ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.TagSpec spec = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *spec_);
    }

    // optional .ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.TagStatus status = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *status_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Tag::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Tag::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Tag::GetClassData() const { return &_class_data_; }

void Tag::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<Tag *>(to)->MergeFrom(
      static_cast<const Tag &>(from));
}


void Tag::MergeFrom(const Tag& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.Tag)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_metadata()->::k8s::io::apimachinery::pkg::apis::meta::v1::ObjectMeta::MergeFrom(from._internal_metadata());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_spec()->::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::TagSpec::MergeFrom(from._internal_spec());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_status()->::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::TagStatus::MergeFrom(from._internal_status());
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Tag::CopyFrom(const Tag& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.Tag)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Tag::IsInitialized() const {
  return true;
}

void Tag::InternalSwap(Tag* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Tag, status_)
      + sizeof(Tag::status_)
      - PROTOBUF_FIELD_OFFSET(Tag, metadata_)>(
          reinterpret_cast<char*>(&metadata_),
          reinterpret_cast<char*>(&other->metadata_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Tag::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_ssd_2dgit_2ejuniper_2enet_2fcontrail_2fcn2_2fcontrail_2fpkg_2fapis_2fcore_2fv1alpha1_2fgenerated_2eproto_getter, &descriptor_table_ssd_2dgit_2ejuniper_2enet_2fcontrail_2fcn2_2fcontrail_2fpkg_2fapis_2fcore_2fv1alpha1_2fgenerated_2eproto_once,
      file_level_metadata_ssd_2dgit_2ejuniper_2enet_2fcontrail_2fcn2_2fcontrail_2fpkg_2fapis_2fcore_2fv1alpha1_2fgenerated_2eproto[100]);
}

// ===================================================================

class TagList::_Internal {
 public:
  using HasBits = decltype(std::declval<TagList>()._has_bits_);
  static const ::k8s::io::apimachinery::pkg::apis::meta::v1::ListMeta& metadata(const TagList* msg);
  static void set_has_metadata(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::k8s::io::apimachinery::pkg::apis::meta::v1::ListMeta&
TagList::_Internal::metadata(const TagList* msg) {
  return *msg->metadata_;
}
void TagList::clear_metadata() {
  if (metadata_ != nullptr) metadata_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
TagList::TagList(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  items_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.TagList)
}
TagList::TagList(const TagList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      items_(from.items_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_metadata()) {
    metadata_ = new ::k8s::io::apimachinery::pkg::apis::meta::v1::ListMeta(*from.metadata_);
  } else {
    metadata_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.TagList)
}

inline void TagList::SharedCtor() {
metadata_ = nullptr;
}

TagList::~TagList() {
  // @@protoc_insertion_point(destructor:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.TagList)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void TagList::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete metadata_;
}

void TagList::ArenaDtor(void* object) {
  TagList* _this = reinterpret_cast< TagList* >(object);
  (void)_this;
}
void TagList::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TagList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TagList::Clear() {
// @@protoc_insertion_point(message_clear_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.TagList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  items_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(metadata_ != nullptr);
    metadata_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TagList::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_metadata(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.Tag items = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_items(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TagList::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.TagList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::metadata(this), target, stream);
  }

  // repeated .ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.Tag items = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_items_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_items(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.TagList)
  return target;
}

size_t TagList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.TagList)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.Tag items = 2;
  total_size += 1UL * this->_internal_items_size();
  for (const auto& msg : this->items_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional .k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *metadata_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TagList::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    TagList::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TagList::GetClassData() const { return &_class_data_; }

void TagList::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<TagList *>(to)->MergeFrom(
      static_cast<const TagList &>(from));
}


void TagList::MergeFrom(const TagList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.TagList)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  items_.MergeFrom(from.items_);
  if (from._internal_has_metadata()) {
    _internal_mutable_metadata()->::k8s::io::apimachinery::pkg::apis::meta::v1::ListMeta::MergeFrom(from._internal_metadata());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TagList::CopyFrom(const TagList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.TagList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TagList::IsInitialized() const {
  return true;
}

void TagList::InternalSwap(TagList* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  items_.InternalSwap(&other->items_);
  swap(metadata_, other->metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TagList::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_ssd_2dgit_2ejuniper_2enet_2fcontrail_2fcn2_2fcontrail_2fpkg_2fapis_2fcore_2fv1alpha1_2fgenerated_2eproto_getter, &descriptor_table_ssd_2dgit_2ejuniper_2enet_2fcontrail_2fcn2_2fcontrail_2fpkg_2fapis_2fcore_2fv1alpha1_2fgenerated_2eproto_once,
      file_level_metadata_ssd_2dgit_2ejuniper_2enet_2fcontrail_2fcn2_2fcontrail_2fpkg_2fapis_2fcore_2fv1alpha1_2fgenerated_2eproto[101]);
}

// ===================================================================

class TagSpec::_Internal {
 public:
  using HasBits = decltype(std::declval<TagSpec>()._has_bits_);
  static const ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::CommonSpec& commonspec(const TagSpec* msg);
  static void set_has_commonspec(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_tagtypename(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_tagvalue(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::ResourceReference& tagtypereference(const TagSpec* msg);
  static void set_has_tagtypereference(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

const ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::CommonSpec&
TagSpec::_Internal::commonspec(const TagSpec* msg) {
  return *msg->commonspec_;
}
const ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::ResourceReference&
TagSpec::_Internal::tagtypereference(const TagSpec* msg) {
  return *msg->tagtypereference_;
}
TagSpec::TagSpec(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.TagSpec)
}
TagSpec::TagSpec(const TagSpec& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  tagtypename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_tagtypename()) {
    tagtypename_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_tagtypename(), 
      GetArenaForAllocation());
  }
  tagvalue_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_tagvalue()) {
    tagvalue_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_tagvalue(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_commonspec()) {
    commonspec_ = new ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::CommonSpec(*from.commonspec_);
  } else {
    commonspec_ = nullptr;
  }
  if (from._internal_has_tagtypereference()) {
    tagtypereference_ = new ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::ResourceReference(*from.tagtypereference_);
  } else {
    tagtypereference_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.TagSpec)
}

inline void TagSpec::SharedCtor() {
tagtypename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
tagvalue_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&commonspec_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&tagtypereference_) -
    reinterpret_cast<char*>(&commonspec_)) + sizeof(tagtypereference_));
}

TagSpec::~TagSpec() {
  // @@protoc_insertion_point(destructor:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.TagSpec)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void TagSpec::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  tagtypename_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  tagvalue_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete commonspec_;
  if (this != internal_default_instance()) delete tagtypereference_;
}

void TagSpec::ArenaDtor(void* object) {
  TagSpec* _this = reinterpret_cast< TagSpec* >(object);
  (void)_this;
}
void TagSpec::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TagSpec::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TagSpec::Clear() {
// @@protoc_insertion_point(message_clear_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.TagSpec)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      tagtypename_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      tagvalue_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(commonspec_ != nullptr);
      commonspec_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(tagtypereference_ != nullptr);
      tagtypereference_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TagSpec::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.CommonSpec commonSpec = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_commonspec(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string tagTypeName = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_tagtypename();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.TagSpec.tagTypeName");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string tagValue = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_tagvalue();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.TagSpec.tagValue");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.ResourceReference tagTypeReference = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_tagtypereference(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TagSpec::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.TagSpec)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.CommonSpec commonSpec = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::commonspec(this), target, stream);
  }

  // optional string tagTypeName = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_tagtypename().data(), static_cast<int>(this->_internal_tagtypename().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.TagSpec.tagTypeName");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_tagtypename(), target);
  }

  // optional string tagValue = 3;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_tagvalue().data(), static_cast<int>(this->_internal_tagvalue().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.TagSpec.tagValue");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_tagvalue(), target);
  }

  // optional .ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.ResourceReference tagTypeReference = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::tagtypereference(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.TagSpec)
  return target;
}

size_t TagSpec::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.TagSpec)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string tagTypeName = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_tagtypename());
    }

    // optional string tagValue = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_tagvalue());
    }

    // optional .ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.CommonSpec commonSpec = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *commonspec_);
    }

    // optional .ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.ResourceReference tagTypeReference = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *tagtypereference_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TagSpec::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    TagSpec::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TagSpec::GetClassData() const { return &_class_data_; }

void TagSpec::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<TagSpec *>(to)->MergeFrom(
      static_cast<const TagSpec &>(from));
}


void TagSpec::MergeFrom(const TagSpec& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.TagSpec)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_tagtypename(from._internal_tagtypename());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_tagvalue(from._internal_tagvalue());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_commonspec()->::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::CommonSpec::MergeFrom(from._internal_commonspec());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_tagtypereference()->::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::ResourceReference::MergeFrom(from._internal_tagtypereference());
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TagSpec::CopyFrom(const TagSpec& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.TagSpec)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TagSpec::IsInitialized() const {
  return true;
}

void TagSpec::InternalSwap(TagSpec* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &tagtypename_, GetArenaForAllocation(),
      &other->tagtypename_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &tagvalue_, GetArenaForAllocation(),
      &other->tagvalue_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TagSpec, tagtypereference_)
      + sizeof(TagSpec::tagtypereference_)
      - PROTOBUF_FIELD_OFFSET(TagSpec, commonspec_)>(
          reinterpret_cast<char*>(&commonspec_),
          reinterpret_cast<char*>(&other->commonspec_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TagSpec::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_ssd_2dgit_2ejuniper_2enet_2fcontrail_2fcn2_2fcontrail_2fpkg_2fapis_2fcore_2fv1alpha1_2fgenerated_2eproto_getter, &descriptor_table_ssd_2dgit_2ejuniper_2enet_2fcontrail_2fcn2_2fcontrail_2fpkg_2fapis_2fcore_2fv1alpha1_2fgenerated_2eproto_once,
      file_level_metadata_ssd_2dgit_2ejuniper_2enet_2fcontrail_2fcn2_2fcontrail_2fpkg_2fapis_2fcore_2fv1alpha1_2fgenerated_2eproto[102]);
}

// ===================================================================

class TagStatus::_Internal {
 public:
  using HasBits = decltype(std::declval<TagStatus>()._has_bits_);
  static const ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::CommonStatus& commonstatus(const TagStatus* msg);
  static void set_has_commonstatus(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_tagid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::CommonStatus&
TagStatus::_Internal::commonstatus(const TagStatus* msg) {
  return *msg->commonstatus_;
}
TagStatus::TagStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.TagStatus)
}
TagStatus::TagStatus(const TagStatus& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  tagid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_tagid()) {
    tagid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_tagid(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_commonstatus()) {
    commonstatus_ = new ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::CommonStatus(*from.commonstatus_);
  } else {
    commonstatus_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.TagStatus)
}

inline void TagStatus::SharedCtor() {
tagid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
commonstatus_ = nullptr;
}

TagStatus::~TagStatus() {
  // @@protoc_insertion_point(destructor:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.TagStatus)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void TagStatus::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  tagid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete commonstatus_;
}

void TagStatus::ArenaDtor(void* object) {
  TagStatus* _this = reinterpret_cast< TagStatus* >(object);
  (void)_this;
}
void TagStatus::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TagStatus::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TagStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.TagStatus)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      tagid_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(commonstatus_ != nullptr);
      commonstatus_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TagStatus::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.CommonStatus commonStatus = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_commonstatus(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string tagId = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_tagid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.TagStatus.tagId");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TagStatus::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.TagStatus)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.CommonStatus commonStatus = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::commonstatus(this), target, stream);
  }

  // optional string tagId = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_tagid().data(), static_cast<int>(this->_internal_tagid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.TagStatus.tagId");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_tagid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.TagStatus)
  return target;
}

size_t TagStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.TagStatus)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string tagId = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_tagid());
    }

    // optional .ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.CommonStatus commonStatus = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *commonstatus_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TagStatus::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    TagStatus::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TagStatus::GetClassData() const { return &_class_data_; }

void TagStatus::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<TagStatus *>(to)->MergeFrom(
      static_cast<const TagStatus &>(from));
}


void TagStatus::MergeFrom(const TagStatus& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.TagStatus)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_tagid(from._internal_tagid());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_commonstatus()->::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::CommonStatus::MergeFrom(from._internal_commonstatus());
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TagStatus::CopyFrom(const TagStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.TagStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TagStatus::IsInitialized() const {
  return true;
}

void TagStatus::InternalSwap(TagStatus* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &tagid_, GetArenaForAllocation(),
      &other->tagid_, other->GetArenaForAllocation()
  );
  swap(commonstatus_, other->commonstatus_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TagStatus::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_ssd_2dgit_2ejuniper_2enet_2fcontrail_2fcn2_2fcontrail_2fpkg_2fapis_2fcore_2fv1alpha1_2fgenerated_2eproto_getter, &descriptor_table_ssd_2dgit_2ejuniper_2enet_2fcontrail_2fcn2_2fcontrail_2fpkg_2fapis_2fcore_2fv1alpha1_2fgenerated_2eproto_once,
      file_level_metadata_ssd_2dgit_2ejuniper_2enet_2fcontrail_2fcn2_2fcontrail_2fpkg_2fapis_2fcore_2fv1alpha1_2fgenerated_2eproto[103]);
}

// ===================================================================

class TagType::_Internal {
 public:
  using HasBits = decltype(std::declval<TagType>()._has_bits_);
  static const ::k8s::io::apimachinery::pkg::apis::meta::v1::ObjectMeta& metadata(const TagType* msg);
  static void set_has_metadata(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::TagTypeSpec& spec(const TagType* msg);
  static void set_has_spec(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::TagTypeStatus& status(const TagType* msg);
  static void set_has_status(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::k8s::io::apimachinery::pkg::apis::meta::v1::ObjectMeta&
TagType::_Internal::metadata(const TagType* msg) {
  return *msg->metadata_;
}
const ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::TagTypeSpec&
TagType::_Internal::spec(const TagType* msg) {
  return *msg->spec_;
}
const ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::TagTypeStatus&
TagType::_Internal::status(const TagType* msg) {
  return *msg->status_;
}
void TagType::clear_metadata() {
  if (metadata_ != nullptr) metadata_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
TagType::TagType(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.TagType)
}
TagType::TagType(const TagType& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_metadata()) {
    metadata_ = new ::k8s::io::apimachinery::pkg::apis::meta::v1::ObjectMeta(*from.metadata_);
  } else {
    metadata_ = nullptr;
  }
  if (from._internal_has_spec()) {
    spec_ = new ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::TagTypeSpec(*from.spec_);
  } else {
    spec_ = nullptr;
  }
  if (from._internal_has_status()) {
    status_ = new ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::TagTypeStatus(*from.status_);
  } else {
    status_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.TagType)
}

inline void TagType::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&metadata_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&status_) -
    reinterpret_cast<char*>(&metadata_)) + sizeof(status_));
}

TagType::~TagType() {
  // @@protoc_insertion_point(destructor:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.TagType)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void TagType::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete metadata_;
  if (this != internal_default_instance()) delete spec_;
  if (this != internal_default_instance()) delete status_;
}

void TagType::ArenaDtor(void* object) {
  TagType* _this = reinterpret_cast< TagType* >(object);
  (void)_this;
}
void TagType::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TagType::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TagType::Clear() {
// @@protoc_insertion_point(message_clear_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.TagType)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(metadata_ != nullptr);
      metadata_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(spec_ != nullptr);
      spec_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(status_ != nullptr);
      status_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TagType::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_metadata(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.TagTypeSpec spec = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_spec(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.TagTypeStatus status = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TagType::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.TagType)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::metadata(this), target, stream);
  }

  // optional .ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.TagTypeSpec spec = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::spec(this), target, stream);
  }

  // optional .ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.TagTypeStatus status = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::status(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.TagType)
  return target;
}

size_t TagType::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.TagType)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *metadata_);
    }

    // optional .ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.TagTypeSpec spec = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *spec_);
    }

    // optional .ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.TagTypeStatus status = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *status_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TagType::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    TagType::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TagType::GetClassData() const { return &_class_data_; }

void TagType::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<TagType *>(to)->MergeFrom(
      static_cast<const TagType &>(from));
}


void TagType::MergeFrom(const TagType& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.TagType)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_metadata()->::k8s::io::apimachinery::pkg::apis::meta::v1::ObjectMeta::MergeFrom(from._internal_metadata());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_spec()->::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::TagTypeSpec::MergeFrom(from._internal_spec());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_status()->::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::TagTypeStatus::MergeFrom(from._internal_status());
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TagType::CopyFrom(const TagType& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.TagType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TagType::IsInitialized() const {
  return true;
}

void TagType::InternalSwap(TagType* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TagType, status_)
      + sizeof(TagType::status_)
      - PROTOBUF_FIELD_OFFSET(TagType, metadata_)>(
          reinterpret_cast<char*>(&metadata_),
          reinterpret_cast<char*>(&other->metadata_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TagType::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_ssd_2dgit_2ejuniper_2enet_2fcontrail_2fcn2_2fcontrail_2fpkg_2fapis_2fcore_2fv1alpha1_2fgenerated_2eproto_getter, &descriptor_table_ssd_2dgit_2ejuniper_2enet_2fcontrail_2fcn2_2fcontrail_2fpkg_2fapis_2fcore_2fv1alpha1_2fgenerated_2eproto_once,
      file_level_metadata_ssd_2dgit_2ejuniper_2enet_2fcontrail_2fcn2_2fcontrail_2fpkg_2fapis_2fcore_2fv1alpha1_2fgenerated_2eproto[104]);
}

// ===================================================================

class TagTypeList::_Internal {
 public:
  using HasBits = decltype(std::declval<TagTypeList>()._has_bits_);
  static const ::k8s::io::apimachinery::pkg::apis::meta::v1::ListMeta& metadata(const TagTypeList* msg);
  static void set_has_metadata(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::k8s::io::apimachinery::pkg::apis::meta::v1::ListMeta&
TagTypeList::_Internal::metadata(const TagTypeList* msg) {
  return *msg->metadata_;
}
void TagTypeList::clear_metadata() {
  if (metadata_ != nullptr) metadata_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
TagTypeList::TagTypeList(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  items_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.TagTypeList)
}
TagTypeList::TagTypeList(const TagTypeList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      items_(from.items_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_metadata()) {
    metadata_ = new ::k8s::io::apimachinery::pkg::apis::meta::v1::ListMeta(*from.metadata_);
  } else {
    metadata_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.TagTypeList)
}

inline void TagTypeList::SharedCtor() {
metadata_ = nullptr;
}

TagTypeList::~TagTypeList() {
  // @@protoc_insertion_point(destructor:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.TagTypeList)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void TagTypeList::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete metadata_;
}

void TagTypeList::ArenaDtor(void* object) {
  TagTypeList* _this = reinterpret_cast< TagTypeList* >(object);
  (void)_this;
}
void TagTypeList::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TagTypeList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TagTypeList::Clear() {
// @@protoc_insertion_point(message_clear_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.TagTypeList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  items_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(metadata_ != nullptr);
    metadata_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TagTypeList::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_metadata(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.TagType items = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_items(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TagTypeList::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.TagTypeList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::metadata(this), target, stream);
  }

  // repeated .ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.TagType items = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_items_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_items(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.TagTypeList)
  return target;
}

size_t TagTypeList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.TagTypeList)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.TagType items = 2;
  total_size += 1UL * this->_internal_items_size();
  for (const auto& msg : this->items_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional .k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *metadata_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TagTypeList::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    TagTypeList::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TagTypeList::GetClassData() const { return &_class_data_; }

void TagTypeList::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<TagTypeList *>(to)->MergeFrom(
      static_cast<const TagTypeList &>(from));
}


void TagTypeList::MergeFrom(const TagTypeList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.TagTypeList)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  items_.MergeFrom(from.items_);
  if (from._internal_has_metadata()) {
    _internal_mutable_metadata()->::k8s::io::apimachinery::pkg::apis::meta::v1::ListMeta::MergeFrom(from._internal_metadata());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TagTypeList::CopyFrom(const TagTypeList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.TagTypeList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TagTypeList::IsInitialized() const {
  return true;
}

void TagTypeList::InternalSwap(TagTypeList* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  items_.InternalSwap(&other->items_);
  swap(metadata_, other->metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TagTypeList::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_ssd_2dgit_2ejuniper_2enet_2fcontrail_2fcn2_2fcontrail_2fpkg_2fapis_2fcore_2fv1alpha1_2fgenerated_2eproto_getter, &descriptor_table_ssd_2dgit_2ejuniper_2enet_2fcontrail_2fcn2_2fcontrail_2fpkg_2fapis_2fcore_2fv1alpha1_2fgenerated_2eproto_once,
      file_level_metadata_ssd_2dgit_2ejuniper_2enet_2fcontrail_2fcn2_2fcontrail_2fpkg_2fapis_2fcore_2fv1alpha1_2fgenerated_2eproto[105]);
}

// ===================================================================

class TagTypeSpec::_Internal {
 public:
  using HasBits = decltype(std::declval<TagTypeSpec>()._has_bits_);
  static const ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::CommonSpec& commonspec(const TagTypeSpec* msg);
  static void set_has_commonspec(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::CommonSpec&
TagTypeSpec::_Internal::commonspec(const TagTypeSpec* msg) {
  return *msg->commonspec_;
}
TagTypeSpec::TagTypeSpec(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.TagTypeSpec)
}
TagTypeSpec::TagTypeSpec(const TagTypeSpec& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_commonspec()) {
    commonspec_ = new ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::CommonSpec(*from.commonspec_);
  } else {
    commonspec_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.TagTypeSpec)
}

inline void TagTypeSpec::SharedCtor() {
commonspec_ = nullptr;
}

TagTypeSpec::~TagTypeSpec() {
  // @@protoc_insertion_point(destructor:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.TagTypeSpec)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void TagTypeSpec::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete commonspec_;
}

void TagTypeSpec::ArenaDtor(void* object) {
  TagTypeSpec* _this = reinterpret_cast< TagTypeSpec* >(object);
  (void)_this;
}
void TagTypeSpec::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TagTypeSpec::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TagTypeSpec::Clear() {
// @@protoc_insertion_point(message_clear_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.TagTypeSpec)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(commonspec_ != nullptr);
    commonspec_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TagTypeSpec::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.CommonSpec commonSpec = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_commonspec(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TagTypeSpec::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.TagTypeSpec)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.CommonSpec commonSpec = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::commonspec(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.TagTypeSpec)
  return target;
}

size_t TagTypeSpec::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.TagTypeSpec)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.CommonSpec commonSpec = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *commonspec_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TagTypeSpec::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    TagTypeSpec::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TagTypeSpec::GetClassData() const { return &_class_data_; }

void TagTypeSpec::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<TagTypeSpec *>(to)->MergeFrom(
      static_cast<const TagTypeSpec &>(from));
}


void TagTypeSpec::MergeFrom(const TagTypeSpec& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.TagTypeSpec)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_commonspec()) {
    _internal_mutable_commonspec()->::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::CommonSpec::MergeFrom(from._internal_commonspec());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TagTypeSpec::CopyFrom(const TagTypeSpec& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.TagTypeSpec)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TagTypeSpec::IsInitialized() const {
  return true;
}

void TagTypeSpec::InternalSwap(TagTypeSpec* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(commonspec_, other->commonspec_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TagTypeSpec::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_ssd_2dgit_2ejuniper_2enet_2fcontrail_2fcn2_2fcontrail_2fpkg_2fapis_2fcore_2fv1alpha1_2fgenerated_2eproto_getter, &descriptor_table_ssd_2dgit_2ejuniper_2enet_2fcontrail_2fcn2_2fcontrail_2fpkg_2fapis_2fcore_2fv1alpha1_2fgenerated_2eproto_once,
      file_level_metadata_ssd_2dgit_2ejuniper_2enet_2fcontrail_2fcn2_2fcontrail_2fpkg_2fapis_2fcore_2fv1alpha1_2fgenerated_2eproto[106]);
}

// ===================================================================

class TagTypeStatus::_Internal {
 public:
  using HasBits = decltype(std::declval<TagTypeStatus>()._has_bits_);
  static const ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::CommonStatus& commonstatus(const TagTypeStatus* msg);
  static void set_has_commonstatus(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_tagtypeid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::CommonStatus&
TagTypeStatus::_Internal::commonstatus(const TagTypeStatus* msg) {
  return *msg->commonstatus_;
}
TagTypeStatus::TagTypeStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.TagTypeStatus)
}
TagTypeStatus::TagTypeStatus(const TagTypeStatus& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  tagtypeid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_tagtypeid()) {
    tagtypeid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_tagtypeid(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_commonstatus()) {
    commonstatus_ = new ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::CommonStatus(*from.commonstatus_);
  } else {
    commonstatus_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.TagTypeStatus)
}

inline void TagTypeStatus::SharedCtor() {
tagtypeid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
commonstatus_ = nullptr;
}

TagTypeStatus::~TagTypeStatus() {
  // @@protoc_insertion_point(destructor:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.TagTypeStatus)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void TagTypeStatus::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  tagtypeid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete commonstatus_;
}

void TagTypeStatus::ArenaDtor(void* object) {
  TagTypeStatus* _this = reinterpret_cast< TagTypeStatus* >(object);
  (void)_this;
}
void TagTypeStatus::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TagTypeStatus::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TagTypeStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.TagTypeStatus)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      tagtypeid_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(commonstatus_ != nullptr);
      commonstatus_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TagTypeStatus::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.CommonStatus commonStatus = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_commonstatus(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string tagTypeId = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_tagtypeid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.TagTypeStatus.tagTypeId");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TagTypeStatus::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.TagTypeStatus)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.CommonStatus commonStatus = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::commonstatus(this), target, stream);
  }

  // optional string tagTypeId = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_tagtypeid().data(), static_cast<int>(this->_internal_tagtypeid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.TagTypeStatus.tagTypeId");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_tagtypeid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.TagTypeStatus)
  return target;
}

size_t TagTypeStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.TagTypeStatus)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string tagTypeId = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_tagtypeid());
    }

    // optional .ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.CommonStatus commonStatus = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *commonstatus_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TagTypeStatus::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    TagTypeStatus::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TagTypeStatus::GetClassData() const { return &_class_data_; }

void TagTypeStatus::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<TagTypeStatus *>(to)->MergeFrom(
      static_cast<const TagTypeStatus &>(from));
}


void TagTypeStatus::MergeFrom(const TagTypeStatus& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.TagTypeStatus)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_tagtypeid(from._internal_tagtypeid());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_commonstatus()->::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::CommonStatus::MergeFrom(from._internal_commonstatus());
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TagTypeStatus::CopyFrom(const TagTypeStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.TagTypeStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TagTypeStatus::IsInitialized() const {
  return true;
}

void TagTypeStatus::InternalSwap(TagTypeStatus* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &tagtypeid_, GetArenaForAllocation(),
      &other->tagtypeid_, other->GetArenaForAllocation()
  );
  swap(commonstatus_, other->commonstatus_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TagTypeStatus::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_ssd_2dgit_2ejuniper_2enet_2fcontrail_2fcn2_2fcontrail_2fpkg_2fapis_2fcore_2fv1alpha1_2fgenerated_2eproto_getter, &descriptor_table_ssd_2dgit_2ejuniper_2enet_2fcontrail_2fcn2_2fcontrail_2fpkg_2fapis_2fcore_2fv1alpha1_2fgenerated_2eproto_once,
      file_level_metadata_ssd_2dgit_2ejuniper_2enet_2fcontrail_2fcn2_2fcontrail_2fpkg_2fapis_2fcore_2fv1alpha1_2fgenerated_2eproto[107]);
}

// ===================================================================

class VirtualMachine::_Internal {
 public:
  using HasBits = decltype(std::declval<VirtualMachine>()._has_bits_);
  static const ::k8s::io::apimachinery::pkg::apis::meta::v1::ObjectMeta& metadata(const VirtualMachine* msg);
  static void set_has_metadata(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::VirtualMachineSpec& spec(const VirtualMachine* msg);
  static void set_has_spec(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::VirtualMachineStatus& status(const VirtualMachine* msg);
  static void set_has_status(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::k8s::io::apimachinery::pkg::apis::meta::v1::ObjectMeta&
VirtualMachine::_Internal::metadata(const VirtualMachine* msg) {
  return *msg->metadata_;
}
const ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::VirtualMachineSpec&
VirtualMachine::_Internal::spec(const VirtualMachine* msg) {
  return *msg->spec_;
}
const ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::VirtualMachineStatus&
VirtualMachine::_Internal::status(const VirtualMachine* msg) {
  return *msg->status_;
}
void VirtualMachine::clear_metadata() {
  if (metadata_ != nullptr) metadata_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
VirtualMachine::VirtualMachine(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.VirtualMachine)
}
VirtualMachine::VirtualMachine(const VirtualMachine& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_metadata()) {
    metadata_ = new ::k8s::io::apimachinery::pkg::apis::meta::v1::ObjectMeta(*from.metadata_);
  } else {
    metadata_ = nullptr;
  }
  if (from._internal_has_spec()) {
    spec_ = new ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::VirtualMachineSpec(*from.spec_);
  } else {
    spec_ = nullptr;
  }
  if (from._internal_has_status()) {
    status_ = new ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::VirtualMachineStatus(*from.status_);
  } else {
    status_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.VirtualMachine)
}

inline void VirtualMachine::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&metadata_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&status_) -
    reinterpret_cast<char*>(&metadata_)) + sizeof(status_));
}

VirtualMachine::~VirtualMachine() {
  // @@protoc_insertion_point(destructor:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.VirtualMachine)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void VirtualMachine::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete metadata_;
  if (this != internal_default_instance()) delete spec_;
  if (this != internal_default_instance()) delete status_;
}

void VirtualMachine::ArenaDtor(void* object) {
  VirtualMachine* _this = reinterpret_cast< VirtualMachine* >(object);
  (void)_this;
}
void VirtualMachine::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void VirtualMachine::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void VirtualMachine::Clear() {
// @@protoc_insertion_point(message_clear_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.VirtualMachine)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(metadata_ != nullptr);
      metadata_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(spec_ != nullptr);
      spec_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(status_ != nullptr);
      status_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* VirtualMachine::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_metadata(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.VirtualMachineSpec spec = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_spec(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.VirtualMachineStatus status = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* VirtualMachine::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.VirtualMachine)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::metadata(this), target, stream);
  }

  // optional .ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.VirtualMachineSpec spec = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::spec(this), target, stream);
  }

  // optional .ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.VirtualMachineStatus status = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::status(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.VirtualMachine)
  return target;
}

size_t VirtualMachine::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.VirtualMachine)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *metadata_);
    }

    // optional .ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.VirtualMachineSpec spec = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *spec_);
    }

    // optional .ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.VirtualMachineStatus status = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *status_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData VirtualMachine::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    VirtualMachine::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*VirtualMachine::GetClassData() const { return &_class_data_; }

void VirtualMachine::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<VirtualMachine *>(to)->MergeFrom(
      static_cast<const VirtualMachine &>(from));
}


void VirtualMachine::MergeFrom(const VirtualMachine& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.VirtualMachine)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_metadata()->::k8s::io::apimachinery::pkg::apis::meta::v1::ObjectMeta::MergeFrom(from._internal_metadata());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_spec()->::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::VirtualMachineSpec::MergeFrom(from._internal_spec());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_status()->::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::VirtualMachineStatus::MergeFrom(from._internal_status());
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void VirtualMachine::CopyFrom(const VirtualMachine& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.VirtualMachine)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VirtualMachine::IsInitialized() const {
  return true;
}

void VirtualMachine::InternalSwap(VirtualMachine* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(VirtualMachine, status_)
      + sizeof(VirtualMachine::status_)
      - PROTOBUF_FIELD_OFFSET(VirtualMachine, metadata_)>(
          reinterpret_cast<char*>(&metadata_),
          reinterpret_cast<char*>(&other->metadata_));
}

::PROTOBUF_NAMESPACE_ID::Metadata VirtualMachine::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_ssd_2dgit_2ejuniper_2enet_2fcontrail_2fcn2_2fcontrail_2fpkg_2fapis_2fcore_2fv1alpha1_2fgenerated_2eproto_getter, &descriptor_table_ssd_2dgit_2ejuniper_2enet_2fcontrail_2fcn2_2fcontrail_2fpkg_2fapis_2fcore_2fv1alpha1_2fgenerated_2eproto_once,
      file_level_metadata_ssd_2dgit_2ejuniper_2enet_2fcontrail_2fcn2_2fcontrail_2fpkg_2fapis_2fcore_2fv1alpha1_2fgenerated_2eproto[108]);
}

// ===================================================================

class VirtualMachineInterface::_Internal {
 public:
  using HasBits = decltype(std::declval<VirtualMachineInterface>()._has_bits_);
  static const ::k8s::io::apimachinery::pkg::apis::meta::v1::ObjectMeta& metadata(const VirtualMachineInterface* msg);
  static void set_has_metadata(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::VirtualMachineInterfaceSpec& spec(const VirtualMachineInterface* msg);
  static void set_has_spec(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::VirtualMachineInterfaceStatus& status(const VirtualMachineInterface* msg);
  static void set_has_status(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::k8s::io::apimachinery::pkg::apis::meta::v1::ObjectMeta&
VirtualMachineInterface::_Internal::metadata(const VirtualMachineInterface* msg) {
  return *msg->metadata_;
}
const ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::VirtualMachineInterfaceSpec&
VirtualMachineInterface::_Internal::spec(const VirtualMachineInterface* msg) {
  return *msg->spec_;
}
const ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::VirtualMachineInterfaceStatus&
VirtualMachineInterface::_Internal::status(const VirtualMachineInterface* msg) {
  return *msg->status_;
}
void VirtualMachineInterface::clear_metadata() {
  if (metadata_ != nullptr) metadata_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
VirtualMachineInterface::VirtualMachineInterface(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.VirtualMachineInterface)
}
VirtualMachineInterface::VirtualMachineInterface(const VirtualMachineInterface& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_metadata()) {
    metadata_ = new ::k8s::io::apimachinery::pkg::apis::meta::v1::ObjectMeta(*from.metadata_);
  } else {
    metadata_ = nullptr;
  }
  if (from._internal_has_spec()) {
    spec_ = new ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::VirtualMachineInterfaceSpec(*from.spec_);
  } else {
    spec_ = nullptr;
  }
  if (from._internal_has_status()) {
    status_ = new ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::VirtualMachineInterfaceStatus(*from.status_);
  } else {
    status_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.VirtualMachineInterface)
}

inline void VirtualMachineInterface::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&metadata_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&status_) -
    reinterpret_cast<char*>(&metadata_)) + sizeof(status_));
}

VirtualMachineInterface::~VirtualMachineInterface() {
  // @@protoc_insertion_point(destructor:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.VirtualMachineInterface)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void VirtualMachineInterface::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete metadata_;
  if (this != internal_default_instance()) delete spec_;
  if (this != internal_default_instance()) delete status_;
}

void VirtualMachineInterface::ArenaDtor(void* object) {
  VirtualMachineInterface* _this = reinterpret_cast< VirtualMachineInterface* >(object);
  (void)_this;
}
void VirtualMachineInterface::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void VirtualMachineInterface::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void VirtualMachineInterface::Clear() {
// @@protoc_insertion_point(message_clear_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.VirtualMachineInterface)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(metadata_ != nullptr);
      metadata_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(spec_ != nullptr);
      spec_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(status_ != nullptr);
      status_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* VirtualMachineInterface::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_metadata(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.VirtualMachineInterfaceSpec spec = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_spec(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.VirtualMachineInterfaceStatus status = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* VirtualMachineInterface::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.VirtualMachineInterface)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::metadata(this), target, stream);
  }

  // optional .ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.VirtualMachineInterfaceSpec spec = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::spec(this), target, stream);
  }

  // optional .ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.VirtualMachineInterfaceStatus status = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::status(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.VirtualMachineInterface)
  return target;
}

size_t VirtualMachineInterface::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.VirtualMachineInterface)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *metadata_);
    }

    // optional .ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.VirtualMachineInterfaceSpec spec = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *spec_);
    }

    // optional .ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.VirtualMachineInterfaceStatus status = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *status_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData VirtualMachineInterface::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    VirtualMachineInterface::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*VirtualMachineInterface::GetClassData() const { return &_class_data_; }

void VirtualMachineInterface::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<VirtualMachineInterface *>(to)->MergeFrom(
      static_cast<const VirtualMachineInterface &>(from));
}


void VirtualMachineInterface::MergeFrom(const VirtualMachineInterface& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.VirtualMachineInterface)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_metadata()->::k8s::io::apimachinery::pkg::apis::meta::v1::ObjectMeta::MergeFrom(from._internal_metadata());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_spec()->::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::VirtualMachineInterfaceSpec::MergeFrom(from._internal_spec());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_status()->::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::VirtualMachineInterfaceStatus::MergeFrom(from._internal_status());
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void VirtualMachineInterface::CopyFrom(const VirtualMachineInterface& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.VirtualMachineInterface)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VirtualMachineInterface::IsInitialized() const {
  return true;
}

void VirtualMachineInterface::InternalSwap(VirtualMachineInterface* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(VirtualMachineInterface, status_)
      + sizeof(VirtualMachineInterface::status_)
      - PROTOBUF_FIELD_OFFSET(VirtualMachineInterface, metadata_)>(
          reinterpret_cast<char*>(&metadata_),
          reinterpret_cast<char*>(&other->metadata_));
}

::PROTOBUF_NAMESPACE_ID::Metadata VirtualMachineInterface::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_ssd_2dgit_2ejuniper_2enet_2fcontrail_2fcn2_2fcontrail_2fpkg_2fapis_2fcore_2fv1alpha1_2fgenerated_2eproto_getter, &descriptor_table_ssd_2dgit_2ejuniper_2enet_2fcontrail_2fcn2_2fcontrail_2fpkg_2fapis_2fcore_2fv1alpha1_2fgenerated_2eproto_once,
      file_level_metadata_ssd_2dgit_2ejuniper_2enet_2fcontrail_2fcn2_2fcontrail_2fpkg_2fapis_2fcore_2fv1alpha1_2fgenerated_2eproto[109]);
}

// ===================================================================

class VirtualMachineInterfaceList::_Internal {
 public:
  using HasBits = decltype(std::declval<VirtualMachineInterfaceList>()._has_bits_);
  static const ::k8s::io::apimachinery::pkg::apis::meta::v1::ListMeta& metadata(const VirtualMachineInterfaceList* msg);
  static void set_has_metadata(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::k8s::io::apimachinery::pkg::apis::meta::v1::ListMeta&
VirtualMachineInterfaceList::_Internal::metadata(const VirtualMachineInterfaceList* msg) {
  return *msg->metadata_;
}
void VirtualMachineInterfaceList::clear_metadata() {
  if (metadata_ != nullptr) metadata_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
VirtualMachineInterfaceList::VirtualMachineInterfaceList(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  items_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.VirtualMachineInterfaceList)
}
VirtualMachineInterfaceList::VirtualMachineInterfaceList(const VirtualMachineInterfaceList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      items_(from.items_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_metadata()) {
    metadata_ = new ::k8s::io::apimachinery::pkg::apis::meta::v1::ListMeta(*from.metadata_);
  } else {
    metadata_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.VirtualMachineInterfaceList)
}

inline void VirtualMachineInterfaceList::SharedCtor() {
metadata_ = nullptr;
}

VirtualMachineInterfaceList::~VirtualMachineInterfaceList() {
  // @@protoc_insertion_point(destructor:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.VirtualMachineInterfaceList)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void VirtualMachineInterfaceList::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete metadata_;
}

void VirtualMachineInterfaceList::ArenaDtor(void* object) {
  VirtualMachineInterfaceList* _this = reinterpret_cast< VirtualMachineInterfaceList* >(object);
  (void)_this;
}
void VirtualMachineInterfaceList::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void VirtualMachineInterfaceList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void VirtualMachineInterfaceList::Clear() {
// @@protoc_insertion_point(message_clear_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.VirtualMachineInterfaceList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  items_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(metadata_ != nullptr);
    metadata_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* VirtualMachineInterfaceList::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_metadata(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.VirtualMachineInterface items = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_items(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* VirtualMachineInterfaceList::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.VirtualMachineInterfaceList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::metadata(this), target, stream);
  }

  // repeated .ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.VirtualMachineInterface items = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_items_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_items(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.VirtualMachineInterfaceList)
  return target;
}

size_t VirtualMachineInterfaceList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.VirtualMachineInterfaceList)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.VirtualMachineInterface items = 2;
  total_size += 1UL * this->_internal_items_size();
  for (const auto& msg : this->items_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional .k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *metadata_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData VirtualMachineInterfaceList::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    VirtualMachineInterfaceList::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*VirtualMachineInterfaceList::GetClassData() const { return &_class_data_; }

void VirtualMachineInterfaceList::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<VirtualMachineInterfaceList *>(to)->MergeFrom(
      static_cast<const VirtualMachineInterfaceList &>(from));
}


void VirtualMachineInterfaceList::MergeFrom(const VirtualMachineInterfaceList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.VirtualMachineInterfaceList)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  items_.MergeFrom(from.items_);
  if (from._internal_has_metadata()) {
    _internal_mutable_metadata()->::k8s::io::apimachinery::pkg::apis::meta::v1::ListMeta::MergeFrom(from._internal_metadata());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void VirtualMachineInterfaceList::CopyFrom(const VirtualMachineInterfaceList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.VirtualMachineInterfaceList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VirtualMachineInterfaceList::IsInitialized() const {
  return true;
}

void VirtualMachineInterfaceList::InternalSwap(VirtualMachineInterfaceList* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  items_.InternalSwap(&other->items_);
  swap(metadata_, other->metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata VirtualMachineInterfaceList::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_ssd_2dgit_2ejuniper_2enet_2fcontrail_2fcn2_2fcontrail_2fpkg_2fapis_2fcore_2fv1alpha1_2fgenerated_2eproto_getter, &descriptor_table_ssd_2dgit_2ejuniper_2enet_2fcontrail_2fcn2_2fcontrail_2fpkg_2fapis_2fcore_2fv1alpha1_2fgenerated_2eproto_once,
      file_level_metadata_ssd_2dgit_2ejuniper_2enet_2fcontrail_2fcn2_2fcontrail_2fpkg_2fapis_2fcore_2fv1alpha1_2fgenerated_2eproto[110]);
}

// ===================================================================

class VirtualMachineInterfaceProperties::_Internal {
 public:
  using HasBits = decltype(std::declval<VirtualMachineInterfaceProperties>()._has_bits_);
  static void set_has_subinterfacevlantag(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

VirtualMachineInterfaceProperties::VirtualMachineInterfaceProperties(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.VirtualMachineInterfaceProperties)
}
VirtualMachineInterfaceProperties::VirtualMachineInterfaceProperties(const VirtualMachineInterfaceProperties& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  subinterfacevlantag_ = from.subinterfacevlantag_;
  // @@protoc_insertion_point(copy_constructor:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.VirtualMachineInterfaceProperties)
}

inline void VirtualMachineInterfaceProperties::SharedCtor() {
subinterfacevlantag_ = 0u;
}

VirtualMachineInterfaceProperties::~VirtualMachineInterfaceProperties() {
  // @@protoc_insertion_point(destructor:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.VirtualMachineInterfaceProperties)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void VirtualMachineInterfaceProperties::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void VirtualMachineInterfaceProperties::ArenaDtor(void* object) {
  VirtualMachineInterfaceProperties* _this = reinterpret_cast< VirtualMachineInterfaceProperties* >(object);
  (void)_this;
}
void VirtualMachineInterfaceProperties::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void VirtualMachineInterfaceProperties::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void VirtualMachineInterfaceProperties::Clear() {
// @@protoc_insertion_point(message_clear_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.VirtualMachineInterfaceProperties)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  subinterfacevlantag_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* VirtualMachineInterfaceProperties::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 subInterfaceVlanTag = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_subinterfacevlantag(&has_bits);
          subinterfacevlantag_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* VirtualMachineInterfaceProperties::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.VirtualMachineInterfaceProperties)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 subInterfaceVlanTag = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_subinterfacevlantag(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.VirtualMachineInterfaceProperties)
  return target;
}

size_t VirtualMachineInterfaceProperties::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.VirtualMachineInterfaceProperties)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 subInterfaceVlanTag = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_subinterfacevlantag());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData VirtualMachineInterfaceProperties::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    VirtualMachineInterfaceProperties::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*VirtualMachineInterfaceProperties::GetClassData() const { return &_class_data_; }

void VirtualMachineInterfaceProperties::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<VirtualMachineInterfaceProperties *>(to)->MergeFrom(
      static_cast<const VirtualMachineInterfaceProperties &>(from));
}


void VirtualMachineInterfaceProperties::MergeFrom(const VirtualMachineInterfaceProperties& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.VirtualMachineInterfaceProperties)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_subinterfacevlantag()) {
    _internal_set_subinterfacevlantag(from._internal_subinterfacevlantag());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void VirtualMachineInterfaceProperties::CopyFrom(const VirtualMachineInterfaceProperties& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.VirtualMachineInterfaceProperties)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VirtualMachineInterfaceProperties::IsInitialized() const {
  return true;
}

void VirtualMachineInterfaceProperties::InternalSwap(VirtualMachineInterfaceProperties* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(subinterfacevlantag_, other->subinterfacevlantag_);
}

::PROTOBUF_NAMESPACE_ID::Metadata VirtualMachineInterfaceProperties::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_ssd_2dgit_2ejuniper_2enet_2fcontrail_2fcn2_2fcontrail_2fpkg_2fapis_2fcore_2fv1alpha1_2fgenerated_2eproto_getter, &descriptor_table_ssd_2dgit_2ejuniper_2enet_2fcontrail_2fcn2_2fcontrail_2fpkg_2fapis_2fcore_2fv1alpha1_2fgenerated_2eproto_once,
      file_level_metadata_ssd_2dgit_2ejuniper_2enet_2fcontrail_2fcn2_2fcontrail_2fpkg_2fapis_2fcore_2fv1alpha1_2fgenerated_2eproto[111]);
}

// ===================================================================

class VirtualMachineInterfaceSpec::_Internal {
 public:
  using HasBits = decltype(std::declval<VirtualMachineInterfaceSpec>()._has_bits_);
  static const ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::CommonSpec& commonspec(const VirtualMachineInterfaceSpec* msg);
  static void set_has_commonspec(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::k8s::io::api::core::v1::ObjectReference& parent(const VirtualMachineInterfaceSpec* msg);
  static void set_has_parent(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::MACAddresses& virtualmachineinterfacemacaddresses(const VirtualMachineInterfaceSpec* msg);
  static void set_has_virtualmachineinterfacemacaddresses(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::ResourceReference& virtualnetworkreference(const VirtualMachineInterfaceSpec* msg);
  static void set_has_virtualnetworkreference(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_virtualmachineinterfacedisablepolicy(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static const ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::AllowedAddressPairs& allowedaddresspairs(const VirtualMachineInterfaceSpec* msg);
  static void set_has_allowedaddresspairs(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_portsecurityenabled(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static const ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::VirtualMachineInterfaceProperties& properties(const VirtualMachineInterfaceSpec* msg);
  static void set_has_properties(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
};

const ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::CommonSpec&
VirtualMachineInterfaceSpec::_Internal::commonspec(const VirtualMachineInterfaceSpec* msg) {
  return *msg->commonspec_;
}
const ::k8s::io::api::core::v1::ObjectReference&
VirtualMachineInterfaceSpec::_Internal::parent(const VirtualMachineInterfaceSpec* msg) {
  return *msg->parent_;
}
const ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::MACAddresses&
VirtualMachineInterfaceSpec::_Internal::virtualmachineinterfacemacaddresses(const VirtualMachineInterfaceSpec* msg) {
  return *msg->virtualmachineinterfacemacaddresses_;
}
const ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::ResourceReference&
VirtualMachineInterfaceSpec::_Internal::virtualnetworkreference(const VirtualMachineInterfaceSpec* msg) {
  return *msg->virtualnetworkreference_;
}
const ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::AllowedAddressPairs&
VirtualMachineInterfaceSpec::_Internal::allowedaddresspairs(const VirtualMachineInterfaceSpec* msg) {
  return *msg->allowedaddresspairs_;
}
const ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::VirtualMachineInterfaceProperties&
VirtualMachineInterfaceSpec::_Internal::properties(const VirtualMachineInterfaceSpec* msg) {
  return *msg->properties_;
}
void VirtualMachineInterfaceSpec::clear_parent() {
  if (parent_ != nullptr) parent_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
VirtualMachineInterfaceSpec::VirtualMachineInterfaceSpec(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  virtualmachinereferences_(arena),
  virtualmachineinterfacereferences_(arena),
  tagreferences_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.VirtualMachineInterfaceSpec)
}
VirtualMachineInterfaceSpec::VirtualMachineInterfaceSpec(const VirtualMachineInterfaceSpec& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      virtualmachinereferences_(from.virtualmachinereferences_),
      virtualmachineinterfacereferences_(from.virtualmachineinterfacereferences_),
      tagreferences_(from.tagreferences_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_commonspec()) {
    commonspec_ = new ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::CommonSpec(*from.commonspec_);
  } else {
    commonspec_ = nullptr;
  }
  if (from._internal_has_parent()) {
    parent_ = new ::k8s::io::api::core::v1::ObjectReference(*from.parent_);
  } else {
    parent_ = nullptr;
  }
  if (from._internal_has_virtualmachineinterfacemacaddresses()) {
    virtualmachineinterfacemacaddresses_ = new ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::MACAddresses(*from.virtualmachineinterfacemacaddresses_);
  } else {
    virtualmachineinterfacemacaddresses_ = nullptr;
  }
  if (from._internal_has_virtualnetworkreference()) {
    virtualnetworkreference_ = new ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::ResourceReference(*from.virtualnetworkreference_);
  } else {
    virtualnetworkreference_ = nullptr;
  }
  if (from._internal_has_allowedaddresspairs()) {
    allowedaddresspairs_ = new ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::AllowedAddressPairs(*from.allowedaddresspairs_);
  } else {
    allowedaddresspairs_ = nullptr;
  }
  if (from._internal_has_properties()) {
    properties_ = new ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::VirtualMachineInterfaceProperties(*from.properties_);
  } else {
    properties_ = nullptr;
  }
  ::memcpy(&virtualmachineinterfacedisablepolicy_, &from.virtualmachineinterfacedisablepolicy_,
    static_cast<size_t>(reinterpret_cast<char*>(&portsecurityenabled_) -
    reinterpret_cast<char*>(&virtualmachineinterfacedisablepolicy_)) + sizeof(portsecurityenabled_));
  // @@protoc_insertion_point(copy_constructor:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.VirtualMachineInterfaceSpec)
}

inline void VirtualMachineInterfaceSpec::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&commonspec_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&portsecurityenabled_) -
    reinterpret_cast<char*>(&commonspec_)) + sizeof(portsecurityenabled_));
}

VirtualMachineInterfaceSpec::~VirtualMachineInterfaceSpec() {
  // @@protoc_insertion_point(destructor:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.VirtualMachineInterfaceSpec)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void VirtualMachineInterfaceSpec::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete commonspec_;
  if (this != internal_default_instance()) delete parent_;
  if (this != internal_default_instance()) delete virtualmachineinterfacemacaddresses_;
  if (this != internal_default_instance()) delete virtualnetworkreference_;
  if (this != internal_default_instance()) delete allowedaddresspairs_;
  if (this != internal_default_instance()) delete properties_;
}

void VirtualMachineInterfaceSpec::ArenaDtor(void* object) {
  VirtualMachineInterfaceSpec* _this = reinterpret_cast< VirtualMachineInterfaceSpec* >(object);
  (void)_this;
}
void VirtualMachineInterfaceSpec::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void VirtualMachineInterfaceSpec::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void VirtualMachineInterfaceSpec::Clear() {
// @@protoc_insertion_point(message_clear_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.VirtualMachineInterfaceSpec)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  virtualmachinereferences_.Clear();
  virtualmachineinterfacereferences_.Clear();
  tagreferences_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(commonspec_ != nullptr);
      commonspec_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(parent_ != nullptr);
      parent_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(virtualmachineinterfacemacaddresses_ != nullptr);
      virtualmachineinterfacemacaddresses_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(virtualnetworkreference_ != nullptr);
      virtualnetworkreference_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(allowedaddresspairs_ != nullptr);
      allowedaddresspairs_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(properties_ != nullptr);
      properties_->Clear();
    }
  }
  ::memset(&virtualmachineinterfacedisablepolicy_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&portsecurityenabled_) -
      reinterpret_cast<char*>(&virtualmachineinterfacedisablepolicy_)) + sizeof(portsecurityenabled_));
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* VirtualMachineInterfaceSpec::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.CommonSpec commonSpec = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_commonspec(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .k8s.io.api.core.v1.ObjectReference parent = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_parent(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.MACAddresses virtualMachineInterfaceMacAddresses = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_virtualmachineinterfacemacaddresses(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.ResourceReference virtualNetworkReference = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_virtualnetworkreference(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.ResourceReference virtualMachineReferences = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_virtualmachinereferences(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      // optional bool virtualMachineInterfaceDisablePolicy = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_virtualmachineinterfacedisablepolicy(&has_bits);
          virtualmachineinterfacedisablepolicy_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.AllowedAddressPairs allowedAddressPairs = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_allowedaddresspairs(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool portSecurityEnabled = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_portsecurityenabled(&has_bits);
          portsecurityenabled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.ResourceReference virtualMachineInterfaceReferences = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_virtualmachineinterfacereferences(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<74>(ptr));
        } else goto handle_unusual;
        continue;
      // optional .ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.VirtualMachineInterfaceProperties properties = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_properties(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.ResourceReference tagReferences = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_tagreferences(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<90>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* VirtualMachineInterfaceSpec::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.VirtualMachineInterfaceSpec)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.CommonSpec commonSpec = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::commonspec(this), target, stream);
  }

  // optional .k8s.io.api.core.v1.ObjectReference parent = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::parent(this), target, stream);
  }

  // optional .ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.MACAddresses virtualMachineInterfaceMacAddresses = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::virtualmachineinterfacemacaddresses(this), target, stream);
  }

  // optional .ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.ResourceReference virtualNetworkReference = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::virtualnetworkreference(this), target, stream);
  }

  // repeated .ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.ResourceReference virtualMachineReferences = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_virtualmachinereferences_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, this->_internal_virtualmachinereferences(i), target, stream);
  }

  // optional bool virtualMachineInterfaceDisablePolicy = 6;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_virtualmachineinterfacedisablepolicy(), target);
  }

  // optional .ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.AllowedAddressPairs allowedAddressPairs = 7;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::allowedaddresspairs(this), target, stream);
  }

  // optional bool portSecurityEnabled = 8;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(8, this->_internal_portsecurityenabled(), target);
  }

  // repeated .ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.ResourceReference virtualMachineInterfaceReferences = 9;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_virtualmachineinterfacereferences_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, this->_internal_virtualmachineinterfacereferences(i), target, stream);
  }

  // optional .ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.VirtualMachineInterfaceProperties properties = 10;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::properties(this), target, stream);
  }

  // repeated .ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.ResourceReference tagReferences = 11;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_tagreferences_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(11, this->_internal_tagreferences(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.VirtualMachineInterfaceSpec)
  return target;
}

size_t VirtualMachineInterfaceSpec::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.VirtualMachineInterfaceSpec)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.ResourceReference virtualMachineReferences = 5;
  total_size += 1UL * this->_internal_virtualmachinereferences_size();
  for (const auto& msg : this->virtualmachinereferences_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.ResourceReference virtualMachineInterfaceReferences = 9;
  total_size += 1UL * this->_internal_virtualmachineinterfacereferences_size();
  for (const auto& msg : this->virtualmachineinterfacereferences_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.ResourceReference tagReferences = 11;
  total_size += 1UL * this->_internal_tagreferences_size();
  for (const auto& msg : this->tagreferences_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional .ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.CommonSpec commonSpec = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *commonspec_);
    }

    // optional .k8s.io.api.core.v1.ObjectReference parent = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *parent_);
    }

    // optional .ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.MACAddresses virtualMachineInterfaceMacAddresses = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *virtualmachineinterfacemacaddresses_);
    }

    // optional .ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.ResourceReference virtualNetworkReference = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *virtualnetworkreference_);
    }

    // optional .ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.AllowedAddressPairs allowedAddressPairs = 7;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *allowedaddresspairs_);
    }

    // optional .ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.VirtualMachineInterfaceProperties properties = 10;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *properties_);
    }

    // optional bool virtualMachineInterfaceDisablePolicy = 6;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 1;
    }

    // optional bool portSecurityEnabled = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData VirtualMachineInterfaceSpec::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    VirtualMachineInterfaceSpec::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*VirtualMachineInterfaceSpec::GetClassData() const { return &_class_data_; }

void VirtualMachineInterfaceSpec::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<VirtualMachineInterfaceSpec *>(to)->MergeFrom(
      static_cast<const VirtualMachineInterfaceSpec &>(from));
}


void VirtualMachineInterfaceSpec::MergeFrom(const VirtualMachineInterfaceSpec& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.VirtualMachineInterfaceSpec)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  virtualmachinereferences_.MergeFrom(from.virtualmachinereferences_);
  virtualmachineinterfacereferences_.MergeFrom(from.virtualmachineinterfacereferences_);
  tagreferences_.MergeFrom(from.tagreferences_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_commonspec()->::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::CommonSpec::MergeFrom(from._internal_commonspec());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_parent()->::k8s::io::api::core::v1::ObjectReference::MergeFrom(from._internal_parent());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_virtualmachineinterfacemacaddresses()->::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::MACAddresses::MergeFrom(from._internal_virtualmachineinterfacemacaddresses());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_virtualnetworkreference()->::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::ResourceReference::MergeFrom(from._internal_virtualnetworkreference());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_mutable_allowedaddresspairs()->::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::AllowedAddressPairs::MergeFrom(from._internal_allowedaddresspairs());
    }
    if (cached_has_bits & 0x00000020u) {
      _internal_mutable_properties()->::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::VirtualMachineInterfaceProperties::MergeFrom(from._internal_properties());
    }
    if (cached_has_bits & 0x00000040u) {
      virtualmachineinterfacedisablepolicy_ = from.virtualmachineinterfacedisablepolicy_;
    }
    if (cached_has_bits & 0x00000080u) {
      portsecurityenabled_ = from.portsecurityenabled_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void VirtualMachineInterfaceSpec::CopyFrom(const VirtualMachineInterfaceSpec& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.VirtualMachineInterfaceSpec)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VirtualMachineInterfaceSpec::IsInitialized() const {
  return true;
}

void VirtualMachineInterfaceSpec::InternalSwap(VirtualMachineInterfaceSpec* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  virtualmachinereferences_.InternalSwap(&other->virtualmachinereferences_);
  virtualmachineinterfacereferences_.InternalSwap(&other->virtualmachineinterfacereferences_);
  tagreferences_.InternalSwap(&other->tagreferences_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(VirtualMachineInterfaceSpec, portsecurityenabled_)
      + sizeof(VirtualMachineInterfaceSpec::portsecurityenabled_)
      - PROTOBUF_FIELD_OFFSET(VirtualMachineInterfaceSpec, commonspec_)>(
          reinterpret_cast<char*>(&commonspec_),
          reinterpret_cast<char*>(&other->commonspec_));
}

::PROTOBUF_NAMESPACE_ID::Metadata VirtualMachineInterfaceSpec::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_ssd_2dgit_2ejuniper_2enet_2fcontrail_2fcn2_2fcontrail_2fpkg_2fapis_2fcore_2fv1alpha1_2fgenerated_2eproto_getter, &descriptor_table_ssd_2dgit_2ejuniper_2enet_2fcontrail_2fcn2_2fcontrail_2fpkg_2fapis_2fcore_2fv1alpha1_2fgenerated_2eproto_once,
      file_level_metadata_ssd_2dgit_2ejuniper_2enet_2fcontrail_2fcn2_2fcontrail_2fpkg_2fapis_2fcore_2fv1alpha1_2fgenerated_2eproto[112]);
}

// ===================================================================

class VirtualMachineInterfaceStatus::_Internal {
 public:
  using HasBits = decltype(std::declval<VirtualMachineInterfaceStatus>()._has_bits_);
  static const ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::CommonStatus& commonstatus(const VirtualMachineInterfaceStatus* msg);
  static void set_has_commonstatus(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::ResourceReference& bgprouterreference(const VirtualMachineInterfaceStatus* msg);
  static void set_has_bgprouterreference(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::CommonStatus&
VirtualMachineInterfaceStatus::_Internal::commonstatus(const VirtualMachineInterfaceStatus* msg) {
  return *msg->commonstatus_;
}
const ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::ResourceReference&
VirtualMachineInterfaceStatus::_Internal::bgprouterreference(const VirtualMachineInterfaceStatus* msg) {
  return *msg->bgprouterreference_;
}
VirtualMachineInterfaceStatus::VirtualMachineInterfaceStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  routinginstancereferences_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.VirtualMachineInterfaceStatus)
}
VirtualMachineInterfaceStatus::VirtualMachineInterfaceStatus(const VirtualMachineInterfaceStatus& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      routinginstancereferences_(from.routinginstancereferences_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_commonstatus()) {
    commonstatus_ = new ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::CommonStatus(*from.commonstatus_);
  } else {
    commonstatus_ = nullptr;
  }
  if (from._internal_has_bgprouterreference()) {
    bgprouterreference_ = new ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::ResourceReference(*from.bgprouterreference_);
  } else {
    bgprouterreference_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.VirtualMachineInterfaceStatus)
}

inline void VirtualMachineInterfaceStatus::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&commonstatus_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&bgprouterreference_) -
    reinterpret_cast<char*>(&commonstatus_)) + sizeof(bgprouterreference_));
}

VirtualMachineInterfaceStatus::~VirtualMachineInterfaceStatus() {
  // @@protoc_insertion_point(destructor:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.VirtualMachineInterfaceStatus)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void VirtualMachineInterfaceStatus::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete commonstatus_;
  if (this != internal_default_instance()) delete bgprouterreference_;
}

void VirtualMachineInterfaceStatus::ArenaDtor(void* object) {
  VirtualMachineInterfaceStatus* _this = reinterpret_cast< VirtualMachineInterfaceStatus* >(object);
  (void)_this;
}
void VirtualMachineInterfaceStatus::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void VirtualMachineInterfaceStatus::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void VirtualMachineInterfaceStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.VirtualMachineInterfaceStatus)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  routinginstancereferences_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(commonstatus_ != nullptr);
      commonstatus_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(bgprouterreference_ != nullptr);
      bgprouterreference_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* VirtualMachineInterfaceStatus::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.CommonStatus commonStatus = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_commonstatus(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.RoutingInstanceReference routingInstanceReferences = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_routinginstancereferences(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // optional .ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.ResourceReference bgpRouterReference = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_bgprouterreference(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* VirtualMachineInterfaceStatus::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.VirtualMachineInterfaceStatus)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.CommonStatus commonStatus = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::commonstatus(this), target, stream);
  }

  // repeated .ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.RoutingInstanceReference routingInstanceReferences = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_routinginstancereferences_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_routinginstancereferences(i), target, stream);
  }

  // optional .ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.ResourceReference bgpRouterReference = 4;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::bgprouterreference(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.VirtualMachineInterfaceStatus)
  return target;
}

size_t VirtualMachineInterfaceStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.VirtualMachineInterfaceStatus)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.RoutingInstanceReference routingInstanceReferences = 3;
  total_size += 1UL * this->_internal_routinginstancereferences_size();
  for (const auto& msg : this->routinginstancereferences_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.CommonStatus commonStatus = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *commonstatus_);
    }

    // optional .ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.ResourceReference bgpRouterReference = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *bgprouterreference_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData VirtualMachineInterfaceStatus::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    VirtualMachineInterfaceStatus::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*VirtualMachineInterfaceStatus::GetClassData() const { return &_class_data_; }

void VirtualMachineInterfaceStatus::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<VirtualMachineInterfaceStatus *>(to)->MergeFrom(
      static_cast<const VirtualMachineInterfaceStatus &>(from));
}


void VirtualMachineInterfaceStatus::MergeFrom(const VirtualMachineInterfaceStatus& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.VirtualMachineInterfaceStatus)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  routinginstancereferences_.MergeFrom(from.routinginstancereferences_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_commonstatus()->::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::CommonStatus::MergeFrom(from._internal_commonstatus());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_bgprouterreference()->::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::ResourceReference::MergeFrom(from._internal_bgprouterreference());
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void VirtualMachineInterfaceStatus::CopyFrom(const VirtualMachineInterfaceStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.VirtualMachineInterfaceStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VirtualMachineInterfaceStatus::IsInitialized() const {
  return true;
}

void VirtualMachineInterfaceStatus::InternalSwap(VirtualMachineInterfaceStatus* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  routinginstancereferences_.InternalSwap(&other->routinginstancereferences_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(VirtualMachineInterfaceStatus, bgprouterreference_)
      + sizeof(VirtualMachineInterfaceStatus::bgprouterreference_)
      - PROTOBUF_FIELD_OFFSET(VirtualMachineInterfaceStatus, commonstatus_)>(
          reinterpret_cast<char*>(&commonstatus_),
          reinterpret_cast<char*>(&other->commonstatus_));
}

::PROTOBUF_NAMESPACE_ID::Metadata VirtualMachineInterfaceStatus::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_ssd_2dgit_2ejuniper_2enet_2fcontrail_2fcn2_2fcontrail_2fpkg_2fapis_2fcore_2fv1alpha1_2fgenerated_2eproto_getter, &descriptor_table_ssd_2dgit_2ejuniper_2enet_2fcontrail_2fcn2_2fcontrail_2fpkg_2fapis_2fcore_2fv1alpha1_2fgenerated_2eproto_once,
      file_level_metadata_ssd_2dgit_2ejuniper_2enet_2fcontrail_2fcn2_2fcontrail_2fpkg_2fapis_2fcore_2fv1alpha1_2fgenerated_2eproto[113]);
}

// ===================================================================

class VirtualMachineList::_Internal {
 public:
  using HasBits = decltype(std::declval<VirtualMachineList>()._has_bits_);
  static const ::k8s::io::apimachinery::pkg::apis::meta::v1::ListMeta& metadata(const VirtualMachineList* msg);
  static void set_has_metadata(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::k8s::io::apimachinery::pkg::apis::meta::v1::ListMeta&
VirtualMachineList::_Internal::metadata(const VirtualMachineList* msg) {
  return *msg->metadata_;
}
void VirtualMachineList::clear_metadata() {
  if (metadata_ != nullptr) metadata_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
VirtualMachineList::VirtualMachineList(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  items_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.VirtualMachineList)
}
VirtualMachineList::VirtualMachineList(const VirtualMachineList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      items_(from.items_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_metadata()) {
    metadata_ = new ::k8s::io::apimachinery::pkg::apis::meta::v1::ListMeta(*from.metadata_);
  } else {
    metadata_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.VirtualMachineList)
}

inline void VirtualMachineList::SharedCtor() {
metadata_ = nullptr;
}

VirtualMachineList::~VirtualMachineList() {
  // @@protoc_insertion_point(destructor:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.VirtualMachineList)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void VirtualMachineList::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete metadata_;
}

void VirtualMachineList::ArenaDtor(void* object) {
  VirtualMachineList* _this = reinterpret_cast< VirtualMachineList* >(object);
  (void)_this;
}
void VirtualMachineList::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void VirtualMachineList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void VirtualMachineList::Clear() {
// @@protoc_insertion_point(message_clear_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.VirtualMachineList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  items_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(metadata_ != nullptr);
    metadata_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* VirtualMachineList::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_metadata(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.VirtualMachine items = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_items(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* VirtualMachineList::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.VirtualMachineList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::metadata(this), target, stream);
  }

  // repeated .ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.VirtualMachine items = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_items_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_items(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.VirtualMachineList)
  return target;
}

size_t VirtualMachineList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.VirtualMachineList)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.VirtualMachine items = 2;
  total_size += 1UL * this->_internal_items_size();
  for (const auto& msg : this->items_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional .k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *metadata_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData VirtualMachineList::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    VirtualMachineList::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*VirtualMachineList::GetClassData() const { return &_class_data_; }

void VirtualMachineList::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<VirtualMachineList *>(to)->MergeFrom(
      static_cast<const VirtualMachineList &>(from));
}


void VirtualMachineList::MergeFrom(const VirtualMachineList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.VirtualMachineList)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  items_.MergeFrom(from.items_);
  if (from._internal_has_metadata()) {
    _internal_mutable_metadata()->::k8s::io::apimachinery::pkg::apis::meta::v1::ListMeta::MergeFrom(from._internal_metadata());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void VirtualMachineList::CopyFrom(const VirtualMachineList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.VirtualMachineList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VirtualMachineList::IsInitialized() const {
  return true;
}

void VirtualMachineList::InternalSwap(VirtualMachineList* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  items_.InternalSwap(&other->items_);
  swap(metadata_, other->metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata VirtualMachineList::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_ssd_2dgit_2ejuniper_2enet_2fcontrail_2fcn2_2fcontrail_2fpkg_2fapis_2fcore_2fv1alpha1_2fgenerated_2eproto_getter, &descriptor_table_ssd_2dgit_2ejuniper_2enet_2fcontrail_2fcn2_2fcontrail_2fpkg_2fapis_2fcore_2fv1alpha1_2fgenerated_2eproto_once,
      file_level_metadata_ssd_2dgit_2ejuniper_2enet_2fcontrail_2fcn2_2fcontrail_2fpkg_2fapis_2fcore_2fv1alpha1_2fgenerated_2eproto[114]);
}

// ===================================================================

class VirtualMachineSpec::_Internal {
 public:
  using HasBits = decltype(std::declval<VirtualMachineSpec>()._has_bits_);
  static const ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::CommonSpec& commonspec(const VirtualMachineSpec* msg);
  static void set_has_commonspec(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_servertype(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_servername(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_servernamespace(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_serverclustername(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

const ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::CommonSpec&
VirtualMachineSpec::_Internal::commonspec(const VirtualMachineSpec* msg) {
  return *msg->commonspec_;
}
VirtualMachineSpec::VirtualMachineSpec(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.VirtualMachineSpec)
}
VirtualMachineSpec::VirtualMachineSpec(const VirtualMachineSpec& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  servertype_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_servertype()) {
    servertype_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_servertype(), 
      GetArenaForAllocation());
  }
  servername_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_servername()) {
    servername_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_servername(), 
      GetArenaForAllocation());
  }
  servernamespace_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_servernamespace()) {
    servernamespace_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_servernamespace(), 
      GetArenaForAllocation());
  }
  serverclustername_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_serverclustername()) {
    serverclustername_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_serverclustername(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_commonspec()) {
    commonspec_ = new ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::CommonSpec(*from.commonspec_);
  } else {
    commonspec_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.VirtualMachineSpec)
}

inline void VirtualMachineSpec::SharedCtor() {
servertype_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
servername_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
servernamespace_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
serverclustername_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
commonspec_ = nullptr;
}

VirtualMachineSpec::~VirtualMachineSpec() {
  // @@protoc_insertion_point(destructor:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.VirtualMachineSpec)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void VirtualMachineSpec::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  servertype_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  servername_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  servernamespace_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  serverclustername_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete commonspec_;
}

void VirtualMachineSpec::ArenaDtor(void* object) {
  VirtualMachineSpec* _this = reinterpret_cast< VirtualMachineSpec* >(object);
  (void)_this;
}
void VirtualMachineSpec::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void VirtualMachineSpec::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void VirtualMachineSpec::Clear() {
// @@protoc_insertion_point(message_clear_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.VirtualMachineSpec)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      servertype_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      servername_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      servernamespace_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      serverclustername_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(commonspec_ != nullptr);
      commonspec_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* VirtualMachineSpec::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.CommonSpec commonSpec = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_commonspec(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string serverType = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_servertype();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.VirtualMachineSpec.serverType");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string serverName = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_servername();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.VirtualMachineSpec.serverName");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string serverNamespace = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_servernamespace();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.VirtualMachineSpec.serverNamespace");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string serverClusterName = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_serverclustername();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.VirtualMachineSpec.serverClusterName");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* VirtualMachineSpec::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.VirtualMachineSpec)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.CommonSpec commonSpec = 1;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::commonspec(this), target, stream);
  }

  // optional string serverType = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_servertype().data(), static_cast<int>(this->_internal_servertype().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.VirtualMachineSpec.serverType");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_servertype(), target);
  }

  // optional string serverName = 3;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_servername().data(), static_cast<int>(this->_internal_servername().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.VirtualMachineSpec.serverName");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_servername(), target);
  }

  // optional string serverNamespace = 4;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_servernamespace().data(), static_cast<int>(this->_internal_servernamespace().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.VirtualMachineSpec.serverNamespace");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_servernamespace(), target);
  }

  // optional string serverClusterName = 5;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_serverclustername().data(), static_cast<int>(this->_internal_serverclustername().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.VirtualMachineSpec.serverClusterName");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_serverclustername(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.VirtualMachineSpec)
  return target;
}

size_t VirtualMachineSpec::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.VirtualMachineSpec)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional string serverType = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_servertype());
    }

    // optional string serverName = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_servername());
    }

    // optional string serverNamespace = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_servernamespace());
    }

    // optional string serverClusterName = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_serverclustername());
    }

    // optional .ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.CommonSpec commonSpec = 1;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *commonspec_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData VirtualMachineSpec::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    VirtualMachineSpec::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*VirtualMachineSpec::GetClassData() const { return &_class_data_; }

void VirtualMachineSpec::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<VirtualMachineSpec *>(to)->MergeFrom(
      static_cast<const VirtualMachineSpec &>(from));
}


void VirtualMachineSpec::MergeFrom(const VirtualMachineSpec& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.VirtualMachineSpec)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_servertype(from._internal_servertype());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_servername(from._internal_servername());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_servernamespace(from._internal_servernamespace());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_set_serverclustername(from._internal_serverclustername());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_mutable_commonspec()->::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::CommonSpec::MergeFrom(from._internal_commonspec());
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void VirtualMachineSpec::CopyFrom(const VirtualMachineSpec& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.VirtualMachineSpec)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VirtualMachineSpec::IsInitialized() const {
  return true;
}

void VirtualMachineSpec::InternalSwap(VirtualMachineSpec* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &servertype_, GetArenaForAllocation(),
      &other->servertype_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &servername_, GetArenaForAllocation(),
      &other->servername_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &servernamespace_, GetArenaForAllocation(),
      &other->servernamespace_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &serverclustername_, GetArenaForAllocation(),
      &other->serverclustername_, other->GetArenaForAllocation()
  );
  swap(commonspec_, other->commonspec_);
}

::PROTOBUF_NAMESPACE_ID::Metadata VirtualMachineSpec::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_ssd_2dgit_2ejuniper_2enet_2fcontrail_2fcn2_2fcontrail_2fpkg_2fapis_2fcore_2fv1alpha1_2fgenerated_2eproto_getter, &descriptor_table_ssd_2dgit_2ejuniper_2enet_2fcontrail_2fcn2_2fcontrail_2fpkg_2fapis_2fcore_2fv1alpha1_2fgenerated_2eproto_once,
      file_level_metadata_ssd_2dgit_2ejuniper_2enet_2fcontrail_2fcn2_2fcontrail_2fpkg_2fapis_2fcore_2fv1alpha1_2fgenerated_2eproto[115]);
}

// ===================================================================

class VirtualMachineStatus::_Internal {
 public:
  using HasBits = decltype(std::declval<VirtualMachineStatus>()._has_bits_);
  static const ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::CommonStatus& commonstatus(const VirtualMachineStatus* msg);
  static void set_has_commonstatus(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::CommonStatus&
VirtualMachineStatus::_Internal::commonstatus(const VirtualMachineStatus* msg) {
  return *msg->commonstatus_;
}
VirtualMachineStatus::VirtualMachineStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.VirtualMachineStatus)
}
VirtualMachineStatus::VirtualMachineStatus(const VirtualMachineStatus& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_commonstatus()) {
    commonstatus_ = new ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::CommonStatus(*from.commonstatus_);
  } else {
    commonstatus_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.VirtualMachineStatus)
}

inline void VirtualMachineStatus::SharedCtor() {
commonstatus_ = nullptr;
}

VirtualMachineStatus::~VirtualMachineStatus() {
  // @@protoc_insertion_point(destructor:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.VirtualMachineStatus)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void VirtualMachineStatus::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete commonstatus_;
}

void VirtualMachineStatus::ArenaDtor(void* object) {
  VirtualMachineStatus* _this = reinterpret_cast< VirtualMachineStatus* >(object);
  (void)_this;
}
void VirtualMachineStatus::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void VirtualMachineStatus::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void VirtualMachineStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.VirtualMachineStatus)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(commonstatus_ != nullptr);
    commonstatus_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* VirtualMachineStatus::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.CommonStatus commonStatus = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_commonstatus(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* VirtualMachineStatus::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.VirtualMachineStatus)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.CommonStatus commonStatus = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::commonstatus(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.VirtualMachineStatus)
  return target;
}

size_t VirtualMachineStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.VirtualMachineStatus)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.CommonStatus commonStatus = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *commonstatus_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData VirtualMachineStatus::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    VirtualMachineStatus::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*VirtualMachineStatus::GetClassData() const { return &_class_data_; }

void VirtualMachineStatus::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<VirtualMachineStatus *>(to)->MergeFrom(
      static_cast<const VirtualMachineStatus &>(from));
}


void VirtualMachineStatus::MergeFrom(const VirtualMachineStatus& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.VirtualMachineStatus)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_commonstatus()) {
    _internal_mutable_commonstatus()->::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::CommonStatus::MergeFrom(from._internal_commonstatus());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void VirtualMachineStatus::CopyFrom(const VirtualMachineStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.VirtualMachineStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VirtualMachineStatus::IsInitialized() const {
  return true;
}

void VirtualMachineStatus::InternalSwap(VirtualMachineStatus* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(commonstatus_, other->commonstatus_);
}

::PROTOBUF_NAMESPACE_ID::Metadata VirtualMachineStatus::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_ssd_2dgit_2ejuniper_2enet_2fcontrail_2fcn2_2fcontrail_2fpkg_2fapis_2fcore_2fv1alpha1_2fgenerated_2eproto_getter, &descriptor_table_ssd_2dgit_2ejuniper_2enet_2fcontrail_2fcn2_2fcontrail_2fpkg_2fapis_2fcore_2fv1alpha1_2fgenerated_2eproto_once,
      file_level_metadata_ssd_2dgit_2ejuniper_2enet_2fcontrail_2fcn2_2fcontrail_2fpkg_2fapis_2fcore_2fv1alpha1_2fgenerated_2eproto[116]);
}

// ===================================================================

class VirtualNetwork::_Internal {
 public:
  using HasBits = decltype(std::declval<VirtualNetwork>()._has_bits_);
  static const ::k8s::io::apimachinery::pkg::apis::meta::v1::ObjectMeta& metadata(const VirtualNetwork* msg);
  static void set_has_metadata(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::VirtualNetworkSpec& spec(const VirtualNetwork* msg);
  static void set_has_spec(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::VirtualNetworkStatus& status(const VirtualNetwork* msg);
  static void set_has_status(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::k8s::io::apimachinery::pkg::apis::meta::v1::ObjectMeta&
VirtualNetwork::_Internal::metadata(const VirtualNetwork* msg) {
  return *msg->metadata_;
}
const ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::VirtualNetworkSpec&
VirtualNetwork::_Internal::spec(const VirtualNetwork* msg) {
  return *msg->spec_;
}
const ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::VirtualNetworkStatus&
VirtualNetwork::_Internal::status(const VirtualNetwork* msg) {
  return *msg->status_;
}
void VirtualNetwork::clear_metadata() {
  if (metadata_ != nullptr) metadata_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
VirtualNetwork::VirtualNetwork(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.VirtualNetwork)
}
VirtualNetwork::VirtualNetwork(const VirtualNetwork& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_metadata()) {
    metadata_ = new ::k8s::io::apimachinery::pkg::apis::meta::v1::ObjectMeta(*from.metadata_);
  } else {
    metadata_ = nullptr;
  }
  if (from._internal_has_spec()) {
    spec_ = new ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::VirtualNetworkSpec(*from.spec_);
  } else {
    spec_ = nullptr;
  }
  if (from._internal_has_status()) {
    status_ = new ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::VirtualNetworkStatus(*from.status_);
  } else {
    status_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.VirtualNetwork)
}

inline void VirtualNetwork::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&metadata_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&status_) -
    reinterpret_cast<char*>(&metadata_)) + sizeof(status_));
}

VirtualNetwork::~VirtualNetwork() {
  // @@protoc_insertion_point(destructor:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.VirtualNetwork)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void VirtualNetwork::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete metadata_;
  if (this != internal_default_instance()) delete spec_;
  if (this != internal_default_instance()) delete status_;
}

void VirtualNetwork::ArenaDtor(void* object) {
  VirtualNetwork* _this = reinterpret_cast< VirtualNetwork* >(object);
  (void)_this;
}
void VirtualNetwork::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void VirtualNetwork::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void VirtualNetwork::Clear() {
// @@protoc_insertion_point(message_clear_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.VirtualNetwork)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(metadata_ != nullptr);
      metadata_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(spec_ != nullptr);
      spec_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(status_ != nullptr);
      status_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* VirtualNetwork::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_metadata(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.VirtualNetworkSpec spec = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_spec(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.VirtualNetworkStatus status = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* VirtualNetwork::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.VirtualNetwork)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::metadata(this), target, stream);
  }

  // optional .ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.VirtualNetworkSpec spec = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::spec(this), target, stream);
  }

  // optional .ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.VirtualNetworkStatus status = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::status(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.VirtualNetwork)
  return target;
}

size_t VirtualNetwork::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.VirtualNetwork)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *metadata_);
    }

    // optional .ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.VirtualNetworkSpec spec = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *spec_);
    }

    // optional .ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.VirtualNetworkStatus status = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *status_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData VirtualNetwork::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    VirtualNetwork::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*VirtualNetwork::GetClassData() const { return &_class_data_; }

void VirtualNetwork::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<VirtualNetwork *>(to)->MergeFrom(
      static_cast<const VirtualNetwork &>(from));
}


void VirtualNetwork::MergeFrom(const VirtualNetwork& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.VirtualNetwork)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_metadata()->::k8s::io::apimachinery::pkg::apis::meta::v1::ObjectMeta::MergeFrom(from._internal_metadata());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_spec()->::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::VirtualNetworkSpec::MergeFrom(from._internal_spec());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_status()->::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::VirtualNetworkStatus::MergeFrom(from._internal_status());
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void VirtualNetwork::CopyFrom(const VirtualNetwork& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.VirtualNetwork)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VirtualNetwork::IsInitialized() const {
  return true;
}

void VirtualNetwork::InternalSwap(VirtualNetwork* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(VirtualNetwork, status_)
      + sizeof(VirtualNetwork::status_)
      - PROTOBUF_FIELD_OFFSET(VirtualNetwork, metadata_)>(
          reinterpret_cast<char*>(&metadata_),
          reinterpret_cast<char*>(&other->metadata_));
}

::PROTOBUF_NAMESPACE_ID::Metadata VirtualNetwork::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_ssd_2dgit_2ejuniper_2enet_2fcontrail_2fcn2_2fcontrail_2fpkg_2fapis_2fcore_2fv1alpha1_2fgenerated_2eproto_getter, &descriptor_table_ssd_2dgit_2ejuniper_2enet_2fcontrail_2fcn2_2fcontrail_2fpkg_2fapis_2fcore_2fv1alpha1_2fgenerated_2eproto_once,
      file_level_metadata_ssd_2dgit_2ejuniper_2enet_2fcontrail_2fcn2_2fcontrail_2fpkg_2fapis_2fcore_2fv1alpha1_2fgenerated_2eproto[117]);
}

// ===================================================================

class VirtualNetworkList::_Internal {
 public:
  using HasBits = decltype(std::declval<VirtualNetworkList>()._has_bits_);
  static const ::k8s::io::apimachinery::pkg::apis::meta::v1::ListMeta& metadata(const VirtualNetworkList* msg);
  static void set_has_metadata(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::k8s::io::apimachinery::pkg::apis::meta::v1::ListMeta&
VirtualNetworkList::_Internal::metadata(const VirtualNetworkList* msg) {
  return *msg->metadata_;
}
void VirtualNetworkList::clear_metadata() {
  if (metadata_ != nullptr) metadata_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
VirtualNetworkList::VirtualNetworkList(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  items_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.VirtualNetworkList)
}
VirtualNetworkList::VirtualNetworkList(const VirtualNetworkList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      items_(from.items_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_metadata()) {
    metadata_ = new ::k8s::io::apimachinery::pkg::apis::meta::v1::ListMeta(*from.metadata_);
  } else {
    metadata_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.VirtualNetworkList)
}

inline void VirtualNetworkList::SharedCtor() {
metadata_ = nullptr;
}

VirtualNetworkList::~VirtualNetworkList() {
  // @@protoc_insertion_point(destructor:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.VirtualNetworkList)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void VirtualNetworkList::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete metadata_;
}

void VirtualNetworkList::ArenaDtor(void* object) {
  VirtualNetworkList* _this = reinterpret_cast< VirtualNetworkList* >(object);
  (void)_this;
}
void VirtualNetworkList::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void VirtualNetworkList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void VirtualNetworkList::Clear() {
// @@protoc_insertion_point(message_clear_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.VirtualNetworkList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  items_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(metadata_ != nullptr);
    metadata_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* VirtualNetworkList::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_metadata(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.VirtualNetwork items = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_items(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* VirtualNetworkList::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.VirtualNetworkList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::metadata(this), target, stream);
  }

  // repeated .ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.VirtualNetwork items = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_items_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_items(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.VirtualNetworkList)
  return target;
}

size_t VirtualNetworkList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.VirtualNetworkList)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.VirtualNetwork items = 2;
  total_size += 1UL * this->_internal_items_size();
  for (const auto& msg : this->items_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional .k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *metadata_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData VirtualNetworkList::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    VirtualNetworkList::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*VirtualNetworkList::GetClassData() const { return &_class_data_; }

void VirtualNetworkList::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<VirtualNetworkList *>(to)->MergeFrom(
      static_cast<const VirtualNetworkList &>(from));
}


void VirtualNetworkList::MergeFrom(const VirtualNetworkList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.VirtualNetworkList)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  items_.MergeFrom(from.items_);
  if (from._internal_has_metadata()) {
    _internal_mutable_metadata()->::k8s::io::apimachinery::pkg::apis::meta::v1::ListMeta::MergeFrom(from._internal_metadata());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void VirtualNetworkList::CopyFrom(const VirtualNetworkList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.VirtualNetworkList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VirtualNetworkList::IsInitialized() const {
  return true;
}

void VirtualNetworkList::InternalSwap(VirtualNetworkList* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  items_.InternalSwap(&other->items_);
  swap(metadata_, other->metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata VirtualNetworkList::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_ssd_2dgit_2ejuniper_2enet_2fcontrail_2fcn2_2fcontrail_2fpkg_2fapis_2fcore_2fv1alpha1_2fgenerated_2eproto_getter, &descriptor_table_ssd_2dgit_2ejuniper_2enet_2fcontrail_2fcn2_2fcontrail_2fpkg_2fapis_2fcore_2fv1alpha1_2fgenerated_2eproto_once,
      file_level_metadata_ssd_2dgit_2ejuniper_2enet_2fcontrail_2fcn2_2fcontrail_2fpkg_2fapis_2fcore_2fv1alpha1_2fgenerated_2eproto[118]);
}

// ===================================================================

class VirtualNetworkRouteTargetReferenceList::_Internal {
 public:
};

VirtualNetworkRouteTargetReferenceList::VirtualNetworkRouteTargetReferenceList(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  routetargetreferences_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.VirtualNetworkRouteTargetReferenceList)
}
VirtualNetworkRouteTargetReferenceList::VirtualNetworkRouteTargetReferenceList(const VirtualNetworkRouteTargetReferenceList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      routetargetreferences_(from.routetargetreferences_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.VirtualNetworkRouteTargetReferenceList)
}

inline void VirtualNetworkRouteTargetReferenceList::SharedCtor() {
}

VirtualNetworkRouteTargetReferenceList::~VirtualNetworkRouteTargetReferenceList() {
  // @@protoc_insertion_point(destructor:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.VirtualNetworkRouteTargetReferenceList)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void VirtualNetworkRouteTargetReferenceList::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void VirtualNetworkRouteTargetReferenceList::ArenaDtor(void* object) {
  VirtualNetworkRouteTargetReferenceList* _this = reinterpret_cast< VirtualNetworkRouteTargetReferenceList* >(object);
  (void)_this;
}
void VirtualNetworkRouteTargetReferenceList::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void VirtualNetworkRouteTargetReferenceList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void VirtualNetworkRouteTargetReferenceList::Clear() {
// @@protoc_insertion_point(message_clear_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.VirtualNetworkRouteTargetReferenceList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  routetargetreferences_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* VirtualNetworkRouteTargetReferenceList::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.RouteTargetReference routeTargetReferences = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_routetargetreferences(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* VirtualNetworkRouteTargetReferenceList::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.VirtualNetworkRouteTargetReferenceList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.RouteTargetReference routeTargetReferences = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_routetargetreferences_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_routetargetreferences(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.VirtualNetworkRouteTargetReferenceList)
  return target;
}

size_t VirtualNetworkRouteTargetReferenceList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.VirtualNetworkRouteTargetReferenceList)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.RouteTargetReference routeTargetReferences = 1;
  total_size += 1UL * this->_internal_routetargetreferences_size();
  for (const auto& msg : this->routetargetreferences_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData VirtualNetworkRouteTargetReferenceList::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    VirtualNetworkRouteTargetReferenceList::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*VirtualNetworkRouteTargetReferenceList::GetClassData() const { return &_class_data_; }

void VirtualNetworkRouteTargetReferenceList::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<VirtualNetworkRouteTargetReferenceList *>(to)->MergeFrom(
      static_cast<const VirtualNetworkRouteTargetReferenceList &>(from));
}


void VirtualNetworkRouteTargetReferenceList::MergeFrom(const VirtualNetworkRouteTargetReferenceList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.VirtualNetworkRouteTargetReferenceList)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  routetargetreferences_.MergeFrom(from.routetargetreferences_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void VirtualNetworkRouteTargetReferenceList::CopyFrom(const VirtualNetworkRouteTargetReferenceList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.VirtualNetworkRouteTargetReferenceList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VirtualNetworkRouteTargetReferenceList::IsInitialized() const {
  return true;
}

void VirtualNetworkRouteTargetReferenceList::InternalSwap(VirtualNetworkRouteTargetReferenceList* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  routetargetreferences_.InternalSwap(&other->routetargetreferences_);
}

::PROTOBUF_NAMESPACE_ID::Metadata VirtualNetworkRouteTargetReferenceList::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_ssd_2dgit_2ejuniper_2enet_2fcontrail_2fcn2_2fcontrail_2fpkg_2fapis_2fcore_2fv1alpha1_2fgenerated_2eproto_getter, &descriptor_table_ssd_2dgit_2ejuniper_2enet_2fcontrail_2fcn2_2fcontrail_2fpkg_2fapis_2fcore_2fv1alpha1_2fgenerated_2eproto_once,
      file_level_metadata_ssd_2dgit_2ejuniper_2enet_2fcontrail_2fcn2_2fcontrail_2fpkg_2fapis_2fcore_2fv1alpha1_2fgenerated_2eproto[119]);
}

// ===================================================================

class VirtualNetworkRouter::_Internal {
 public:
  using HasBits = decltype(std::declval<VirtualNetworkRouter>()._has_bits_);
  static const ::k8s::io::apimachinery::pkg::apis::meta::v1::ObjectMeta& metadata(const VirtualNetworkRouter* msg);
  static void set_has_metadata(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::VirtualNetworkRouterSpec& spec(const VirtualNetworkRouter* msg);
  static void set_has_spec(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::VirtualNetworkRouterStatus& status(const VirtualNetworkRouter* msg);
  static void set_has_status(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::k8s::io::apimachinery::pkg::apis::meta::v1::ObjectMeta&
VirtualNetworkRouter::_Internal::metadata(const VirtualNetworkRouter* msg) {
  return *msg->metadata_;
}
const ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::VirtualNetworkRouterSpec&
VirtualNetworkRouter::_Internal::spec(const VirtualNetworkRouter* msg) {
  return *msg->spec_;
}
const ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::VirtualNetworkRouterStatus&
VirtualNetworkRouter::_Internal::status(const VirtualNetworkRouter* msg) {
  return *msg->status_;
}
void VirtualNetworkRouter::clear_metadata() {
  if (metadata_ != nullptr) metadata_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
VirtualNetworkRouter::VirtualNetworkRouter(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.VirtualNetworkRouter)
}
VirtualNetworkRouter::VirtualNetworkRouter(const VirtualNetworkRouter& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_metadata()) {
    metadata_ = new ::k8s::io::apimachinery::pkg::apis::meta::v1::ObjectMeta(*from.metadata_);
  } else {
    metadata_ = nullptr;
  }
  if (from._internal_has_spec()) {
    spec_ = new ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::VirtualNetworkRouterSpec(*from.spec_);
  } else {
    spec_ = nullptr;
  }
  if (from._internal_has_status()) {
    status_ = new ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::VirtualNetworkRouterStatus(*from.status_);
  } else {
    status_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.VirtualNetworkRouter)
}

inline void VirtualNetworkRouter::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&metadata_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&status_) -
    reinterpret_cast<char*>(&metadata_)) + sizeof(status_));
}

VirtualNetworkRouter::~VirtualNetworkRouter() {
  // @@protoc_insertion_point(destructor:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.VirtualNetworkRouter)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void VirtualNetworkRouter::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete metadata_;
  if (this != internal_default_instance()) delete spec_;
  if (this != internal_default_instance()) delete status_;
}

void VirtualNetworkRouter::ArenaDtor(void* object) {
  VirtualNetworkRouter* _this = reinterpret_cast< VirtualNetworkRouter* >(object);
  (void)_this;
}
void VirtualNetworkRouter::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void VirtualNetworkRouter::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void VirtualNetworkRouter::Clear() {
// @@protoc_insertion_point(message_clear_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.VirtualNetworkRouter)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(metadata_ != nullptr);
      metadata_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(spec_ != nullptr);
      spec_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(status_ != nullptr);
      status_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* VirtualNetworkRouter::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_metadata(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.VirtualNetworkRouterSpec spec = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_spec(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.VirtualNetworkRouterStatus status = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* VirtualNetworkRouter::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.VirtualNetworkRouter)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::metadata(this), target, stream);
  }

  // optional .ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.VirtualNetworkRouterSpec spec = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::spec(this), target, stream);
  }

  // optional .ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.VirtualNetworkRouterStatus status = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::status(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.VirtualNetworkRouter)
  return target;
}

size_t VirtualNetworkRouter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.VirtualNetworkRouter)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *metadata_);
    }

    // optional .ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.VirtualNetworkRouterSpec spec = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *spec_);
    }

    // optional .ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.VirtualNetworkRouterStatus status = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *status_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData VirtualNetworkRouter::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    VirtualNetworkRouter::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*VirtualNetworkRouter::GetClassData() const { return &_class_data_; }

void VirtualNetworkRouter::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<VirtualNetworkRouter *>(to)->MergeFrom(
      static_cast<const VirtualNetworkRouter &>(from));
}


void VirtualNetworkRouter::MergeFrom(const VirtualNetworkRouter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.VirtualNetworkRouter)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_metadata()->::k8s::io::apimachinery::pkg::apis::meta::v1::ObjectMeta::MergeFrom(from._internal_metadata());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_spec()->::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::VirtualNetworkRouterSpec::MergeFrom(from._internal_spec());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_status()->::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::VirtualNetworkRouterStatus::MergeFrom(from._internal_status());
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void VirtualNetworkRouter::CopyFrom(const VirtualNetworkRouter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.VirtualNetworkRouter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VirtualNetworkRouter::IsInitialized() const {
  return true;
}

void VirtualNetworkRouter::InternalSwap(VirtualNetworkRouter* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(VirtualNetworkRouter, status_)
      + sizeof(VirtualNetworkRouter::status_)
      - PROTOBUF_FIELD_OFFSET(VirtualNetworkRouter, metadata_)>(
          reinterpret_cast<char*>(&metadata_),
          reinterpret_cast<char*>(&other->metadata_));
}

::PROTOBUF_NAMESPACE_ID::Metadata VirtualNetworkRouter::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_ssd_2dgit_2ejuniper_2enet_2fcontrail_2fcn2_2fcontrail_2fpkg_2fapis_2fcore_2fv1alpha1_2fgenerated_2eproto_getter, &descriptor_table_ssd_2dgit_2ejuniper_2enet_2fcontrail_2fcn2_2fcontrail_2fpkg_2fapis_2fcore_2fv1alpha1_2fgenerated_2eproto_once,
      file_level_metadata_ssd_2dgit_2ejuniper_2enet_2fcontrail_2fcn2_2fcontrail_2fpkg_2fapis_2fcore_2fv1alpha1_2fgenerated_2eproto[120]);
}

// ===================================================================

class VirtualNetworkRouterEntry::_Internal {
 public:
  using HasBits = decltype(std::declval<VirtualNetworkRouterEntry>()._has_bits_);
  static const ::k8s::io::apimachinery::pkg::apis::meta::v1::LabelSelector& virtualnetworkrouterselector(const VirtualNetworkRouterEntry* msg);
  static void set_has_virtualnetworkrouterselector(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::k8s::io::apimachinery::pkg::apis::meta::v1::LabelSelector& namespaceselector(const VirtualNetworkRouterEntry* msg);
  static void set_has_namespaceselector(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::k8s::io::apimachinery::pkg::apis::meta::v1::LabelSelector&
VirtualNetworkRouterEntry::_Internal::virtualnetworkrouterselector(const VirtualNetworkRouterEntry* msg) {
  return *msg->virtualnetworkrouterselector_;
}
const ::k8s::io::apimachinery::pkg::apis::meta::v1::LabelSelector&
VirtualNetworkRouterEntry::_Internal::namespaceselector(const VirtualNetworkRouterEntry* msg) {
  return *msg->namespaceselector_;
}
void VirtualNetworkRouterEntry::clear_virtualnetworkrouterselector() {
  if (virtualnetworkrouterselector_ != nullptr) virtualnetworkrouterselector_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void VirtualNetworkRouterEntry::clear_namespaceselector() {
  if (namespaceselector_ != nullptr) namespaceselector_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
VirtualNetworkRouterEntry::VirtualNetworkRouterEntry(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.VirtualNetworkRouterEntry)
}
VirtualNetworkRouterEntry::VirtualNetworkRouterEntry(const VirtualNetworkRouterEntry& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_virtualnetworkrouterselector()) {
    virtualnetworkrouterselector_ = new ::k8s::io::apimachinery::pkg::apis::meta::v1::LabelSelector(*from.virtualnetworkrouterselector_);
  } else {
    virtualnetworkrouterselector_ = nullptr;
  }
  if (from._internal_has_namespaceselector()) {
    namespaceselector_ = new ::k8s::io::apimachinery::pkg::apis::meta::v1::LabelSelector(*from.namespaceselector_);
  } else {
    namespaceselector_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.VirtualNetworkRouterEntry)
}

inline void VirtualNetworkRouterEntry::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&virtualnetworkrouterselector_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&namespaceselector_) -
    reinterpret_cast<char*>(&virtualnetworkrouterselector_)) + sizeof(namespaceselector_));
}

VirtualNetworkRouterEntry::~VirtualNetworkRouterEntry() {
  // @@protoc_insertion_point(destructor:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.VirtualNetworkRouterEntry)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void VirtualNetworkRouterEntry::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete virtualnetworkrouterselector_;
  if (this != internal_default_instance()) delete namespaceselector_;
}

void VirtualNetworkRouterEntry::ArenaDtor(void* object) {
  VirtualNetworkRouterEntry* _this = reinterpret_cast< VirtualNetworkRouterEntry* >(object);
  (void)_this;
}
void VirtualNetworkRouterEntry::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void VirtualNetworkRouterEntry::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void VirtualNetworkRouterEntry::Clear() {
// @@protoc_insertion_point(message_clear_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.VirtualNetworkRouterEntry)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(virtualnetworkrouterselector_ != nullptr);
      virtualnetworkrouterselector_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(namespaceselector_ != nullptr);
      namespaceselector_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* VirtualNetworkRouterEntry::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .k8s.io.apimachinery.pkg.apis.meta.v1.LabelSelector virtualNetworkRouterSelector = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_virtualnetworkrouterselector(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .k8s.io.apimachinery.pkg.apis.meta.v1.LabelSelector namespaceSelector = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_namespaceselector(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* VirtualNetworkRouterEntry::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.VirtualNetworkRouterEntry)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .k8s.io.apimachinery.pkg.apis.meta.v1.LabelSelector virtualNetworkRouterSelector = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::virtualnetworkrouterselector(this), target, stream);
  }

  // optional .k8s.io.apimachinery.pkg.apis.meta.v1.LabelSelector namespaceSelector = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::namespaceselector(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.VirtualNetworkRouterEntry)
  return target;
}

size_t VirtualNetworkRouterEntry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.VirtualNetworkRouterEntry)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .k8s.io.apimachinery.pkg.apis.meta.v1.LabelSelector virtualNetworkRouterSelector = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *virtualnetworkrouterselector_);
    }

    // optional .k8s.io.apimachinery.pkg.apis.meta.v1.LabelSelector namespaceSelector = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *namespaceselector_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData VirtualNetworkRouterEntry::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    VirtualNetworkRouterEntry::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*VirtualNetworkRouterEntry::GetClassData() const { return &_class_data_; }

void VirtualNetworkRouterEntry::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<VirtualNetworkRouterEntry *>(to)->MergeFrom(
      static_cast<const VirtualNetworkRouterEntry &>(from));
}


void VirtualNetworkRouterEntry::MergeFrom(const VirtualNetworkRouterEntry& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.VirtualNetworkRouterEntry)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_virtualnetworkrouterselector()->::k8s::io::apimachinery::pkg::apis::meta::v1::LabelSelector::MergeFrom(from._internal_virtualnetworkrouterselector());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_namespaceselector()->::k8s::io::apimachinery::pkg::apis::meta::v1::LabelSelector::MergeFrom(from._internal_namespaceselector());
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void VirtualNetworkRouterEntry::CopyFrom(const VirtualNetworkRouterEntry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.VirtualNetworkRouterEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VirtualNetworkRouterEntry::IsInitialized() const {
  return true;
}

void VirtualNetworkRouterEntry::InternalSwap(VirtualNetworkRouterEntry* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(VirtualNetworkRouterEntry, namespaceselector_)
      + sizeof(VirtualNetworkRouterEntry::namespaceselector_)
      - PROTOBUF_FIELD_OFFSET(VirtualNetworkRouterEntry, virtualnetworkrouterselector_)>(
          reinterpret_cast<char*>(&virtualnetworkrouterselector_),
          reinterpret_cast<char*>(&other->virtualnetworkrouterselector_));
}

::PROTOBUF_NAMESPACE_ID::Metadata VirtualNetworkRouterEntry::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_ssd_2dgit_2ejuniper_2enet_2fcontrail_2fcn2_2fcontrail_2fpkg_2fapis_2fcore_2fv1alpha1_2fgenerated_2eproto_getter, &descriptor_table_ssd_2dgit_2ejuniper_2enet_2fcontrail_2fcn2_2fcontrail_2fpkg_2fapis_2fcore_2fv1alpha1_2fgenerated_2eproto_once,
      file_level_metadata_ssd_2dgit_2ejuniper_2enet_2fcontrail_2fcn2_2fcontrail_2fpkg_2fapis_2fcore_2fv1alpha1_2fgenerated_2eproto[121]);
}

// ===================================================================

class VirtualNetworkRouterList::_Internal {
 public:
  using HasBits = decltype(std::declval<VirtualNetworkRouterList>()._has_bits_);
  static const ::k8s::io::apimachinery::pkg::apis::meta::v1::ListMeta& metadata(const VirtualNetworkRouterList* msg);
  static void set_has_metadata(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::k8s::io::apimachinery::pkg::apis::meta::v1::ListMeta&
VirtualNetworkRouterList::_Internal::metadata(const VirtualNetworkRouterList* msg) {
  return *msg->metadata_;
}
void VirtualNetworkRouterList::clear_metadata() {
  if (metadata_ != nullptr) metadata_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
VirtualNetworkRouterList::VirtualNetworkRouterList(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  items_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.VirtualNetworkRouterList)
}
VirtualNetworkRouterList::VirtualNetworkRouterList(const VirtualNetworkRouterList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      items_(from.items_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_metadata()) {
    metadata_ = new ::k8s::io::apimachinery::pkg::apis::meta::v1::ListMeta(*from.metadata_);
  } else {
    metadata_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.VirtualNetworkRouterList)
}

inline void VirtualNetworkRouterList::SharedCtor() {
metadata_ = nullptr;
}

VirtualNetworkRouterList::~VirtualNetworkRouterList() {
  // @@protoc_insertion_point(destructor:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.VirtualNetworkRouterList)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void VirtualNetworkRouterList::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete metadata_;
}

void VirtualNetworkRouterList::ArenaDtor(void* object) {
  VirtualNetworkRouterList* _this = reinterpret_cast< VirtualNetworkRouterList* >(object);
  (void)_this;
}
void VirtualNetworkRouterList::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void VirtualNetworkRouterList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void VirtualNetworkRouterList::Clear() {
// @@protoc_insertion_point(message_clear_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.VirtualNetworkRouterList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  items_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(metadata_ != nullptr);
    metadata_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* VirtualNetworkRouterList::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_metadata(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.VirtualNetworkRouter items = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_items(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* VirtualNetworkRouterList::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.VirtualNetworkRouterList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::metadata(this), target, stream);
  }

  // repeated .ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.VirtualNetworkRouter items = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_items_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_items(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.VirtualNetworkRouterList)
  return target;
}

size_t VirtualNetworkRouterList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.VirtualNetworkRouterList)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.VirtualNetworkRouter items = 2;
  total_size += 1UL * this->_internal_items_size();
  for (const auto& msg : this->items_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional .k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *metadata_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData VirtualNetworkRouterList::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    VirtualNetworkRouterList::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*VirtualNetworkRouterList::GetClassData() const { return &_class_data_; }

void VirtualNetworkRouterList::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<VirtualNetworkRouterList *>(to)->MergeFrom(
      static_cast<const VirtualNetworkRouterList &>(from));
}


void VirtualNetworkRouterList::MergeFrom(const VirtualNetworkRouterList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.VirtualNetworkRouterList)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  items_.MergeFrom(from.items_);
  if (from._internal_has_metadata()) {
    _internal_mutable_metadata()->::k8s::io::apimachinery::pkg::apis::meta::v1::ListMeta::MergeFrom(from._internal_metadata());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void VirtualNetworkRouterList::CopyFrom(const VirtualNetworkRouterList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.VirtualNetworkRouterList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VirtualNetworkRouterList::IsInitialized() const {
  return true;
}

void VirtualNetworkRouterList::InternalSwap(VirtualNetworkRouterList* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  items_.InternalSwap(&other->items_);
  swap(metadata_, other->metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata VirtualNetworkRouterList::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_ssd_2dgit_2ejuniper_2enet_2fcontrail_2fcn2_2fcontrail_2fpkg_2fapis_2fcore_2fv1alpha1_2fgenerated_2eproto_getter, &descriptor_table_ssd_2dgit_2ejuniper_2enet_2fcontrail_2fcn2_2fcontrail_2fpkg_2fapis_2fcore_2fv1alpha1_2fgenerated_2eproto_once,
      file_level_metadata_ssd_2dgit_2ejuniper_2enet_2fcontrail_2fcn2_2fcontrail_2fpkg_2fapis_2fcore_2fv1alpha1_2fgenerated_2eproto[122]);
}

// ===================================================================

class VirtualNetworkRouterSpec::_Internal {
 public:
  using HasBits = decltype(std::declval<VirtualNetworkRouterSpec>()._has_bits_);
  static const ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::CommonSpec& commonspec(const VirtualNetworkRouterSpec* msg);
  static void set_has_commonspec(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::k8s::io::apimachinery::pkg::apis::meta::v1::LabelSelector& virtualnetworkselector(const VirtualNetworkRouterSpec* msg);
  static void set_has_virtualnetworkselector(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::ImportVirtualNetworkRouter& import(const VirtualNetworkRouterSpec* msg);
  static void set_has_import(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

const ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::CommonSpec&
VirtualNetworkRouterSpec::_Internal::commonspec(const VirtualNetworkRouterSpec* msg) {
  return *msg->commonspec_;
}
const ::k8s::io::apimachinery::pkg::apis::meta::v1::LabelSelector&
VirtualNetworkRouterSpec::_Internal::virtualnetworkselector(const VirtualNetworkRouterSpec* msg) {
  return *msg->virtualnetworkselector_;
}
const ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::ImportVirtualNetworkRouter&
VirtualNetworkRouterSpec::_Internal::import(const VirtualNetworkRouterSpec* msg) {
  return *msg->import_;
}
void VirtualNetworkRouterSpec::clear_virtualnetworkselector() {
  if (virtualnetworkselector_ != nullptr) virtualnetworkselector_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
VirtualNetworkRouterSpec::VirtualNetworkRouterSpec(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.VirtualNetworkRouterSpec)
}
VirtualNetworkRouterSpec::VirtualNetworkRouterSpec(const VirtualNetworkRouterSpec& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_type()) {
    type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_type(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_commonspec()) {
    commonspec_ = new ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::CommonSpec(*from.commonspec_);
  } else {
    commonspec_ = nullptr;
  }
  if (from._internal_has_virtualnetworkselector()) {
    virtualnetworkselector_ = new ::k8s::io::apimachinery::pkg::apis::meta::v1::LabelSelector(*from.virtualnetworkselector_);
  } else {
    virtualnetworkselector_ = nullptr;
  }
  if (from._internal_has_import()) {
    import_ = new ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::ImportVirtualNetworkRouter(*from.import_);
  } else {
    import_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.VirtualNetworkRouterSpec)
}

inline void VirtualNetworkRouterSpec::SharedCtor() {
type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&commonspec_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&import_) -
    reinterpret_cast<char*>(&commonspec_)) + sizeof(import_));
}

VirtualNetworkRouterSpec::~VirtualNetworkRouterSpec() {
  // @@protoc_insertion_point(destructor:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.VirtualNetworkRouterSpec)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void VirtualNetworkRouterSpec::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  type_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete commonspec_;
  if (this != internal_default_instance()) delete virtualnetworkselector_;
  if (this != internal_default_instance()) delete import_;
}

void VirtualNetworkRouterSpec::ArenaDtor(void* object) {
  VirtualNetworkRouterSpec* _this = reinterpret_cast< VirtualNetworkRouterSpec* >(object);
  (void)_this;
}
void VirtualNetworkRouterSpec::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void VirtualNetworkRouterSpec::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void VirtualNetworkRouterSpec::Clear() {
// @@protoc_insertion_point(message_clear_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.VirtualNetworkRouterSpec)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      type_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(commonspec_ != nullptr);
      commonspec_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(virtualnetworkselector_ != nullptr);
      virtualnetworkselector_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(import_ != nullptr);
      import_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* VirtualNetworkRouterSpec::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.CommonSpec commonSpec = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_commonspec(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_type();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.VirtualNetworkRouterSpec.type");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .k8s.io.apimachinery.pkg.apis.meta.v1.LabelSelector virtualNetworkSelector = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_virtualnetworkselector(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.ImportVirtualNetworkRouter import = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_import(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* VirtualNetworkRouterSpec::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.VirtualNetworkRouterSpec)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.CommonSpec commonSpec = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::commonspec(this), target, stream);
  }

  // optional string type = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_type().data(), static_cast<int>(this->_internal_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.VirtualNetworkRouterSpec.type");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_type(), target);
  }

  // optional .k8s.io.apimachinery.pkg.apis.meta.v1.LabelSelector virtualNetworkSelector = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::virtualnetworkselector(this), target, stream);
  }

  // optional .ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.ImportVirtualNetworkRouter import = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::import(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.VirtualNetworkRouterSpec)
  return target;
}

size_t VirtualNetworkRouterSpec::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.VirtualNetworkRouterSpec)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string type = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_type());
    }

    // optional .ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.CommonSpec commonSpec = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *commonspec_);
    }

    // optional .k8s.io.apimachinery.pkg.apis.meta.v1.LabelSelector virtualNetworkSelector = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *virtualnetworkselector_);
    }

    // optional .ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.ImportVirtualNetworkRouter import = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *import_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData VirtualNetworkRouterSpec::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    VirtualNetworkRouterSpec::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*VirtualNetworkRouterSpec::GetClassData() const { return &_class_data_; }

void VirtualNetworkRouterSpec::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<VirtualNetworkRouterSpec *>(to)->MergeFrom(
      static_cast<const VirtualNetworkRouterSpec &>(from));
}


void VirtualNetworkRouterSpec::MergeFrom(const VirtualNetworkRouterSpec& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.VirtualNetworkRouterSpec)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_type(from._internal_type());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_commonspec()->::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::CommonSpec::MergeFrom(from._internal_commonspec());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_virtualnetworkselector()->::k8s::io::apimachinery::pkg::apis::meta::v1::LabelSelector::MergeFrom(from._internal_virtualnetworkselector());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_import()->::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::ImportVirtualNetworkRouter::MergeFrom(from._internal_import());
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void VirtualNetworkRouterSpec::CopyFrom(const VirtualNetworkRouterSpec& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.VirtualNetworkRouterSpec)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VirtualNetworkRouterSpec::IsInitialized() const {
  return true;
}

void VirtualNetworkRouterSpec::InternalSwap(VirtualNetworkRouterSpec* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &type_, GetArenaForAllocation(),
      &other->type_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(VirtualNetworkRouterSpec, import_)
      + sizeof(VirtualNetworkRouterSpec::import_)
      - PROTOBUF_FIELD_OFFSET(VirtualNetworkRouterSpec, commonspec_)>(
          reinterpret_cast<char*>(&commonspec_),
          reinterpret_cast<char*>(&other->commonspec_));
}

::PROTOBUF_NAMESPACE_ID::Metadata VirtualNetworkRouterSpec::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_ssd_2dgit_2ejuniper_2enet_2fcontrail_2fcn2_2fcontrail_2fpkg_2fapis_2fcore_2fv1alpha1_2fgenerated_2eproto_getter, &descriptor_table_ssd_2dgit_2ejuniper_2enet_2fcontrail_2fcn2_2fcontrail_2fpkg_2fapis_2fcore_2fv1alpha1_2fgenerated_2eproto_once,
      file_level_metadata_ssd_2dgit_2ejuniper_2enet_2fcontrail_2fcn2_2fcontrail_2fpkg_2fapis_2fcore_2fv1alpha1_2fgenerated_2eproto[123]);
}

// ===================================================================

class VirtualNetworkRouterStatus::_Internal {
 public:
  using HasBits = decltype(std::declval<VirtualNetworkRouterStatus>()._has_bits_);
  static const ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::CommonStatus& commonstatus(const VirtualNetworkRouterStatus* msg);
  static void set_has_commonstatus(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::CommonStatus&
VirtualNetworkRouterStatus::_Internal::commonstatus(const VirtualNetworkRouterStatus* msg) {
  return *msg->commonstatus_;
}
VirtualNetworkRouterStatus::VirtualNetworkRouterStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.VirtualNetworkRouterStatus)
}
VirtualNetworkRouterStatus::VirtualNetworkRouterStatus(const VirtualNetworkRouterStatus& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_commonstatus()) {
    commonstatus_ = new ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::CommonStatus(*from.commonstatus_);
  } else {
    commonstatus_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.VirtualNetworkRouterStatus)
}

inline void VirtualNetworkRouterStatus::SharedCtor() {
commonstatus_ = nullptr;
}

VirtualNetworkRouterStatus::~VirtualNetworkRouterStatus() {
  // @@protoc_insertion_point(destructor:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.VirtualNetworkRouterStatus)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void VirtualNetworkRouterStatus::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete commonstatus_;
}

void VirtualNetworkRouterStatus::ArenaDtor(void* object) {
  VirtualNetworkRouterStatus* _this = reinterpret_cast< VirtualNetworkRouterStatus* >(object);
  (void)_this;
}
void VirtualNetworkRouterStatus::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void VirtualNetworkRouterStatus::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void VirtualNetworkRouterStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.VirtualNetworkRouterStatus)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(commonstatus_ != nullptr);
    commonstatus_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* VirtualNetworkRouterStatus::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.CommonStatus commonStatus = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_commonstatus(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* VirtualNetworkRouterStatus::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.VirtualNetworkRouterStatus)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.CommonStatus commonStatus = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::commonstatus(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.VirtualNetworkRouterStatus)
  return target;
}

size_t VirtualNetworkRouterStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.VirtualNetworkRouterStatus)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.CommonStatus commonStatus = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *commonstatus_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData VirtualNetworkRouterStatus::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    VirtualNetworkRouterStatus::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*VirtualNetworkRouterStatus::GetClassData() const { return &_class_data_; }

void VirtualNetworkRouterStatus::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<VirtualNetworkRouterStatus *>(to)->MergeFrom(
      static_cast<const VirtualNetworkRouterStatus &>(from));
}


void VirtualNetworkRouterStatus::MergeFrom(const VirtualNetworkRouterStatus& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.VirtualNetworkRouterStatus)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_commonstatus()) {
    _internal_mutable_commonstatus()->::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::CommonStatus::MergeFrom(from._internal_commonstatus());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void VirtualNetworkRouterStatus::CopyFrom(const VirtualNetworkRouterStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.VirtualNetworkRouterStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VirtualNetworkRouterStatus::IsInitialized() const {
  return true;
}

void VirtualNetworkRouterStatus::InternalSwap(VirtualNetworkRouterStatus* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(commonstatus_, other->commonstatus_);
}

::PROTOBUF_NAMESPACE_ID::Metadata VirtualNetworkRouterStatus::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_ssd_2dgit_2ejuniper_2enet_2fcontrail_2fcn2_2fcontrail_2fpkg_2fapis_2fcore_2fv1alpha1_2fgenerated_2eproto_getter, &descriptor_table_ssd_2dgit_2ejuniper_2enet_2fcontrail_2fcn2_2fcontrail_2fpkg_2fapis_2fcore_2fv1alpha1_2fgenerated_2eproto_once,
      file_level_metadata_ssd_2dgit_2ejuniper_2enet_2fcontrail_2fcn2_2fcontrail_2fpkg_2fapis_2fcore_2fv1alpha1_2fgenerated_2eproto[124]);
}

// ===================================================================

class VirtualNetworkSpec::_Internal {
 public:
  using HasBits = decltype(std::declval<VirtualNetworkSpec>()._has_bits_);
  static const ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::CommonSpec& commonspec(const VirtualNetworkSpec* msg);
  static void set_has_commonspec(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_fabricsnat(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::ResourceReference& v4subnetreference(const VirtualNetworkSpec* msg);
  static void set_has_v4subnetreference(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::ResourceReference& v6subnetreference(const VirtualNetworkSpec* msg);
  static void set_has_v6subnetreference(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::VirtualNetworkType& virtualnetworkproperties(const VirtualNetworkSpec* msg);
  static void set_has_virtualnetworkproperties(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::ResourceReference& providernetworkreference(const VirtualNetworkSpec* msg);
  static void set_has_providernetworkreference(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_isprovidernetwork(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_fabricforwarding(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
};

const ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::CommonSpec&
VirtualNetworkSpec::_Internal::commonspec(const VirtualNetworkSpec* msg) {
  return *msg->commonspec_;
}
const ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::ResourceReference&
VirtualNetworkSpec::_Internal::v4subnetreference(const VirtualNetworkSpec* msg) {
  return *msg->v4subnetreference_;
}
const ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::ResourceReference&
VirtualNetworkSpec::_Internal::v6subnetreference(const VirtualNetworkSpec* msg) {
  return *msg->v6subnetreference_;
}
const ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::VirtualNetworkType&
VirtualNetworkSpec::_Internal::virtualnetworkproperties(const VirtualNetworkSpec* msg) {
  return *msg->virtualnetworkproperties_;
}
const ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::ResourceReference&
VirtualNetworkSpec::_Internal::providernetworkreference(const VirtualNetworkSpec* msg) {
  return *msg->providernetworkreference_;
}
VirtualNetworkSpec::VirtualNetworkSpec(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  routetargetlist_(arena),
  importroutetargetlist_(arena),
  exportroutetargetlist_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.VirtualNetworkSpec)
}
VirtualNetworkSpec::VirtualNetworkSpec(const VirtualNetworkSpec& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      routetargetlist_(from.routetargetlist_),
      importroutetargetlist_(from.importroutetargetlist_),
      exportroutetargetlist_(from.exportroutetargetlist_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_commonspec()) {
    commonspec_ = new ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::CommonSpec(*from.commonspec_);
  } else {
    commonspec_ = nullptr;
  }
  if (from._internal_has_v4subnetreference()) {
    v4subnetreference_ = new ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::ResourceReference(*from.v4subnetreference_);
  } else {
    v4subnetreference_ = nullptr;
  }
  if (from._internal_has_v6subnetreference()) {
    v6subnetreference_ = new ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::ResourceReference(*from.v6subnetreference_);
  } else {
    v6subnetreference_ = nullptr;
  }
  if (from._internal_has_virtualnetworkproperties()) {
    virtualnetworkproperties_ = new ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::VirtualNetworkType(*from.virtualnetworkproperties_);
  } else {
    virtualnetworkproperties_ = nullptr;
  }
  if (from._internal_has_providernetworkreference()) {
    providernetworkreference_ = new ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::ResourceReference(*from.providernetworkreference_);
  } else {
    providernetworkreference_ = nullptr;
  }
  ::memcpy(&fabricsnat_, &from.fabricsnat_,
    static_cast<size_t>(reinterpret_cast<char*>(&fabricforwarding_) -
    reinterpret_cast<char*>(&fabricsnat_)) + sizeof(fabricforwarding_));
  // @@protoc_insertion_point(copy_constructor:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.VirtualNetworkSpec)
}

inline void VirtualNetworkSpec::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&commonspec_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&fabricforwarding_) -
    reinterpret_cast<char*>(&commonspec_)) + sizeof(fabricforwarding_));
}

VirtualNetworkSpec::~VirtualNetworkSpec() {
  // @@protoc_insertion_point(destructor:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.VirtualNetworkSpec)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void VirtualNetworkSpec::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete commonspec_;
  if (this != internal_default_instance()) delete v4subnetreference_;
  if (this != internal_default_instance()) delete v6subnetreference_;
  if (this != internal_default_instance()) delete virtualnetworkproperties_;
  if (this != internal_default_instance()) delete providernetworkreference_;
}

void VirtualNetworkSpec::ArenaDtor(void* object) {
  VirtualNetworkSpec* _this = reinterpret_cast< VirtualNetworkSpec* >(object);
  (void)_this;
}
void VirtualNetworkSpec::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void VirtualNetworkSpec::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void VirtualNetworkSpec::Clear() {
// @@protoc_insertion_point(message_clear_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.VirtualNetworkSpec)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  routetargetlist_.Clear();
  importroutetargetlist_.Clear();
  exportroutetargetlist_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(commonspec_ != nullptr);
      commonspec_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(v4subnetreference_ != nullptr);
      v4subnetreference_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(v6subnetreference_ != nullptr);
      v6subnetreference_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(virtualnetworkproperties_ != nullptr);
      virtualnetworkproperties_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(providernetworkreference_ != nullptr);
      providernetworkreference_->Clear();
    }
  }
  ::memset(&fabricsnat_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&fabricforwarding_) -
      reinterpret_cast<char*>(&fabricsnat_)) + sizeof(fabricforwarding_));
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* VirtualNetworkSpec::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.CommonSpec commonSpec = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_commonspec(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool fabricSNAT = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_fabricsnat(&has_bits);
          fabricsnat_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.ResourceReference v4SubnetReference = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_v4subnetreference(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.ResourceReference v6SubnetReference = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_v6subnetreference(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string routeTargetList = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_routetargetlist();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            #ifndef NDEBUG
            ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.VirtualNetworkSpec.routeTargetList");
            #endif  // !NDEBUG
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated string importRouteTargetList = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_importroutetargetlist();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            #ifndef NDEBUG
            ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.VirtualNetworkSpec.importRouteTargetList");
            #endif  // !NDEBUG
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated string exportRouteTargetList = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_exportroutetargetlist();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            #ifndef NDEBUG
            ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.VirtualNetworkSpec.exportRouteTargetList");
            #endif  // !NDEBUG
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else goto handle_unusual;
        continue;
      // optional .ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.VirtualNetworkType virtualNetworkProperties = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_virtualnetworkproperties(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.ResourceReference providerNetworkReference = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_providernetworkreference(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool isProviderNetwork = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_isprovidernetwork(&has_bits);
          isprovidernetwork_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool fabricForwarding = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          _Internal::set_has_fabricforwarding(&has_bits);
          fabricforwarding_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* VirtualNetworkSpec::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.VirtualNetworkSpec)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.CommonSpec commonSpec = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::commonspec(this), target, stream);
  }

  // optional bool fabricSNAT = 2;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_fabricsnat(), target);
  }

  // optional .ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.ResourceReference v4SubnetReference = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::v4subnetreference(this), target, stream);
  }

  // optional .ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.ResourceReference v6SubnetReference = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::v6subnetreference(this), target, stream);
  }

  // repeated string routeTargetList = 5;
  for (int i = 0, n = this->_internal_routetargetlist_size(); i < n; i++) {
    const auto& s = this->_internal_routetargetlist(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.VirtualNetworkSpec.routeTargetList");
    target = stream->WriteString(5, s, target);
  }

  // repeated string importRouteTargetList = 6;
  for (int i = 0, n = this->_internal_importroutetargetlist_size(); i < n; i++) {
    const auto& s = this->_internal_importroutetargetlist(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.VirtualNetworkSpec.importRouteTargetList");
    target = stream->WriteString(6, s, target);
  }

  // repeated string exportRouteTargetList = 7;
  for (int i = 0, n = this->_internal_exportroutetargetlist_size(); i < n; i++) {
    const auto& s = this->_internal_exportroutetargetlist(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.VirtualNetworkSpec.exportRouteTargetList");
    target = stream->WriteString(7, s, target);
  }

  // optional .ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.VirtualNetworkType virtualNetworkProperties = 8;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::virtualnetworkproperties(this), target, stream);
  }

  // optional .ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.ResourceReference providerNetworkReference = 9;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        9, _Internal::providernetworkreference(this), target, stream);
  }

  // optional bool isProviderNetwork = 10;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(10, this->_internal_isprovidernetwork(), target);
  }

  // optional bool fabricForwarding = 11;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(11, this->_internal_fabricforwarding(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.VirtualNetworkSpec)
  return target;
}

size_t VirtualNetworkSpec::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.VirtualNetworkSpec)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string routeTargetList = 5;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(routetargetlist_.size());
  for (int i = 0, n = routetargetlist_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      routetargetlist_.Get(i));
  }

  // repeated string importRouteTargetList = 6;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(importroutetargetlist_.size());
  for (int i = 0, n = importroutetargetlist_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      importroutetargetlist_.Get(i));
  }

  // repeated string exportRouteTargetList = 7;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(exportroutetargetlist_.size());
  for (int i = 0, n = exportroutetargetlist_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      exportroutetargetlist_.Get(i));
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional .ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.CommonSpec commonSpec = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *commonspec_);
    }

    // optional .ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.ResourceReference v4SubnetReference = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *v4subnetreference_);
    }

    // optional .ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.ResourceReference v6SubnetReference = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *v6subnetreference_);
    }

    // optional .ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.VirtualNetworkType virtualNetworkProperties = 8;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *virtualnetworkproperties_);
    }

    // optional .ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.ResourceReference providerNetworkReference = 9;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *providernetworkreference_);
    }

    // optional bool fabricSNAT = 2;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 1;
    }

    // optional bool isProviderNetwork = 10;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 1;
    }

    // optional bool fabricForwarding = 11;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData VirtualNetworkSpec::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    VirtualNetworkSpec::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*VirtualNetworkSpec::GetClassData() const { return &_class_data_; }

void VirtualNetworkSpec::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<VirtualNetworkSpec *>(to)->MergeFrom(
      static_cast<const VirtualNetworkSpec &>(from));
}


void VirtualNetworkSpec::MergeFrom(const VirtualNetworkSpec& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.VirtualNetworkSpec)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  routetargetlist_.MergeFrom(from.routetargetlist_);
  importroutetargetlist_.MergeFrom(from.importroutetargetlist_);
  exportroutetargetlist_.MergeFrom(from.exportroutetargetlist_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_commonspec()->::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::CommonSpec::MergeFrom(from._internal_commonspec());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_v4subnetreference()->::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::ResourceReference::MergeFrom(from._internal_v4subnetreference());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_v6subnetreference()->::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::ResourceReference::MergeFrom(from._internal_v6subnetreference());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_virtualnetworkproperties()->::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::VirtualNetworkType::MergeFrom(from._internal_virtualnetworkproperties());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_mutable_providernetworkreference()->::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::ResourceReference::MergeFrom(from._internal_providernetworkreference());
    }
    if (cached_has_bits & 0x00000020u) {
      fabricsnat_ = from.fabricsnat_;
    }
    if (cached_has_bits & 0x00000040u) {
      isprovidernetwork_ = from.isprovidernetwork_;
    }
    if (cached_has_bits & 0x00000080u) {
      fabricforwarding_ = from.fabricforwarding_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void VirtualNetworkSpec::CopyFrom(const VirtualNetworkSpec& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.VirtualNetworkSpec)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VirtualNetworkSpec::IsInitialized() const {
  return true;
}

void VirtualNetworkSpec::InternalSwap(VirtualNetworkSpec* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  routetargetlist_.InternalSwap(&other->routetargetlist_);
  importroutetargetlist_.InternalSwap(&other->importroutetargetlist_);
  exportroutetargetlist_.InternalSwap(&other->exportroutetargetlist_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(VirtualNetworkSpec, fabricforwarding_)
      + sizeof(VirtualNetworkSpec::fabricforwarding_)
      - PROTOBUF_FIELD_OFFSET(VirtualNetworkSpec, commonspec_)>(
          reinterpret_cast<char*>(&commonspec_),
          reinterpret_cast<char*>(&other->commonspec_));
}

::PROTOBUF_NAMESPACE_ID::Metadata VirtualNetworkSpec::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_ssd_2dgit_2ejuniper_2enet_2fcontrail_2fcn2_2fcontrail_2fpkg_2fapis_2fcore_2fv1alpha1_2fgenerated_2eproto_getter, &descriptor_table_ssd_2dgit_2ejuniper_2enet_2fcontrail_2fcn2_2fcontrail_2fpkg_2fapis_2fcore_2fv1alpha1_2fgenerated_2eproto_once,
      file_level_metadata_ssd_2dgit_2ejuniper_2enet_2fcontrail_2fcn2_2fcontrail_2fpkg_2fapis_2fcore_2fv1alpha1_2fgenerated_2eproto[125]);
}

// ===================================================================

class VirtualNetworkStatus::_Internal {
 public:
  using HasBits = decltype(std::declval<VirtualNetworkStatus>()._has_bits_);
  static const ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::CommonStatus& commonstatus(const VirtualNetworkStatus* msg);
  static void set_has_commonstatus(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_virtualnetworknetworkid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::CommonStatus&
VirtualNetworkStatus::_Internal::commonstatus(const VirtualNetworkStatus* msg) {
  return *msg->commonstatus_;
}
VirtualNetworkStatus::VirtualNetworkStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.VirtualNetworkStatus)
}
VirtualNetworkStatus::VirtualNetworkStatus(const VirtualNetworkStatus& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_commonstatus()) {
    commonstatus_ = new ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::CommonStatus(*from.commonstatus_);
  } else {
    commonstatus_ = nullptr;
  }
  virtualnetworknetworkid_ = from.virtualnetworknetworkid_;
  // @@protoc_insertion_point(copy_constructor:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.VirtualNetworkStatus)
}

inline void VirtualNetworkStatus::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&commonstatus_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&virtualnetworknetworkid_) -
    reinterpret_cast<char*>(&commonstatus_)) + sizeof(virtualnetworknetworkid_));
}

VirtualNetworkStatus::~VirtualNetworkStatus() {
  // @@protoc_insertion_point(destructor:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.VirtualNetworkStatus)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void VirtualNetworkStatus::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete commonstatus_;
}

void VirtualNetworkStatus::ArenaDtor(void* object) {
  VirtualNetworkStatus* _this = reinterpret_cast< VirtualNetworkStatus* >(object);
  (void)_this;
}
void VirtualNetworkStatus::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void VirtualNetworkStatus::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void VirtualNetworkStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.VirtualNetworkStatus)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(commonstatus_ != nullptr);
    commonstatus_->Clear();
  }
  virtualnetworknetworkid_ = int64_t{0};
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* VirtualNetworkStatus::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.CommonStatus commonStatus = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_commonstatus(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 virtualNetworkNetworkId = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_virtualnetworknetworkid(&has_bits);
          virtualnetworknetworkid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* VirtualNetworkStatus::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.VirtualNetworkStatus)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.CommonStatus commonStatus = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::commonstatus(this), target, stream);
  }

  // optional int64 virtualNetworkNetworkId = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_virtualnetworknetworkid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.VirtualNetworkStatus)
  return target;
}

size_t VirtualNetworkStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.VirtualNetworkStatus)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.CommonStatus commonStatus = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *commonstatus_);
    }

    // optional int64 virtualNetworkNetworkId = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->_internal_virtualnetworknetworkid());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData VirtualNetworkStatus::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    VirtualNetworkStatus::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*VirtualNetworkStatus::GetClassData() const { return &_class_data_; }

void VirtualNetworkStatus::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<VirtualNetworkStatus *>(to)->MergeFrom(
      static_cast<const VirtualNetworkStatus &>(from));
}


void VirtualNetworkStatus::MergeFrom(const VirtualNetworkStatus& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.VirtualNetworkStatus)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_commonstatus()->::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::CommonStatus::MergeFrom(from._internal_commonstatus());
    }
    if (cached_has_bits & 0x00000002u) {
      virtualnetworknetworkid_ = from.virtualnetworknetworkid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void VirtualNetworkStatus::CopyFrom(const VirtualNetworkStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.VirtualNetworkStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VirtualNetworkStatus::IsInitialized() const {
  return true;
}

void VirtualNetworkStatus::InternalSwap(VirtualNetworkStatus* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(VirtualNetworkStatus, virtualnetworknetworkid_)
      + sizeof(VirtualNetworkStatus::virtualnetworknetworkid_)
      - PROTOBUF_FIELD_OFFSET(VirtualNetworkStatus, commonstatus_)>(
          reinterpret_cast<char*>(&commonstatus_),
          reinterpret_cast<char*>(&other->commonstatus_));
}

::PROTOBUF_NAMESPACE_ID::Metadata VirtualNetworkStatus::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_ssd_2dgit_2ejuniper_2enet_2fcontrail_2fcn2_2fcontrail_2fpkg_2fapis_2fcore_2fv1alpha1_2fgenerated_2eproto_getter, &descriptor_table_ssd_2dgit_2ejuniper_2enet_2fcontrail_2fcn2_2fcontrail_2fpkg_2fapis_2fcore_2fv1alpha1_2fgenerated_2eproto_once,
      file_level_metadata_ssd_2dgit_2ejuniper_2enet_2fcontrail_2fcn2_2fcontrail_2fpkg_2fapis_2fcore_2fv1alpha1_2fgenerated_2eproto[126]);
}

// ===================================================================

class VirtualNetworkType::_Internal {
 public:
  using HasBits = decltype(std::declval<VirtualNetworkType>()._has_bits_);
  static void set_has_rpf(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_forwardingmode(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

VirtualNetworkType::VirtualNetworkType(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.VirtualNetworkType)
}
VirtualNetworkType::VirtualNetworkType(const VirtualNetworkType& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  rpf_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_rpf()) {
    rpf_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_rpf(), 
      GetArenaForAllocation());
  }
  forwardingmode_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_forwardingmode()) {
    forwardingmode_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_forwardingmode(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.VirtualNetworkType)
}

inline void VirtualNetworkType::SharedCtor() {
rpf_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
forwardingmode_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

VirtualNetworkType::~VirtualNetworkType() {
  // @@protoc_insertion_point(destructor:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.VirtualNetworkType)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void VirtualNetworkType::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  rpf_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  forwardingmode_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void VirtualNetworkType::ArenaDtor(void* object) {
  VirtualNetworkType* _this = reinterpret_cast< VirtualNetworkType* >(object);
  (void)_this;
}
void VirtualNetworkType::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void VirtualNetworkType::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void VirtualNetworkType::Clear() {
// @@protoc_insertion_point(message_clear_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.VirtualNetworkType)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      rpf_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      forwardingmode_.ClearNonDefaultToEmpty();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* VirtualNetworkType::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string rpf = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_rpf();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.VirtualNetworkType.rpf");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string forwardingMode = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_forwardingmode();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.VirtualNetworkType.forwardingMode");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* VirtualNetworkType::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.VirtualNetworkType)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string rpf = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_rpf().data(), static_cast<int>(this->_internal_rpf().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.VirtualNetworkType.rpf");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_rpf(), target);
  }

  // optional string forwardingMode = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_forwardingmode().data(), static_cast<int>(this->_internal_forwardingmode().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.VirtualNetworkType.forwardingMode");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_forwardingmode(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.VirtualNetworkType)
  return target;
}

size_t VirtualNetworkType::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.VirtualNetworkType)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string rpf = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_rpf());
    }

    // optional string forwardingMode = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_forwardingmode());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData VirtualNetworkType::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    VirtualNetworkType::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*VirtualNetworkType::GetClassData() const { return &_class_data_; }

void VirtualNetworkType::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<VirtualNetworkType *>(to)->MergeFrom(
      static_cast<const VirtualNetworkType &>(from));
}


void VirtualNetworkType::MergeFrom(const VirtualNetworkType& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.VirtualNetworkType)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_rpf(from._internal_rpf());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_forwardingmode(from._internal_forwardingmode());
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void VirtualNetworkType::CopyFrom(const VirtualNetworkType& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.VirtualNetworkType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VirtualNetworkType::IsInitialized() const {
  return true;
}

void VirtualNetworkType::InternalSwap(VirtualNetworkType* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &rpf_, GetArenaForAllocation(),
      &other->rpf_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &forwardingmode_, GetArenaForAllocation(),
      &other->forwardingmode_, other->GetArenaForAllocation()
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata VirtualNetworkType::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_ssd_2dgit_2ejuniper_2enet_2fcontrail_2fcn2_2fcontrail_2fpkg_2fapis_2fcore_2fv1alpha1_2fgenerated_2eproto_getter, &descriptor_table_ssd_2dgit_2ejuniper_2enet_2fcontrail_2fcn2_2fcontrail_2fpkg_2fapis_2fcore_2fv1alpha1_2fgenerated_2eproto_once,
      file_level_metadata_ssd_2dgit_2ejuniper_2enet_2fcontrail_2fcn2_2fcontrail_2fpkg_2fapis_2fcore_2fv1alpha1_2fgenerated_2eproto[127]);
}

// ===================================================================

class VirtualRouter::_Internal {
 public:
  using HasBits = decltype(std::declval<VirtualRouter>()._has_bits_);
  static const ::k8s::io::apimachinery::pkg::apis::meta::v1::ObjectMeta& metadata(const VirtualRouter* msg);
  static void set_has_metadata(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::VirtualRouterSpec& spec(const VirtualRouter* msg);
  static void set_has_spec(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::VirtualRouterStatus& status(const VirtualRouter* msg);
  static void set_has_status(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::k8s::io::apimachinery::pkg::apis::meta::v1::ObjectMeta&
VirtualRouter::_Internal::metadata(const VirtualRouter* msg) {
  return *msg->metadata_;
}
const ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::VirtualRouterSpec&
VirtualRouter::_Internal::spec(const VirtualRouter* msg) {
  return *msg->spec_;
}
const ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::VirtualRouterStatus&
VirtualRouter::_Internal::status(const VirtualRouter* msg) {
  return *msg->status_;
}
void VirtualRouter::clear_metadata() {
  if (metadata_ != nullptr) metadata_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
VirtualRouter::VirtualRouter(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.VirtualRouter)
}
VirtualRouter::VirtualRouter(const VirtualRouter& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_metadata()) {
    metadata_ = new ::k8s::io::apimachinery::pkg::apis::meta::v1::ObjectMeta(*from.metadata_);
  } else {
    metadata_ = nullptr;
  }
  if (from._internal_has_spec()) {
    spec_ = new ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::VirtualRouterSpec(*from.spec_);
  } else {
    spec_ = nullptr;
  }
  if (from._internal_has_status()) {
    status_ = new ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::VirtualRouterStatus(*from.status_);
  } else {
    status_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.VirtualRouter)
}

inline void VirtualRouter::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&metadata_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&status_) -
    reinterpret_cast<char*>(&metadata_)) + sizeof(status_));
}

VirtualRouter::~VirtualRouter() {
  // @@protoc_insertion_point(destructor:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.VirtualRouter)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void VirtualRouter::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete metadata_;
  if (this != internal_default_instance()) delete spec_;
  if (this != internal_default_instance()) delete status_;
}

void VirtualRouter::ArenaDtor(void* object) {
  VirtualRouter* _this = reinterpret_cast< VirtualRouter* >(object);
  (void)_this;
}
void VirtualRouter::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void VirtualRouter::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void VirtualRouter::Clear() {
// @@protoc_insertion_point(message_clear_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.VirtualRouter)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(metadata_ != nullptr);
      metadata_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(spec_ != nullptr);
      spec_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(status_ != nullptr);
      status_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* VirtualRouter::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_metadata(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.VirtualRouterSpec spec = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_spec(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.VirtualRouterStatus status = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* VirtualRouter::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.VirtualRouter)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::metadata(this), target, stream);
  }

  // optional .ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.VirtualRouterSpec spec = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::spec(this), target, stream);
  }

  // optional .ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.VirtualRouterStatus status = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::status(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.VirtualRouter)
  return target;
}

size_t VirtualRouter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.VirtualRouter)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *metadata_);
    }

    // optional .ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.VirtualRouterSpec spec = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *spec_);
    }

    // optional .ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.VirtualRouterStatus status = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *status_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData VirtualRouter::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    VirtualRouter::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*VirtualRouter::GetClassData() const { return &_class_data_; }

void VirtualRouter::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<VirtualRouter *>(to)->MergeFrom(
      static_cast<const VirtualRouter &>(from));
}


void VirtualRouter::MergeFrom(const VirtualRouter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.VirtualRouter)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_metadata()->::k8s::io::apimachinery::pkg::apis::meta::v1::ObjectMeta::MergeFrom(from._internal_metadata());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_spec()->::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::VirtualRouterSpec::MergeFrom(from._internal_spec());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_status()->::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::VirtualRouterStatus::MergeFrom(from._internal_status());
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void VirtualRouter::CopyFrom(const VirtualRouter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.VirtualRouter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VirtualRouter::IsInitialized() const {
  return true;
}

void VirtualRouter::InternalSwap(VirtualRouter* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(VirtualRouter, status_)
      + sizeof(VirtualRouter::status_)
      - PROTOBUF_FIELD_OFFSET(VirtualRouter, metadata_)>(
          reinterpret_cast<char*>(&metadata_),
          reinterpret_cast<char*>(&other->metadata_));
}

::PROTOBUF_NAMESPACE_ID::Metadata VirtualRouter::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_ssd_2dgit_2ejuniper_2enet_2fcontrail_2fcn2_2fcontrail_2fpkg_2fapis_2fcore_2fv1alpha1_2fgenerated_2eproto_getter, &descriptor_table_ssd_2dgit_2ejuniper_2enet_2fcontrail_2fcn2_2fcontrail_2fpkg_2fapis_2fcore_2fv1alpha1_2fgenerated_2eproto_once,
      file_level_metadata_ssd_2dgit_2ejuniper_2enet_2fcontrail_2fcn2_2fcontrail_2fpkg_2fapis_2fcore_2fv1alpha1_2fgenerated_2eproto[128]);
}

// ===================================================================

class VirtualRouterList::_Internal {
 public:
  using HasBits = decltype(std::declval<VirtualRouterList>()._has_bits_);
  static const ::k8s::io::apimachinery::pkg::apis::meta::v1::ListMeta& metadata(const VirtualRouterList* msg);
  static void set_has_metadata(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::k8s::io::apimachinery::pkg::apis::meta::v1::ListMeta&
VirtualRouterList::_Internal::metadata(const VirtualRouterList* msg) {
  return *msg->metadata_;
}
void VirtualRouterList::clear_metadata() {
  if (metadata_ != nullptr) metadata_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
VirtualRouterList::VirtualRouterList(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  items_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.VirtualRouterList)
}
VirtualRouterList::VirtualRouterList(const VirtualRouterList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      items_(from.items_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_metadata()) {
    metadata_ = new ::k8s::io::apimachinery::pkg::apis::meta::v1::ListMeta(*from.metadata_);
  } else {
    metadata_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.VirtualRouterList)
}

inline void VirtualRouterList::SharedCtor() {
metadata_ = nullptr;
}

VirtualRouterList::~VirtualRouterList() {
  // @@protoc_insertion_point(destructor:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.VirtualRouterList)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void VirtualRouterList::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete metadata_;
}

void VirtualRouterList::ArenaDtor(void* object) {
  VirtualRouterList* _this = reinterpret_cast< VirtualRouterList* >(object);
  (void)_this;
}
void VirtualRouterList::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void VirtualRouterList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void VirtualRouterList::Clear() {
// @@protoc_insertion_point(message_clear_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.VirtualRouterList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  items_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(metadata_ != nullptr);
    metadata_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* VirtualRouterList::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_metadata(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.VirtualRouter items = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_items(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* VirtualRouterList::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.VirtualRouterList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::metadata(this), target, stream);
  }

  // repeated .ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.VirtualRouter items = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_items_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_items(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.VirtualRouterList)
  return target;
}

size_t VirtualRouterList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.VirtualRouterList)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.VirtualRouter items = 2;
  total_size += 1UL * this->_internal_items_size();
  for (const auto& msg : this->items_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional .k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *metadata_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData VirtualRouterList::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    VirtualRouterList::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*VirtualRouterList::GetClassData() const { return &_class_data_; }

void VirtualRouterList::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<VirtualRouterList *>(to)->MergeFrom(
      static_cast<const VirtualRouterList &>(from));
}


void VirtualRouterList::MergeFrom(const VirtualRouterList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.VirtualRouterList)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  items_.MergeFrom(from.items_);
  if (from._internal_has_metadata()) {
    _internal_mutable_metadata()->::k8s::io::apimachinery::pkg::apis::meta::v1::ListMeta::MergeFrom(from._internal_metadata());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void VirtualRouterList::CopyFrom(const VirtualRouterList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.VirtualRouterList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VirtualRouterList::IsInitialized() const {
  return true;
}

void VirtualRouterList::InternalSwap(VirtualRouterList* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  items_.InternalSwap(&other->items_);
  swap(metadata_, other->metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata VirtualRouterList::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_ssd_2dgit_2ejuniper_2enet_2fcontrail_2fcn2_2fcontrail_2fpkg_2fapis_2fcore_2fv1alpha1_2fgenerated_2eproto_getter, &descriptor_table_ssd_2dgit_2ejuniper_2enet_2fcontrail_2fcn2_2fcontrail_2fpkg_2fapis_2fcore_2fv1alpha1_2fgenerated_2eproto_once,
      file_level_metadata_ssd_2dgit_2ejuniper_2enet_2fcontrail_2fcn2_2fcontrail_2fpkg_2fapis_2fcore_2fv1alpha1_2fgenerated_2eproto[129]);
}

// ===================================================================

class VirtualRouterSpec::_Internal {
 public:
  using HasBits = decltype(std::declval<VirtualRouterSpec>()._has_bits_);
  static const ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::CommonSpec& commonspec(const VirtualRouterSpec* msg);
  static void set_has_commonspec(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::k8s::io::api::core::v1::ObjectReference& parent(const VirtualRouterSpec* msg);
  static void set_has_parent(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_virtualrouterdpdkenabled(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_virtualrouteripaddress(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_virtualroutertype(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::CommonSpec&
VirtualRouterSpec::_Internal::commonspec(const VirtualRouterSpec* msg) {
  return *msg->commonspec_;
}
const ::k8s::io::api::core::v1::ObjectReference&
VirtualRouterSpec::_Internal::parent(const VirtualRouterSpec* msg) {
  return *msg->parent_;
}
void VirtualRouterSpec::clear_parent() {
  if (parent_ != nullptr) parent_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
VirtualRouterSpec::VirtualRouterSpec(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  virtualmachinereferences_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.VirtualRouterSpec)
}
VirtualRouterSpec::VirtualRouterSpec(const VirtualRouterSpec& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      virtualmachinereferences_(from.virtualmachinereferences_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  virtualrouteripaddress_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_virtualrouteripaddress()) {
    virtualrouteripaddress_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_virtualrouteripaddress(), 
      GetArenaForAllocation());
  }
  virtualroutertype_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_virtualroutertype()) {
    virtualroutertype_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_virtualroutertype(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_commonspec()) {
    commonspec_ = new ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::CommonSpec(*from.commonspec_);
  } else {
    commonspec_ = nullptr;
  }
  if (from._internal_has_parent()) {
    parent_ = new ::k8s::io::api::core::v1::ObjectReference(*from.parent_);
  } else {
    parent_ = nullptr;
  }
  virtualrouterdpdkenabled_ = from.virtualrouterdpdkenabled_;
  // @@protoc_insertion_point(copy_constructor:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.VirtualRouterSpec)
}

inline void VirtualRouterSpec::SharedCtor() {
virtualrouteripaddress_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
virtualroutertype_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&commonspec_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&virtualrouterdpdkenabled_) -
    reinterpret_cast<char*>(&commonspec_)) + sizeof(virtualrouterdpdkenabled_));
}

VirtualRouterSpec::~VirtualRouterSpec() {
  // @@protoc_insertion_point(destructor:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.VirtualRouterSpec)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void VirtualRouterSpec::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  virtualrouteripaddress_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  virtualroutertype_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete commonspec_;
  if (this != internal_default_instance()) delete parent_;
}

void VirtualRouterSpec::ArenaDtor(void* object) {
  VirtualRouterSpec* _this = reinterpret_cast< VirtualRouterSpec* >(object);
  (void)_this;
}
void VirtualRouterSpec::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void VirtualRouterSpec::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void VirtualRouterSpec::Clear() {
// @@protoc_insertion_point(message_clear_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.VirtualRouterSpec)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  virtualmachinereferences_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      virtualrouteripaddress_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      virtualroutertype_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(commonspec_ != nullptr);
      commonspec_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(parent_ != nullptr);
      parent_->Clear();
    }
  }
  virtualrouterdpdkenabled_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* VirtualRouterSpec::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.CommonSpec commonSpec = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_commonspec(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .k8s.io.api.core.v1.ObjectReference parent = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_parent(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool virtualRouterDpdkEnabled = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_virtualrouterdpdkenabled(&has_bits);
          virtualrouterdpdkenabled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string virtualRouterIPAddress = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_virtualrouteripaddress();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.VirtualRouterSpec.virtualRouterIPAddress");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string virtualRouterType = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_virtualroutertype();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.VirtualRouterSpec.virtualRouterType");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.ResourceReference virtualMachineReferences = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_virtualmachinereferences(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* VirtualRouterSpec::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.VirtualRouterSpec)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.CommonSpec commonSpec = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::commonspec(this), target, stream);
  }

  // optional .k8s.io.api.core.v1.ObjectReference parent = 2;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::parent(this), target, stream);
  }

  // optional bool virtualRouterDpdkEnabled = 3;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_virtualrouterdpdkenabled(), target);
  }

  // optional string virtualRouterIPAddress = 4;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_virtualrouteripaddress().data(), static_cast<int>(this->_internal_virtualrouteripaddress().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.VirtualRouterSpec.virtualRouterIPAddress");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_virtualrouteripaddress(), target);
  }

  // optional string virtualRouterType = 5;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_virtualroutertype().data(), static_cast<int>(this->_internal_virtualroutertype().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.VirtualRouterSpec.virtualRouterType");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_virtualroutertype(), target);
  }

  // repeated .ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.ResourceReference virtualMachineReferences = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_virtualmachinereferences_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, this->_internal_virtualmachinereferences(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.VirtualRouterSpec)
  return target;
}

size_t VirtualRouterSpec::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.VirtualRouterSpec)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.ResourceReference virtualMachineReferences = 6;
  total_size += 1UL * this->_internal_virtualmachinereferences_size();
  for (const auto& msg : this->virtualmachinereferences_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional string virtualRouterIPAddress = 4;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_virtualrouteripaddress());
    }

    // optional string virtualRouterType = 5;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_virtualroutertype());
    }

    // optional .ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.CommonSpec commonSpec = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *commonspec_);
    }

    // optional .k8s.io.api.core.v1.ObjectReference parent = 2;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *parent_);
    }

    // optional bool virtualRouterDpdkEnabled = 3;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData VirtualRouterSpec::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    VirtualRouterSpec::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*VirtualRouterSpec::GetClassData() const { return &_class_data_; }

void VirtualRouterSpec::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<VirtualRouterSpec *>(to)->MergeFrom(
      static_cast<const VirtualRouterSpec &>(from));
}


void VirtualRouterSpec::MergeFrom(const VirtualRouterSpec& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.VirtualRouterSpec)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  virtualmachinereferences_.MergeFrom(from.virtualmachinereferences_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_virtualrouteripaddress(from._internal_virtualrouteripaddress());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_virtualroutertype(from._internal_virtualroutertype());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_commonspec()->::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::CommonSpec::MergeFrom(from._internal_commonspec());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_parent()->::k8s::io::api::core::v1::ObjectReference::MergeFrom(from._internal_parent());
    }
    if (cached_has_bits & 0x00000010u) {
      virtualrouterdpdkenabled_ = from.virtualrouterdpdkenabled_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void VirtualRouterSpec::CopyFrom(const VirtualRouterSpec& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.VirtualRouterSpec)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VirtualRouterSpec::IsInitialized() const {
  return true;
}

void VirtualRouterSpec::InternalSwap(VirtualRouterSpec* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  virtualmachinereferences_.InternalSwap(&other->virtualmachinereferences_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &virtualrouteripaddress_, GetArenaForAllocation(),
      &other->virtualrouteripaddress_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &virtualroutertype_, GetArenaForAllocation(),
      &other->virtualroutertype_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(VirtualRouterSpec, virtualrouterdpdkenabled_)
      + sizeof(VirtualRouterSpec::virtualrouterdpdkenabled_)
      - PROTOBUF_FIELD_OFFSET(VirtualRouterSpec, commonspec_)>(
          reinterpret_cast<char*>(&commonspec_),
          reinterpret_cast<char*>(&other->commonspec_));
}

::PROTOBUF_NAMESPACE_ID::Metadata VirtualRouterSpec::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_ssd_2dgit_2ejuniper_2enet_2fcontrail_2fcn2_2fcontrail_2fpkg_2fapis_2fcore_2fv1alpha1_2fgenerated_2eproto_getter, &descriptor_table_ssd_2dgit_2ejuniper_2enet_2fcontrail_2fcn2_2fcontrail_2fpkg_2fapis_2fcore_2fv1alpha1_2fgenerated_2eproto_once,
      file_level_metadata_ssd_2dgit_2ejuniper_2enet_2fcontrail_2fcn2_2fcontrail_2fpkg_2fapis_2fcore_2fv1alpha1_2fgenerated_2eproto[130]);
}

// ===================================================================

class VirtualRouterStatus::_Internal {
 public:
  using HasBits = decltype(std::declval<VirtualRouterStatus>()._has_bits_);
  static const ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::CommonStatus& commonstatus(const VirtualRouterStatus* msg);
  static void set_has_commonstatus(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::CommonStatus&
VirtualRouterStatus::_Internal::commonstatus(const VirtualRouterStatus* msg) {
  return *msg->commonstatus_;
}
VirtualRouterStatus::VirtualRouterStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.VirtualRouterStatus)
}
VirtualRouterStatus::VirtualRouterStatus(const VirtualRouterStatus& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_commonstatus()) {
    commonstatus_ = new ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::CommonStatus(*from.commonstatus_);
  } else {
    commonstatus_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.VirtualRouterStatus)
}

inline void VirtualRouterStatus::SharedCtor() {
commonstatus_ = nullptr;
}

VirtualRouterStatus::~VirtualRouterStatus() {
  // @@protoc_insertion_point(destructor:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.VirtualRouterStatus)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void VirtualRouterStatus::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete commonstatus_;
}

void VirtualRouterStatus::ArenaDtor(void* object) {
  VirtualRouterStatus* _this = reinterpret_cast< VirtualRouterStatus* >(object);
  (void)_this;
}
void VirtualRouterStatus::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void VirtualRouterStatus::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void VirtualRouterStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.VirtualRouterStatus)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(commonstatus_ != nullptr);
    commonstatus_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* VirtualRouterStatus::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.CommonStatus commonStatus = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_commonstatus(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* VirtualRouterStatus::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.VirtualRouterStatus)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.CommonStatus commonStatus = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::commonstatus(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.VirtualRouterStatus)
  return target;
}

size_t VirtualRouterStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.VirtualRouterStatus)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.CommonStatus commonStatus = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *commonstatus_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData VirtualRouterStatus::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    VirtualRouterStatus::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*VirtualRouterStatus::GetClassData() const { return &_class_data_; }

void VirtualRouterStatus::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<VirtualRouterStatus *>(to)->MergeFrom(
      static_cast<const VirtualRouterStatus &>(from));
}


void VirtualRouterStatus::MergeFrom(const VirtualRouterStatus& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.VirtualRouterStatus)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_commonstatus()) {
    _internal_mutable_commonstatus()->::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::CommonStatus::MergeFrom(from._internal_commonstatus());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void VirtualRouterStatus::CopyFrom(const VirtualRouterStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ssd_git.juniper.net.contrail.cn2.contrail.pkg.apis.core.v1alpha1.VirtualRouterStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VirtualRouterStatus::IsInitialized() const {
  return true;
}

void VirtualRouterStatus::InternalSwap(VirtualRouterStatus* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(commonstatus_, other->commonstatus_);
}

::PROTOBUF_NAMESPACE_ID::Metadata VirtualRouterStatus::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_ssd_2dgit_2ejuniper_2enet_2fcontrail_2fcn2_2fcontrail_2fpkg_2fapis_2fcore_2fv1alpha1_2fgenerated_2eproto_getter, &descriptor_table_ssd_2dgit_2ejuniper_2enet_2fcontrail_2fcn2_2fcontrail_2fpkg_2fapis_2fcore_2fv1alpha1_2fgenerated_2eproto_once,
      file_level_metadata_ssd_2dgit_2ejuniper_2enet_2fcontrail_2fcn2_2fcontrail_2fpkg_2fapis_2fcore_2fv1alpha1_2fgenerated_2eproto[131]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace v1alpha1
}  // namespace core
}  // namespace apis
}  // namespace pkg
}  // namespace contrail
}  // namespace cn2
}  // namespace contrail
}  // namespace net
}  // namespace juniper
}  // namespace ssd_git
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::APSAttribute* Arena::CreateMaybeMessage< ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::APSAttribute >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::APSAttribute >(arena);
}
template<> PROTOBUF_NOINLINE ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::AddressFamilies* Arena::CreateMaybeMessage< ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::AddressFamilies >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::AddressFamilies >(arena);
}
template<> PROTOBUF_NOINLINE ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::AddressGroup* Arena::CreateMaybeMessage< ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::AddressGroup >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::AddressGroup >(arena);
}
template<> PROTOBUF_NOINLINE ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::AddressGroupList* Arena::CreateMaybeMessage< ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::AddressGroupList >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::AddressGroupList >(arena);
}
template<> PROTOBUF_NOINLINE ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::AddressGroupPrefix* Arena::CreateMaybeMessage< ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::AddressGroupPrefix >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::AddressGroupPrefix >(arena);
}
template<> PROTOBUF_NOINLINE ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::AddressGroupSpec* Arena::CreateMaybeMessage< ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::AddressGroupSpec >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::AddressGroupSpec >(arena);
}
template<> PROTOBUF_NOINLINE ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::AddressGroupStatus* Arena::CreateMaybeMessage< ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::AddressGroupStatus >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::AddressGroupStatus >(arena);
}
template<> PROTOBUF_NOINLINE ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::AllowedAddressPair* Arena::CreateMaybeMessage< ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::AllowedAddressPair >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::AllowedAddressPair >(arena);
}
template<> PROTOBUF_NOINLINE ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::AllowedAddressPairSubnet* Arena::CreateMaybeMessage< ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::AllowedAddressPairSubnet >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::AllowedAddressPairSubnet >(arena);
}
template<> PROTOBUF_NOINLINE ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::AllowedAddressPairs* Arena::CreateMaybeMessage< ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::AllowedAddressPairs >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::AllowedAddressPairs >(arena);
}
template<> PROTOBUF_NOINLINE ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::ApplicationPolicySet* Arena::CreateMaybeMessage< ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::ApplicationPolicySet >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::ApplicationPolicySet >(arena);
}
template<> PROTOBUF_NOINLINE ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::ApplicationPolicySetList* Arena::CreateMaybeMessage< ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::ApplicationPolicySetList >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::ApplicationPolicySetList >(arena);
}
template<> PROTOBUF_NOINLINE ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::ApplicationPolicySetSpec* Arena::CreateMaybeMessage< ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::ApplicationPolicySetSpec >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::ApplicationPolicySetSpec >(arena);
}
template<> PROTOBUF_NOINLINE ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::ApplicationPolicySetStatus* Arena::CreateMaybeMessage< ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::ApplicationPolicySetStatus >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::ApplicationPolicySetStatus >(arena);
}
template<> PROTOBUF_NOINLINE ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::AuthenticationData* Arena::CreateMaybeMessage< ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::AuthenticationData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::AuthenticationData >(arena);
}
template<> PROTOBUF_NOINLINE ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::AuthenticationKeyItem* Arena::CreateMaybeMessage< ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::AuthenticationKeyItem >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::AuthenticationKeyItem >(arena);
}
template<> PROTOBUF_NOINLINE ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::BGPAsAService* Arena::CreateMaybeMessage< ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::BGPAsAService >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::BGPAsAService >(arena);
}
template<> PROTOBUF_NOINLINE ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::BGPAsAServiceList* Arena::CreateMaybeMessage< ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::BGPAsAServiceList >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::BGPAsAServiceList >(arena);
}
template<> PROTOBUF_NOINLINE ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::BGPAsAServiceSpec* Arena::CreateMaybeMessage< ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::BGPAsAServiceSpec >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::BGPAsAServiceSpec >(arena);
}
template<> PROTOBUF_NOINLINE ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::BGPAsAServiceStatus* Arena::CreateMaybeMessage< ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::BGPAsAServiceStatus >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::BGPAsAServiceStatus >(arena);
}
template<> PROTOBUF_NOINLINE ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::BGPFamilyAttributes* Arena::CreateMaybeMessage< ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::BGPFamilyAttributes >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::BGPFamilyAttributes >(arena);
}
template<> PROTOBUF_NOINLINE ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::BGPPrefixLimit* Arena::CreateMaybeMessage< ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::BGPPrefixLimit >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::BGPPrefixLimit >(arena);
}
template<> PROTOBUF_NOINLINE ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::BGPRouter* Arena::CreateMaybeMessage< ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::BGPRouter >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::BGPRouter >(arena);
}
template<> PROTOBUF_NOINLINE ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::BGPRouterList* Arena::CreateMaybeMessage< ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::BGPRouterList >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::BGPRouterList >(arena);
}
template<> PROTOBUF_NOINLINE ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::BGPRouterParameters* Arena::CreateMaybeMessage< ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::BGPRouterParameters >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::BGPRouterParameters >(arena);
}
template<> PROTOBUF_NOINLINE ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::BGPRouterReference* Arena::CreateMaybeMessage< ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::BGPRouterReference >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::BGPRouterReference >(arena);
}
template<> PROTOBUF_NOINLINE ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::BGPRouterReferenceAttributes* Arena::CreateMaybeMessage< ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::BGPRouterReferenceAttributes >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::BGPRouterReferenceAttributes >(arena);
}
template<> PROTOBUF_NOINLINE ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::BGPRouterSpec* Arena::CreateMaybeMessage< ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::BGPRouterSpec >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::BGPRouterSpec >(arena);
}
template<> PROTOBUF_NOINLINE ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::BGPRouterStatus* Arena::CreateMaybeMessage< ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::BGPRouterStatus >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::BGPRouterStatus >(arena);
}
template<> PROTOBUF_NOINLINE ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::BGPSession* Arena::CreateMaybeMessage< ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::BGPSession >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::BGPSession >(arena);
}
template<> PROTOBUF_NOINLINE ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::BGPSessionAttributes* Arena::CreateMaybeMessage< ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::BGPSessionAttributes >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::BGPSessionAttributes >(arena);
}
template<> PROTOBUF_NOINLINE ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::BGPSessionIPAttributes* Arena::CreateMaybeMessage< ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::BGPSessionIPAttributes >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::BGPSessionIPAttributes >(arena);
}
template<> PROTOBUF_NOINLINE ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::CommonSpec* Arena::CreateMaybeMessage< ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::CommonSpec >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::CommonSpec >(arena);
}
template<> PROTOBUF_NOINLINE ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::CommonStatus* Arena::CreateMaybeMessage< ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::CommonStatus >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::CommonStatus >(arena);
}
template<> PROTOBUF_NOINLINE ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::ContrailFqName* Arena::CreateMaybeMessage< ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::ContrailFqName >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::ContrailFqName >(arena);
}
template<> PROTOBUF_NOINLINE ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::EncapsulationPriorities* Arena::CreateMaybeMessage< ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::EncapsulationPriorities >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::EncapsulationPriorities >(arena);
}
template<> PROTOBUF_NOINLINE ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::FirewallActionListType* Arena::CreateMaybeMessage< ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::FirewallActionListType >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::FirewallActionListType >(arena);
}
template<> PROTOBUF_NOINLINE ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::FirewallPolicy* Arena::CreateMaybeMessage< ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::FirewallPolicy >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::FirewallPolicy >(arena);
}
template<> PROTOBUF_NOINLINE ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::FirewallPolicyAttribute* Arena::CreateMaybeMessage< ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::FirewallPolicyAttribute >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::FirewallPolicyAttribute >(arena);
}
template<> PROTOBUF_NOINLINE ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::FirewallPolicyList* Arena::CreateMaybeMessage< ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::FirewallPolicyList >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::FirewallPolicyList >(arena);
}
template<> PROTOBUF_NOINLINE ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::FirewallPolicyReference* Arena::CreateMaybeMessage< ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::FirewallPolicyReference >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::FirewallPolicyReference >(arena);
}
template<> PROTOBUF_NOINLINE ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::FirewallPolicySpec* Arena::CreateMaybeMessage< ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::FirewallPolicySpec >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::FirewallPolicySpec >(arena);
}
template<> PROTOBUF_NOINLINE ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::FirewallPolicyStatus* Arena::CreateMaybeMessage< ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::FirewallPolicyStatus >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::FirewallPolicyStatus >(arena);
}
template<> PROTOBUF_NOINLINE ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::FirewallRule* Arena::CreateMaybeMessage< ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::FirewallRule >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::FirewallRule >(arena);
}
template<> PROTOBUF_NOINLINE ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::FirewallRuleEndpointType* Arena::CreateMaybeMessage< ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::FirewallRuleEndpointType >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::FirewallRuleEndpointType >(arena);
}
template<> PROTOBUF_NOINLINE ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::FirewallRuleList* Arena::CreateMaybeMessage< ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::FirewallRuleList >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::FirewallRuleList >(arena);
}
template<> PROTOBUF_NOINLINE ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::FirewallRuleReference* Arena::CreateMaybeMessage< ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::FirewallRuleReference >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::FirewallRuleReference >(arena);
}
template<> PROTOBUF_NOINLINE ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::FirewallRuleSpec* Arena::CreateMaybeMessage< ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::FirewallRuleSpec >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::FirewallRuleSpec >(arena);
}
template<> PROTOBUF_NOINLINE ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::FirewallRuleStatus* Arena::CreateMaybeMessage< ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::FirewallRuleStatus >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::FirewallRuleStatus >(arena);
}
template<> PROTOBUF_NOINLINE ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::FirewallServiceType* Arena::CreateMaybeMessage< ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::FirewallServiceType >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::FirewallServiceType >(arena);
}
template<> PROTOBUF_NOINLINE ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::FirewallSubnet* Arena::CreateMaybeMessage< ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::FirewallSubnet >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::FirewallSubnet >(arena);
}
template<> PROTOBUF_NOINLINE ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::FloatingIP* Arena::CreateMaybeMessage< ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::FloatingIP >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::FloatingIP >(arena);
}
template<> PROTOBUF_NOINLINE ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::FloatingIPList* Arena::CreateMaybeMessage< ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::FloatingIPList >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::FloatingIPList >(arena);
}
template<> PROTOBUF_NOINLINE ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::FloatingIPPortMappings* Arena::CreateMaybeMessage< ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::FloatingIPPortMappings >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::FloatingIPPortMappings >(arena);
}
template<> PROTOBUF_NOINLINE ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::FloatingIPPortPortMapping* Arena::CreateMaybeMessage< ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::FloatingIPPortPortMapping >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::FloatingIPPortPortMapping >(arena);
}
template<> PROTOBUF_NOINLINE ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::FloatingIPSpec* Arena::CreateMaybeMessage< ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::FloatingIPSpec >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::FloatingIPSpec >(arena);
}
template<> PROTOBUF_NOINLINE ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::FloatingIPStatus* Arena::CreateMaybeMessage< ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::FloatingIPStatus >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::FloatingIPStatus >(arena);
}
template<> PROTOBUF_NOINLINE ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::GlobalSystemConfig* Arena::CreateMaybeMessage< ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::GlobalSystemConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::GlobalSystemConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::GlobalSystemConfigList* Arena::CreateMaybeMessage< ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::GlobalSystemConfigList >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::GlobalSystemConfigList >(arena);
}
template<> PROTOBUF_NOINLINE ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::GlobalSystemConfigSpec* Arena::CreateMaybeMessage< ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::GlobalSystemConfigSpec >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::GlobalSystemConfigSpec >(arena);
}
template<> PROTOBUF_NOINLINE ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::GlobalSystemConfigStatus* Arena::CreateMaybeMessage< ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::GlobalSystemConfigStatus >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::GlobalSystemConfigStatus >(arena);
}
template<> PROTOBUF_NOINLINE ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::GlobalVrouterConfig* Arena::CreateMaybeMessage< ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::GlobalVrouterConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::GlobalVrouterConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::GlobalVrouterConfigList* Arena::CreateMaybeMessage< ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::GlobalVrouterConfigList >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::GlobalVrouterConfigList >(arena);
}
template<> PROTOBUF_NOINLINE ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::GlobalVrouterConfigSpec* Arena::CreateMaybeMessage< ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::GlobalVrouterConfigSpec >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::GlobalVrouterConfigSpec >(arena);
}
template<> PROTOBUF_NOINLINE ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::GlobalVrouterConfigStatus* Arena::CreateMaybeMessage< ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::GlobalVrouterConfigStatus >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::GlobalVrouterConfigStatus >(arena);
}
template<> PROTOBUF_NOINLINE ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::IPRange* Arena::CreateMaybeMessage< ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::IPRange >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::IPRange >(arena);
}
template<> PROTOBUF_NOINLINE ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::ImportVirtualNetworkRouter* Arena::CreateMaybeMessage< ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::ImportVirtualNetworkRouter >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::ImportVirtualNetworkRouter >(arena);
}
template<> PROTOBUF_NOINLINE ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::InstanceIP* Arena::CreateMaybeMessage< ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::InstanceIP >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::InstanceIP >(arena);
}
template<> PROTOBUF_NOINLINE ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::InstanceIPList* Arena::CreateMaybeMessage< ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::InstanceIPList >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::InstanceIPList >(arena);
}
template<> PROTOBUF_NOINLINE ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::InstanceIPSpec* Arena::CreateMaybeMessage< ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::InstanceIPSpec >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::InstanceIPSpec >(arena);
}
template<> PROTOBUF_NOINLINE ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::InstanceIPStatus* Arena::CreateMaybeMessage< ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::InstanceIPStatus >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::InstanceIPStatus >(arena);
}
template<> PROTOBUF_NOINLINE ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::LinklocalServiceEntryType* Arena::CreateMaybeMessage< ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::LinklocalServiceEntryType >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::LinklocalServiceEntryType >(arena);
}
template<> PROTOBUF_NOINLINE ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::LinklocalServices* Arena::CreateMaybeMessage< ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::LinklocalServices >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::LinklocalServices >(arena);
}
template<> PROTOBUF_NOINLINE ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::MACAddresses* Arena::CreateMaybeMessage< ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::MACAddresses >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::MACAddresses >(arena);
}
template<> PROTOBUF_NOINLINE ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::PolicyBasedForwardingRule* Arena::CreateMaybeMessage< ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::PolicyBasedForwardingRule >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::PolicyBasedForwardingRule >(arena);
}
template<> PROTOBUF_NOINLINE ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::PortRange* Arena::CreateMaybeMessage< ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::PortRange >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::PortRange >(arena);
}
template<> PROTOBUF_NOINLINE ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::PortTranslationPool* Arena::CreateMaybeMessage< ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::PortTranslationPool >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::PortTranslationPool >(arena);
}
template<> PROTOBUF_NOINLINE ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::PortTranslationPools* Arena::CreateMaybeMessage< ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::PortTranslationPools >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::PortTranslationPools >(arena);
}
template<> PROTOBUF_NOINLINE ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::PortType* Arena::CreateMaybeMessage< ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::PortType >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::PortType >(arena);
}
template<> PROTOBUF_NOINLINE ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::Range* Arena::CreateMaybeMessage< ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::Range >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::Range >(arena);
}
template<> PROTOBUF_NOINLINE ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::ReconcilerState* Arena::CreateMaybeMessage< ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::ReconcilerState >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::ReconcilerState >(arena);
}
template<> PROTOBUF_NOINLINE ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::ResourceReference* Arena::CreateMaybeMessage< ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::ResourceReference >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::ResourceReference >(arena);
}
template<> PROTOBUF_NOINLINE ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::RouteOriginOverride* Arena::CreateMaybeMessage< ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::RouteOriginOverride >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::RouteOriginOverride >(arena);
}
template<> PROTOBUF_NOINLINE ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::RouteTarget* Arena::CreateMaybeMessage< ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::RouteTarget >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::RouteTarget >(arena);
}
template<> PROTOBUF_NOINLINE ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::RouteTargetList* Arena::CreateMaybeMessage< ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::RouteTargetList >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::RouteTargetList >(arena);
}
template<> PROTOBUF_NOINLINE ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::RouteTargetReference* Arena::CreateMaybeMessage< ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::RouteTargetReference >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::RouteTargetReference >(arena);
}
template<> PROTOBUF_NOINLINE ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::RouteTargetReferenceAttributes* Arena::CreateMaybeMessage< ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::RouteTargetReferenceAttributes >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::RouteTargetReferenceAttributes >(arena);
}
template<> PROTOBUF_NOINLINE ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::RouteTargetSpec* Arena::CreateMaybeMessage< ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::RouteTargetSpec >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::RouteTargetSpec >(arena);
}
template<> PROTOBUF_NOINLINE ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::RouteTargetStatus* Arena::CreateMaybeMessage< ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::RouteTargetStatus >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::RouteTargetStatus >(arena);
}
template<> PROTOBUF_NOINLINE ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::RoutingInstance* Arena::CreateMaybeMessage< ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::RoutingInstance >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::RoutingInstance >(arena);
}
template<> PROTOBUF_NOINLINE ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::RoutingInstanceList* Arena::CreateMaybeMessage< ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::RoutingInstanceList >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::RoutingInstanceList >(arena);
}
template<> PROTOBUF_NOINLINE ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::RoutingInstanceReference* Arena::CreateMaybeMessage< ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::RoutingInstanceReference >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::RoutingInstanceReference >(arena);
}
template<> PROTOBUF_NOINLINE ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::RoutingInstanceSpec* Arena::CreateMaybeMessage< ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::RoutingInstanceSpec >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::RoutingInstanceSpec >(arena);
}
template<> PROTOBUF_NOINLINE ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::RoutingInstanceStatus_VirtualNetworkRouterRouteTargetReferencesEntry_DoNotUse* Arena::CreateMaybeMessage< ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::RoutingInstanceStatus_VirtualNetworkRouterRouteTargetReferencesEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::RoutingInstanceStatus_VirtualNetworkRouterRouteTargetReferencesEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::RoutingInstanceStatus* Arena::CreateMaybeMessage< ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::RoutingInstanceStatus >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::RoutingInstanceStatus >(arena);
}
template<> PROTOBUF_NOINLINE ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::Subnet* Arena::CreateMaybeMessage< ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::Subnet >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::Subnet >(arena);
}
template<> PROTOBUF_NOINLINE ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::SubnetList* Arena::CreateMaybeMessage< ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::SubnetList >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::SubnetList >(arena);
}
template<> PROTOBUF_NOINLINE ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::SubnetReference* Arena::CreateMaybeMessage< ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::SubnetReference >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::SubnetReference >(arena);
}
template<> PROTOBUF_NOINLINE ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::SubnetSpec* Arena::CreateMaybeMessage< ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::SubnetSpec >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::SubnetSpec >(arena);
}
template<> PROTOBUF_NOINLINE ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::SubnetStatus* Arena::CreateMaybeMessage< ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::SubnetStatus >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::SubnetStatus >(arena);
}
template<> PROTOBUF_NOINLINE ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::Tag* Arena::CreateMaybeMessage< ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::Tag >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::Tag >(arena);
}
template<> PROTOBUF_NOINLINE ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::TagList* Arena::CreateMaybeMessage< ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::TagList >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::TagList >(arena);
}
template<> PROTOBUF_NOINLINE ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::TagSpec* Arena::CreateMaybeMessage< ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::TagSpec >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::TagSpec >(arena);
}
template<> PROTOBUF_NOINLINE ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::TagStatus* Arena::CreateMaybeMessage< ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::TagStatus >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::TagStatus >(arena);
}
template<> PROTOBUF_NOINLINE ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::TagType* Arena::CreateMaybeMessage< ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::TagType >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::TagType >(arena);
}
template<> PROTOBUF_NOINLINE ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::TagTypeList* Arena::CreateMaybeMessage< ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::TagTypeList >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::TagTypeList >(arena);
}
template<> PROTOBUF_NOINLINE ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::TagTypeSpec* Arena::CreateMaybeMessage< ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::TagTypeSpec >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::TagTypeSpec >(arena);
}
template<> PROTOBUF_NOINLINE ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::TagTypeStatus* Arena::CreateMaybeMessage< ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::TagTypeStatus >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::TagTypeStatus >(arena);
}
template<> PROTOBUF_NOINLINE ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::VirtualMachine* Arena::CreateMaybeMessage< ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::VirtualMachine >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::VirtualMachine >(arena);
}
template<> PROTOBUF_NOINLINE ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::VirtualMachineInterface* Arena::CreateMaybeMessage< ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::VirtualMachineInterface >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::VirtualMachineInterface >(arena);
}
template<> PROTOBUF_NOINLINE ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::VirtualMachineInterfaceList* Arena::CreateMaybeMessage< ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::VirtualMachineInterfaceList >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::VirtualMachineInterfaceList >(arena);
}
template<> PROTOBUF_NOINLINE ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::VirtualMachineInterfaceProperties* Arena::CreateMaybeMessage< ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::VirtualMachineInterfaceProperties >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::VirtualMachineInterfaceProperties >(arena);
}
template<> PROTOBUF_NOINLINE ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::VirtualMachineInterfaceSpec* Arena::CreateMaybeMessage< ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::VirtualMachineInterfaceSpec >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::VirtualMachineInterfaceSpec >(arena);
}
template<> PROTOBUF_NOINLINE ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::VirtualMachineInterfaceStatus* Arena::CreateMaybeMessage< ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::VirtualMachineInterfaceStatus >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::VirtualMachineInterfaceStatus >(arena);
}
template<> PROTOBUF_NOINLINE ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::VirtualMachineList* Arena::CreateMaybeMessage< ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::VirtualMachineList >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::VirtualMachineList >(arena);
}
template<> PROTOBUF_NOINLINE ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::VirtualMachineSpec* Arena::CreateMaybeMessage< ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::VirtualMachineSpec >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::VirtualMachineSpec >(arena);
}
template<> PROTOBUF_NOINLINE ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::VirtualMachineStatus* Arena::CreateMaybeMessage< ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::VirtualMachineStatus >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::VirtualMachineStatus >(arena);
}
template<> PROTOBUF_NOINLINE ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::VirtualNetwork* Arena::CreateMaybeMessage< ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::VirtualNetwork >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::VirtualNetwork >(arena);
}
template<> PROTOBUF_NOINLINE ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::VirtualNetworkList* Arena::CreateMaybeMessage< ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::VirtualNetworkList >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::VirtualNetworkList >(arena);
}
template<> PROTOBUF_NOINLINE ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::VirtualNetworkRouteTargetReferenceList* Arena::CreateMaybeMessage< ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::VirtualNetworkRouteTargetReferenceList >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::VirtualNetworkRouteTargetReferenceList >(arena);
}
template<> PROTOBUF_NOINLINE ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::VirtualNetworkRouter* Arena::CreateMaybeMessage< ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::VirtualNetworkRouter >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::VirtualNetworkRouter >(arena);
}
template<> PROTOBUF_NOINLINE ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::VirtualNetworkRouterEntry* Arena::CreateMaybeMessage< ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::VirtualNetworkRouterEntry >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::VirtualNetworkRouterEntry >(arena);
}
template<> PROTOBUF_NOINLINE ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::VirtualNetworkRouterList* Arena::CreateMaybeMessage< ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::VirtualNetworkRouterList >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::VirtualNetworkRouterList >(arena);
}
template<> PROTOBUF_NOINLINE ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::VirtualNetworkRouterSpec* Arena::CreateMaybeMessage< ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::VirtualNetworkRouterSpec >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::VirtualNetworkRouterSpec >(arena);
}
template<> PROTOBUF_NOINLINE ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::VirtualNetworkRouterStatus* Arena::CreateMaybeMessage< ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::VirtualNetworkRouterStatus >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::VirtualNetworkRouterStatus >(arena);
}
template<> PROTOBUF_NOINLINE ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::VirtualNetworkSpec* Arena::CreateMaybeMessage< ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::VirtualNetworkSpec >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::VirtualNetworkSpec >(arena);
}
template<> PROTOBUF_NOINLINE ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::VirtualNetworkStatus* Arena::CreateMaybeMessage< ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::VirtualNetworkStatus >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::VirtualNetworkStatus >(arena);
}
template<> PROTOBUF_NOINLINE ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::VirtualNetworkType* Arena::CreateMaybeMessage< ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::VirtualNetworkType >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::VirtualNetworkType >(arena);
}
template<> PROTOBUF_NOINLINE ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::VirtualRouter* Arena::CreateMaybeMessage< ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::VirtualRouter >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::VirtualRouter >(arena);
}
template<> PROTOBUF_NOINLINE ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::VirtualRouterList* Arena::CreateMaybeMessage< ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::VirtualRouterList >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::VirtualRouterList >(arena);
}
template<> PROTOBUF_NOINLINE ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::VirtualRouterSpec* Arena::CreateMaybeMessage< ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::VirtualRouterSpec >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::VirtualRouterSpec >(arena);
}
template<> PROTOBUF_NOINLINE ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::VirtualRouterStatus* Arena::CreateMaybeMessage< ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::VirtualRouterStatus >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ssd_git::juniper::net::contrail::cn2::contrail::pkg::apis::core::v1alpha1::VirtualRouterStatus >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
